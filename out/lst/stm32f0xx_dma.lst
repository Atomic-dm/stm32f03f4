   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_dma.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DMA_DeInit,"ax",%progbits
  18              		.align	2
  19              		.global	DMA_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	DMA_DeInit:
  24              	.LFB33:
  25              		.file 1 ".\\StdPeriphLib\\src/stm32f0xx_dma.c"
   1:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
   2:.\StdPeriphLib\src/stm32f0xx_dma.c ****   ******************************************************************************
   3:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @file    stm32f0xx_dma.c
   4:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @author  MCD Application Team
   5:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @version V1.5.0
   6:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @date    05-December-2014
   7:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):
   9:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *           + Initialization and Configuration
  10:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *           + Data Counter
  11:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *           + Interrupts and flags management
  12:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *
  13:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *  @verbatim
  14:.\StdPeriphLib\src/stm32f0xx_dma.c ****   ==============================================================================
  15:.\StdPeriphLib\src/stm32f0xx_dma.c ****                       ##### How to use this driver #####
  16:.\StdPeriphLib\src/stm32f0xx_dma.c ****   ==============================================================================
  17:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..]
  18:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (#) Enable The DMA controller clock using 
  19:.\StdPeriphLib\src/stm32f0xx_dma.c ****         RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE) function for DMA1.
  20:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (#) Enable and configure the peripheral to be connected to the DMA channel
  21:.\StdPeriphLib\src/stm32f0xx_dma.c ****        (except for internal SRAM / FLASH memories: no initialization is necessary).
  22:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (#) For a given Channel, program the Source and Destination addresses, 
  23:.\StdPeriphLib\src/stm32f0xx_dma.c ****         the transfer Direction, the Buffer Size, the Peripheral and Memory 
  24:.\StdPeriphLib\src/stm32f0xx_dma.c ****         Incrementation mode and Data Size, the Circular or Normal mode, 
  25:.\StdPeriphLib\src/stm32f0xx_dma.c ****         the channel transfer Priority and the Memory-to-Memory transfer 
  26:.\StdPeriphLib\src/stm32f0xx_dma.c ****         mode (if needed) using the DMA_Init() function.
  27:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (#) Enable the NVIC and the corresponding interrupt(s) using the function 
  28:.\StdPeriphLib\src/stm32f0xx_dma.c ****         DMA_ITConfig() if you need to use DMA interrupts.
  29:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (#) Enable the DMA channel using the DMA_Cmd() function.
  30:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (#) Activate the needed channel Request using PPP_DMACmd() function for 
  31:.\StdPeriphLib\src/stm32f0xx_dma.c ****         any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...) 
  32:.\StdPeriphLib\src/stm32f0xx_dma.c ****         The function allowing this operation is provided in each PPP peripheral 
  33:.\StdPeriphLib\src/stm32f0xx_dma.c ****         driver (ie. SPI_DMACmd for SPI peripheral).
  34:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (#) Optionally, you can configure the number of data to be transferred
  35:.\StdPeriphLib\src/stm32f0xx_dma.c ****         when the channel is disabled (ie. after each Transfer Complete event
  36:.\StdPeriphLib\src/stm32f0xx_dma.c ****         or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  37:.\StdPeriphLib\src/stm32f0xx_dma.c ****         And you can get the number of remaining data to be transferred using 
  38:.\StdPeriphLib\src/stm32f0xx_dma.c ****         the function DMA_GetCurrDataCounter() at run time (when the DMA channel is
  39:.\StdPeriphLib\src/stm32f0xx_dma.c ****         enabled and running).
  40:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (#) To control DMA events you can use one of the following two methods:
  41:.\StdPeriphLib\src/stm32f0xx_dma.c ****         (##) Check on DMA channel flags using the function DMA_GetFlagStatus().
  42:.\StdPeriphLib\src/stm32f0xx_dma.c ****         (##) Use DMA interrupts through the function DMA_ITConfig() at initialization
  43:.\StdPeriphLib\src/stm32f0xx_dma.c ****              phase and DMA_GetITStatus() function into interrupt routines in
  44:.\StdPeriphLib\src/stm32f0xx_dma.c ****              communication phase.
  45:.\StdPeriphLib\src/stm32f0xx_dma.c ****              After checking on a flag you should clear it using DMA_ClearFlag()
  46:.\StdPeriphLib\src/stm32f0xx_dma.c ****              function. And after checking on an interrupt event you should 
  47:.\StdPeriphLib\src/stm32f0xx_dma.c ****              clear it using DMA_ClearITPendingBit() function.
  48:.\StdPeriphLib\src/stm32f0xx_dma.c ****     @endverbatim
  49:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *
  50:.\StdPeriphLib\src/stm32f0xx_dma.c ****   ******************************************************************************
  51:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @attention
  52:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *
  53:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  54:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *
  55:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  56:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * You may not use this file except in compliance with the License.
  57:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * You may obtain a copy of the License at:
  58:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *
  59:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  60:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *
  61:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * Unless required by applicable law or agreed to in writing, software 
  62:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  63:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  64:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * See the License for the specific language governing permissions and
  65:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * limitations under the License.
  66:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *
  67:.\StdPeriphLib\src/stm32f0xx_dma.c ****   ******************************************************************************
  68:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
  69:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
  70:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* Includes ------------------------------------------------------------------*/
  71:.\StdPeriphLib\src/stm32f0xx_dma.c **** #include "stm32f0xx_dma.h"
  72:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
  73:.\StdPeriphLib\src/stm32f0xx_dma.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  74:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @{
  75:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
  76:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
  77:.\StdPeriphLib\src/stm32f0xx_dma.c **** /** @defgroup DMA 
  78:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief DMA driver modules
  79:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @{
  80:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
  81:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
  82:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
  83:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* Private define ------------------------------------------------------------*/
  84:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define CCR_CLEAR_MASK   ((uint32_t)0xFFFF800F) /* DMA Channel config registers Masks */
  85:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define FLAG_Mask        ((uint32_t)0x10000000) /* DMA2 FLAG mask */
  86:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
  87:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* DMA1 Channelx interrupt pending bit masks */
  88:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA1_CHANNEL1_IT_MASK    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  89:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA1_CHANNEL2_IT_MASK    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  90:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA1_CHANNEL3_IT_MASK    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  91:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA1_CHANNEL4_IT_MASK    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  92:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA1_CHANNEL5_IT_MASK    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  93:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA1_CHANNEL6_IT_MASK    ((uint32_t)(DMA_ISR_GIF6 | DMA_ISR_TCIF6 | DMA_ISR_HTIF6 | DMA_ISR
  94:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA1_CHANNEL7_IT_MASK    ((uint32_t)(DMA_ISR_GIF7 | DMA_ISR_TCIF7 | DMA_ISR_HTIF7 | DMA_ISR
  95:.\StdPeriphLib\src/stm32f0xx_dma.c ****     
  96:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* DMA2 Channelx interrupt pending bit masks: Only applicable for STM32F091 devices */
  97:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA2_CHANNEL1_IT_MASK    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  98:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA2_CHANNEL2_IT_MASK    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  99:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA2_CHANNEL3_IT_MASK    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
 100:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA2_CHANNEL4_IT_MASK    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
 101:.\StdPeriphLib\src/stm32f0xx_dma.c **** #define DMA2_CHANNEL5_IT_MASK    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
 102:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 103:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 104:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 105:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 106:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 107:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 108:.\StdPeriphLib\src/stm32f0xx_dma.c **** /** @defgroup DMA_Private_Functions 
 109:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @{
 110:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 111:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 112:.\StdPeriphLib\src/stm32f0xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 113:.\StdPeriphLib\src/stm32f0xx_dma.c ****  *  @brief   Initialization and Configuration functions
 114:.\StdPeriphLib\src/stm32f0xx_dma.c ****  *
 115:.\StdPeriphLib\src/stm32f0xx_dma.c **** @verbatim   
 116:.\StdPeriphLib\src/stm32f0xx_dma.c ****  ===============================================================================
 117:.\StdPeriphLib\src/stm32f0xx_dma.c ****             ##### Initialization and Configuration functions #####
 118:.\StdPeriphLib\src/stm32f0xx_dma.c ****  ===============================================================================
 119:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] This subsection provides functions allowing to initialize the DMA channel 
 120:.\StdPeriphLib\src/stm32f0xx_dma.c ****          source and destination addresses, incrementation and data sizes, transfer 
 121:.\StdPeriphLib\src/stm32f0xx_dma.c ****          direction, buffer size, circular/normal mode selection, memory-to-memory 
 122:.\StdPeriphLib\src/stm32f0xx_dma.c ****          mode selection and channel priority value.
 123:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] The DMA_Init() function follows the DMA configuration procedures as described 
 124:.\StdPeriphLib\src/stm32f0xx_dma.c ****          in reference manual (RM0091).
 125:.\StdPeriphLib\src/stm32f0xx_dma.c **** @endverbatim
 126:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @{
 127:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 128:.\StdPeriphLib\src/stm32f0xx_dma.c ****     
 129:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 130:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Deinitializes the DMAy Channelx registers to their default reset
 131:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         values.
 132:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and 
 133:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         x can be 1 to 7 for DMA1 to select the DMA Channel.
 134:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   Channel 6 and 7 are available only for STM32F072 devices.
 135:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None
 136:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 137:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
 138:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
  26              		.loc 1 138 0
  27              		.cfi_startproc
  28              	.LVL0:
 139:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 140:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 141:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 142:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Disable the selected DMAy Channelx */
 143:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  29              		.loc 1 143 0
  30 0000 0268     		ldr	r2, [r0]
  31 0002 3E4B     		ldr	r3, .L14
  32 0004 1340     		and	r3, r2
  33 0006 0360     		str	r3, [r0]
 144:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 145:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx control register */
 146:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR  = 0;
  34              		.loc 1 146 0
  35 0008 0023     		mov	r3, #0
  36 000a 0360     		str	r3, [r0]
 147:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 148:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx remaining bytes register */
 149:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = 0;
  37              		.loc 1 149 0
  38 000c 4360     		str	r3, [r0, #4]
 150:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 151:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx peripheral address register */
 152:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CPAR  = 0;
  39              		.loc 1 152 0
  40 000e 8360     		str	r3, [r0, #8]
 153:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 154:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx memory address register */
 155:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CMAR = 0;
  41              		.loc 1 155 0
  42 0010 C360     		str	r3, [r0, #12]
 156:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 157:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if (DMAy_Channelx == DMA1_Channel1)
  43              		.loc 1 157 0
  44 0012 3B4B     		ldr	r3, .L14+4
  45 0014 9842     		cmp	r0, r3
  46 0016 05D1     		bne	.L2
 158:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 159:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel1 */
 160:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  47              		.loc 1 160 0
  48 0018 3A4A     		ldr	r2, .L14+8
  49 001a 5168     		ldr	r1, [r2, #4]
  50 001c 0F23     		mov	r3, #15
  51 001e 0B43     		orr	r3, r1
  52 0020 5360     		str	r3, [r2, #4]
  53 0022 69E0     		b	.L1
  54              	.L2:
 161:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 162:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel2)
  55              		.loc 1 162 0
  56 0024 384B     		ldr	r3, .L14+12
  57 0026 9842     		cmp	r0, r3
  58 0028 05D1     		bne	.L4
 163:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 164:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel2 */
 165:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  59              		.loc 1 165 0
  60 002a 364A     		ldr	r2, .L14+8
  61 002c 5168     		ldr	r1, [r2, #4]
  62 002e F023     		mov	r3, #240
  63 0030 0B43     		orr	r3, r1
  64 0032 5360     		str	r3, [r2, #4]
  65 0034 60E0     		b	.L1
  66              	.L4:
 166:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 167:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel3)
  67              		.loc 1 167 0
  68 0036 354B     		ldr	r3, .L14+16
  69 0038 9842     		cmp	r0, r3
  70 003a 06D1     		bne	.L5
 168:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 169:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel3 */
 170:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  71              		.loc 1 170 0
  72 003c 314A     		ldr	r2, .L14+8
  73 003e 5368     		ldr	r3, [r2, #4]
  74 0040 F021     		mov	r1, #240
  75 0042 0901     		lsl	r1, r1, #4
  76 0044 0B43     		orr	r3, r1
  77 0046 5360     		str	r3, [r2, #4]
  78 0048 56E0     		b	.L1
  79              	.L5:
 171:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 172:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel4)
  80              		.loc 1 172 0
  81 004a 314B     		ldr	r3, .L14+20
  82 004c 9842     		cmp	r0, r3
  83 004e 06D1     		bne	.L6
 173:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 174:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel4 */
 175:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  84              		.loc 1 175 0
  85 0050 2C4A     		ldr	r2, .L14+8
  86 0052 5368     		ldr	r3, [r2, #4]
  87 0054 F021     		mov	r1, #240
  88 0056 0902     		lsl	r1, r1, #8
  89 0058 0B43     		orr	r3, r1
  90 005a 5360     		str	r3, [r2, #4]
  91 005c 4CE0     		b	.L1
  92              	.L6:
 176:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 177:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel5)
  93              		.loc 1 177 0
  94 005e 2D4B     		ldr	r3, .L14+24
  95 0060 9842     		cmp	r0, r3
  96 0062 06D1     		bne	.L7
 178:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 179:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel5 */
 180:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  97              		.loc 1 180 0
  98 0064 274A     		ldr	r2, .L14+8
  99 0066 5368     		ldr	r3, [r2, #4]
 100 0068 F021     		mov	r1, #240
 101 006a 0903     		lsl	r1, r1, #12
 102 006c 0B43     		orr	r3, r1
 103 006e 5360     		str	r3, [r2, #4]
 104 0070 42E0     		b	.L1
 105              	.L7:
 181:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 182:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel6)
 106              		.loc 1 182 0
 107 0072 294B     		ldr	r3, .L14+28
 108 0074 9842     		cmp	r0, r3
 109 0076 06D1     		bne	.L8
 183:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 184:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel6 */
 185:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 110              		.loc 1 185 0
 111 0078 224A     		ldr	r2, .L14+8
 112 007a 5368     		ldr	r3, [r2, #4]
 113 007c F021     		mov	r1, #240
 114 007e 0904     		lsl	r1, r1, #16
 115 0080 0B43     		orr	r3, r1
 116 0082 5360     		str	r3, [r2, #4]
 117 0084 38E0     		b	.L1
 118              	.L8:
 186:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 187:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel7)
 119              		.loc 1 187 0
 120 0086 254B     		ldr	r3, .L14+32
 121 0088 9842     		cmp	r0, r3
 122 008a 06D1     		bne	.L9
 188:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 189:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel7 */
 190:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 123              		.loc 1 190 0
 124 008c 1D4A     		ldr	r2, .L14+8
 125 008e 5368     		ldr	r3, [r2, #4]
 126 0090 F021     		mov	r1, #240
 127 0092 0905     		lsl	r1, r1, #20
 128 0094 0B43     		orr	r3, r1
 129 0096 5360     		str	r3, [r2, #4]
 130 0098 2EE0     		b	.L1
 131              	.L9:
 191:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 192:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA2_Channel1)
 132              		.loc 1 192 0
 133 009a 214B     		ldr	r3, .L14+36
 134 009c 9842     		cmp	r0, r3
 135 009e 05D1     		bne	.L10
 193:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 194:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel1 */
 195:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 136              		.loc 1 195 0
 137 00a0 204A     		ldr	r2, .L14+40
 138 00a2 5168     		ldr	r1, [r2, #4]
 139 00a4 0F23     		mov	r3, #15
 140 00a6 0B43     		orr	r3, r1
 141 00a8 5360     		str	r3, [r2, #4]
 142 00aa 25E0     		b	.L1
 143              	.L10:
 196:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 197:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA2_Channel2)
 144              		.loc 1 197 0
 145 00ac 1E4B     		ldr	r3, .L14+44
 146 00ae 9842     		cmp	r0, r3
 147 00b0 05D1     		bne	.L11
 198:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 199:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel2 */
 200:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 148              		.loc 1 200 0
 149 00b2 1C4A     		ldr	r2, .L14+40
 150 00b4 5168     		ldr	r1, [r2, #4]
 151 00b6 F023     		mov	r3, #240
 152 00b8 0B43     		orr	r3, r1
 153 00ba 5360     		str	r3, [r2, #4]
 154 00bc 1CE0     		b	.L1
 155              	.L11:
 201:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 202:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA2_Channel3)
 156              		.loc 1 202 0
 157 00be 1B4B     		ldr	r3, .L14+48
 158 00c0 9842     		cmp	r0, r3
 159 00c2 06D1     		bne	.L12
 203:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 204:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel3 */
 205:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 160              		.loc 1 205 0
 161 00c4 174A     		ldr	r2, .L14+40
 162 00c6 5368     		ldr	r3, [r2, #4]
 163 00c8 F021     		mov	r1, #240
 164 00ca 0901     		lsl	r1, r1, #4
 165 00cc 0B43     		orr	r3, r1
 166 00ce 5360     		str	r3, [r2, #4]
 167 00d0 12E0     		b	.L1
 168              	.L12:
 206:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 207:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA2_Channel4)
 169              		.loc 1 207 0
 170 00d2 174B     		ldr	r3, .L14+52
 171 00d4 9842     		cmp	r0, r3
 172 00d6 06D1     		bne	.L13
 208:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 209:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel4 */
 210:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 173              		.loc 1 210 0
 174 00d8 124A     		ldr	r2, .L14+40
 175 00da 5368     		ldr	r3, [r2, #4]
 176 00dc F021     		mov	r1, #240
 177 00de 0902     		lsl	r1, r1, #8
 178 00e0 0B43     		orr	r3, r1
 179 00e2 5360     		str	r3, [r2, #4]
 180 00e4 08E0     		b	.L1
 181              	.L13:
 211:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 212:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 213:.\StdPeriphLib\src/stm32f0xx_dma.c ****   { 
 214:.\StdPeriphLib\src/stm32f0xx_dma.c ****     if (DMAy_Channelx == DMA2_Channel5)
 182              		.loc 1 214 0
 183 00e6 134B     		ldr	r3, .L14+56
 184 00e8 9842     		cmp	r0, r3
 185 00ea 05D1     		bne	.L1
 215:.\StdPeriphLib\src/stm32f0xx_dma.c ****     {
 216:.\StdPeriphLib\src/stm32f0xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Channel5 */
 217:.\StdPeriphLib\src/stm32f0xx_dma.c ****       DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 186              		.loc 1 217 0
 187 00ec 0D4A     		ldr	r2, .L14+40
 188 00ee 5368     		ldr	r3, [r2, #4]
 189 00f0 F021     		mov	r1, #240
 190 00f2 0903     		lsl	r1, r1, #12
 191 00f4 0B43     		orr	r3, r1
 192 00f6 5360     		str	r3, [r2, #4]
 193              	.L1:
 218:.\StdPeriphLib\src/stm32f0xx_dma.c ****     }
 219:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 220:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 194              		.loc 1 220 0
 195              		@ sp needed
 196 00f8 7047     		bx	lr
 197              	.L15:
 198 00fa C046     		.align	2
 199              	.L14:
 200 00fc FEFF0000 		.word	65534
 201 0100 08000240 		.word	1073872904
 202 0104 00000240 		.word	1073872896
 203 0108 1C000240 		.word	1073872924
 204 010c 30000240 		.word	1073872944
 205 0110 44000240 		.word	1073872964
 206 0114 58000240 		.word	1073872984
 207 0118 6C000240 		.word	1073873004
 208 011c 80000240 		.word	1073873024
 209 0120 08040240 		.word	1073873928
 210 0124 00040240 		.word	1073873920
 211 0128 1C040240 		.word	1073873948
 212 012c 30040240 		.word	1073873968
 213 0130 44040240 		.word	1073873988
 214 0134 58040240 		.word	1073874008
 215              		.cfi_endproc
 216              	.LFE33:
 218              		.section	.text.DMA_Init,"ax",%progbits
 219              		.align	2
 220              		.global	DMA_Init
 221              		.code	16
 222              		.thumb_func
 224              	DMA_Init:
 225              	.LFB34:
 221:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 222:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 223:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Initializes the DMAy Channelx according to the specified parameters 
 224:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         in the DMA_InitStruct.
 225:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 226:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 227:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 228:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices.   
 229:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 230:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         the configuration information for the specified DMA Channel.
 231:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None
 232:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 233:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
 234:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 226              		.loc 1 234 0
 227              		.cfi_startproc
 228              	.LVL1:
 229 0000 10B5     		push	{r4, lr}
 230              	.LCFI0:
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 4, -8
 233              		.cfi_offset 14, -4
 234              	.LVL2:
 235:.\StdPeriphLib\src/stm32f0xx_dma.c ****   uint32_t tmpreg = 0;
 236:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 237:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 238:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 239:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
 240:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 241:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 242:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 243:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 244:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 245:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 246:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 247:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
 248:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 249:.\StdPeriphLib\src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CCR Configuration ----------------*/
 250:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Get the DMAy_Channelx CCR value */
 251:.\StdPeriphLib\src/stm32f0xx_dma.c ****   tmpreg = DMAy_Channelx->CCR;
 235              		.loc 1 251 0
 236 0002 0268     		ldr	r2, [r0]
 237              	.LVL3:
 252:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 253:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 254:.\StdPeriphLib\src/stm32f0xx_dma.c ****   tmpreg &= CCR_CLEAR_MASK;
 238              		.loc 1 254 0
 239 0004 0C4B     		ldr	r3, .L17
 240 0006 1A40     		and	r2, r3
 241              	.LVL4:
 255:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 256:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
 257:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Set DIR bit according to DMA_DIR value */
 258:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 259:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 260:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 261:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 262:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 263:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 264:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Set the MEM2MEM bit according to DMA_M2M value */
 265:.\StdPeriphLib\src/stm32f0xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 242              		.loc 1 265 0
 243 0008 0B6A     		ldr	r3, [r1, #32]
 244 000a 8C68     		ldr	r4, [r1, #8]
 245 000c 2343     		orr	r3, r4
 246 000e 0C69     		ldr	r4, [r1, #16]
 247 0010 2343     		orr	r3, r4
 266:.\StdPeriphLib\src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 248              		.loc 1 266 0
 249 0012 4C69     		ldr	r4, [r1, #20]
 250 0014 2343     		orr	r3, r4
 251 0016 8C69     		ldr	r4, [r1, #24]
 252 0018 2343     		orr	r3, r4
 267:.\StdPeriphLib\src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 253              		.loc 1 267 0
 254 001a CC69     		ldr	r4, [r1, #28]
 255 001c 2343     		orr	r3, r4
 256 001e 4C6A     		ldr	r4, [r1, #36]
 257 0020 2343     		orr	r3, r4
 268:.\StdPeriphLib\src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 258              		.loc 1 268 0
 259 0022 8C6A     		ldr	r4, [r1, #40]
 260 0024 2343     		orr	r3, r4
 265:.\StdPeriphLib\src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 261              		.loc 1 265 0
 262 0026 1343     		orr	r3, r2
 263              	.LVL5:
 269:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 270:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CCR */
 271:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR = tmpreg;
 264              		.loc 1 271 0
 265 0028 0360     		str	r3, [r0]
 272:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 273:.\StdPeriphLib\src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
 274:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CNDTR */
 275:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 266              		.loc 1 275 0
 267 002a CB68     		ldr	r3, [r1, #12]
 268              	.LVL6:
 269 002c 4360     		str	r3, [r0, #4]
 270              	.LVL7:
 276:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 277:.\StdPeriphLib\src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
 278:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CPAR */
 279:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 271              		.loc 1 279 0
 272 002e 0B68     		ldr	r3, [r1]
 273 0030 8360     		str	r3, [r0, #8]
 280:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 281:.\StdPeriphLib\src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
 282:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CMAR */
 283:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 274              		.loc 1 283 0
 275 0032 4B68     		ldr	r3, [r1, #4]
 276 0034 C360     		str	r3, [r0, #12]
 284:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 277              		.loc 1 284 0
 278              		@ sp needed
 279 0036 10BD     		pop	{r4, pc}
 280              	.L18:
 281              		.align	2
 282              	.L17:
 283 0038 0F80FFFF 		.word	-32753
 284              		.cfi_endproc
 285              	.LFE34:
 287              		.section	.text.DMA_StructInit,"ax",%progbits
 288              		.align	2
 289              		.global	DMA_StructInit
 290              		.code	16
 291              		.thumb_func
 293              	DMA_StructInit:
 294              	.LFB35:
 285:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 286:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 287:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 288:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
 289:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         be initialized.
 290:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None
 291:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 292:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 293:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 295              		.loc 1 293 0
 296              		.cfi_startproc
 297              	.LVL8:
 294:.\StdPeriphLib\src/stm32f0xx_dma.c **** /*-------------- Reset DMA init structure parameters values ------------------*/
 295:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 296:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 298              		.loc 1 296 0
 299 0000 0023     		mov	r3, #0
 300 0002 0360     		str	r3, [r0]
 297:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryBaseAddr member */
 298:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 301              		.loc 1 298 0
 302 0004 4360     		str	r3, [r0, #4]
 299:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_DIR member */
 300:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 303              		.loc 1 300 0
 304 0006 8360     		str	r3, [r0, #8]
 301:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 302:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 305              		.loc 1 302 0
 306 0008 C360     		str	r3, [r0, #12]
 303:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 304:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 307              		.loc 1 304 0
 308 000a 0361     		str	r3, [r0, #16]
 305:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 306:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 309              		.loc 1 306 0
 310 000c 4361     		str	r3, [r0, #20]
 307:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 308:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 311              		.loc 1 308 0
 312 000e 8361     		str	r3, [r0, #24]
 309:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 310:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 313              		.loc 1 310 0
 314 0010 C361     		str	r3, [r0, #28]
 311:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_Mode member */
 312:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 315              		.loc 1 312 0
 316 0012 0362     		str	r3, [r0, #32]
 313:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_Priority member */
 314:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 317              		.loc 1 314 0
 318 0014 4362     		str	r3, [r0, #36]
 315:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Initialize the DMA_M2M member */
 316:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 319              		.loc 1 316 0
 320 0016 8362     		str	r3, [r0, #40]
 317:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 321              		.loc 1 317 0
 322              		@ sp needed
 323 0018 7047     		bx	lr
 324              		.cfi_endproc
 325              	.LFE35:
 327 001a C046     		.section	.text.DMA_Cmd,"ax",%progbits
 328              		.align	2
 329              		.global	DMA_Cmd
 330              		.code	16
 331              		.thumb_func
 333              	DMA_Cmd:
 334              	.LFB36:
 318:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 319:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 320:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx.
 321:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 322:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 323:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 324:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices. 
 325:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  NewState: new state of the DMAy Channelx. 
 326:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         This parameter can be: ENABLE or DISABLE.
 327:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None
 328:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 329:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
 330:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 335              		.loc 1 330 0
 336              		.cfi_startproc
 337              	.LVL9:
 331:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 332:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 333:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 334:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 335:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if (NewState != DISABLE)
 338              		.loc 1 335 0
 339 0000 0029     		cmp	r1, #0
 340 0002 04D0     		beq	.L21
 336:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 337:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Enable the selected DMAy Channelx */
 338:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR |= DMA_CCR_EN;
 341              		.loc 1 338 0
 342 0004 0268     		ldr	r2, [r0]
 343 0006 0123     		mov	r3, #1
 344 0008 1343     		orr	r3, r2
 345 000a 0360     		str	r3, [r0]
 346 000c 03E0     		b	.L20
 347              	.L21:
 339:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 340:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 341:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 342:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Disable the selected DMAy Channelx */
 343:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 348              		.loc 1 343 0
 349 000e 0268     		ldr	r2, [r0]
 350 0010 014B     		ldr	r3, .L23
 351 0012 1340     		and	r3, r2
 352 0014 0360     		str	r3, [r0]
 353              	.L20:
 344:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 345:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 354              		.loc 1 345 0
 355              		@ sp needed
 356 0016 7047     		bx	lr
 357              	.L24:
 358              		.align	2
 359              	.L23:
 360 0018 FEFF0000 		.word	65534
 361              		.cfi_endproc
 362              	.LFE36:
 364              		.section	.text.DMA_RemapConfig,"ax",%progbits
 365              		.align	2
 366              		.global	DMA_RemapConfig
 367              		.code	16
 368              		.thumb_func
 370              	DMA_RemapConfig:
 371              	.LFB37:
 346:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 347:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 348:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Configure the DMAx channels remapping.
 349:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMAy: where x can be 1 or 2 to select the DMA peripheral.    
 350:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMAy_CHx_RemapRequest: where y can be 1 or 2 to select the DMA and x can be 1 to 7
 351:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA1 Channel and can be 1 to 5 for DMA2 to select the DMA2 Chann
 352:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   This function is available only for STM32F091 devices. 
 353:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None
 354:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 355:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_RemapConfig(DMA_TypeDef* DMAy, uint32_t DMAx_CHy_RemapRequest)
 356:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 372              		.loc 1 356 0
 373              		.cfi_startproc
 374              	.LVL10:
 375 0000 30B5     		push	{r4, r5, lr}
 376              	.LCFI1:
 377              		.cfi_def_cfa_offset 12
 378              		.cfi_offset 4, -12
 379              		.cfi_offset 5, -8
 380              		.cfi_offset 14, -4
 357:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_LIST(DMAy));
 358:.\StdPeriphLib\src/stm32f0xx_dma.c ****   
 359:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if (DMAy == DMA1)
 360:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 361:.\StdPeriphLib\src/stm32f0xx_dma.c ****     assert_param(IS_DMA1_REMAP(DMAx_CHy_RemapRequest));  
 362:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 363:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 364:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 365:.\StdPeriphLib\src/stm32f0xx_dma.c ****     assert_param(IS_DMA2_REMAP(DMAx_CHy_RemapRequest)); 
 366:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 367:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 368:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy->RMPCR &= ~((uint32_t)0x0F << (uint32_t)((DMAx_CHy_RemapRequest >> 28) * 4)); 
 381              		.loc 1 368 0
 382 0002 A823     		mov	r3, #168
 383 0004 C258     		ldr	r2, [r0, r3]
 384 0006 0C0F     		lsr	r4, r1, #28
 385 0008 A400     		lsl	r4, r4, #2
 386 000a 0F25     		mov	r5, #15
 387 000c A540     		lsl	r5, r5, r4
 388 000e AA43     		bic	r2, r5
 389 0010 C250     		str	r2, [r0, r3]
 369:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy->RMPCR |= (uint32_t)(DMAx_CHy_RemapRequest & 0x0FFFFFFF);  
 390              		.loc 1 369 0
 391 0012 C258     		ldr	r2, [r0, r3]
 392 0014 0901     		lsl	r1, r1, #4
 393              	.LVL11:
 394 0016 0909     		lsr	r1, r1, #4
 395 0018 1143     		orr	r1, r2
 396 001a C150     		str	r1, [r0, r3]
 370:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 397              		.loc 1 370 0
 398              		@ sp needed
 399 001c 30BD     		pop	{r4, r5, pc}
 400              		.cfi_endproc
 401              	.LFE37:
 403 001e C046     		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 404              		.align	2
 405              		.global	DMA_SetCurrDataCounter
 406              		.code	16
 407              		.thumb_func
 409              	DMA_SetCurrDataCounter:
 410              	.LFB38:
 371:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 372:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 373:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @}
 374:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 375:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 376:.\StdPeriphLib\src/stm32f0xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 377:.\StdPeriphLib\src/stm32f0xx_dma.c ****  *  @brief   Data Counter functions 
 378:.\StdPeriphLib\src/stm32f0xx_dma.c ****  *
 379:.\StdPeriphLib\src/stm32f0xx_dma.c **** @verbatim
 380:.\StdPeriphLib\src/stm32f0xx_dma.c ****  ===============================================================================
 381:.\StdPeriphLib\src/stm32f0xx_dma.c ****                       ##### Data Counter functions #####
 382:.\StdPeriphLib\src/stm32f0xx_dma.c ****  ===============================================================================
 383:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] This subsection provides function allowing to configure and read the buffer 
 384:.\StdPeriphLib\src/stm32f0xx_dma.c ****          size (number of data to be transferred).The DMA data counter can be written 
 385:.\StdPeriphLib\src/stm32f0xx_dma.c ****          only when the DMA channel is disabled (ie. after transfer complete event).
 386:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] The following function can be used to write the Channel data counter value:
 387:.\StdPeriphLib\src/stm32f0xx_dma.c ****          (+) void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t 
 388:.\StdPeriphLib\src/stm32f0xx_dma.c ****              DataNumber).
 389:.\StdPeriphLib\src/stm32f0xx_dma.c ****     -@- It is advised to use this function rather than DMA_Init() in situations 
 390:.\StdPeriphLib\src/stm32f0xx_dma.c ****         where only the Data buffer needs to be reloaded.
 391:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] The DMA data counter can be read to indicate the number of remaining transfers 
 392:.\StdPeriphLib\src/stm32f0xx_dma.c ****          for the relative DMA channel. This counter is decremented at the end of each 
 393:.\StdPeriphLib\src/stm32f0xx_dma.c ****          data transfer and when the transfer is complete: 
 394:.\StdPeriphLib\src/stm32f0xx_dma.c ****          (+) If Normal mode is selected: the counter is set to 0.
 395:.\StdPeriphLib\src/stm32f0xx_dma.c ****          (+) If Circular mode is selected: the counter is reloaded with the initial 
 396:.\StdPeriphLib\src/stm32f0xx_dma.c ****          value(configured before enabling the DMA channel).
 397:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] The following function can be used to read the Channel data counter value:
 398:.\StdPeriphLib\src/stm32f0xx_dma.c ****          (+) uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx).
 399:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 400:.\StdPeriphLib\src/stm32f0xx_dma.c **** @endverbatim
 401:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @{
 402:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 403:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 404:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 405:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Sets the number of data units in the current DMAy Channelx transfer.
 406:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 407:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 408:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 409:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices. 
 410:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DataNumber: The number of data units in the current DMAy Channelx
 411:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         transfer.
 412:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   This function can only be used when the DMAy_Channelx is disabled.
 413:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None.
 414:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 415:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
 416:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 411              		.loc 1 416 0
 412              		.cfi_startproc
 413              	.LVL12:
 417:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 418:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 419:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 420:.\StdPeriphLib\src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
 421:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CNDTR */
 422:.\StdPeriphLib\src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = DataNumber;
 414              		.loc 1 422 0
 415 0000 4160     		str	r1, [r0, #4]
 423:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 416              		.loc 1 423 0
 417              		@ sp needed
 418 0002 7047     		bx	lr
 419              		.cfi_endproc
 420              	.LFE38:
 422              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 423              		.align	2
 424              		.global	DMA_GetCurrDataCounter
 425              		.code	16
 426              		.thumb_func
 428              	DMA_GetCurrDataCounter:
 429              	.LFB39:
 424:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 425:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 426:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Returns the number of remaining data units in the current
 427:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         DMAy Channelx transfer.
 428:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 429:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 430:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 431:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices. 
 432:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Channelx
 433:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         transfer.
 434:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 435:.\StdPeriphLib\src/stm32f0xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
 436:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 430              		.loc 1 436 0
 431              		.cfi_startproc
 432              	.LVL13:
 437:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 438:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 439:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Return the number of remaining data units for DMAy Channelx */
 440:.\StdPeriphLib\src/stm32f0xx_dma.c ****   return ((uint16_t)(DMAy_Channelx->CNDTR));
 433              		.loc 1 440 0
 434 0000 4068     		ldr	r0, [r0, #4]
 435              	.LVL14:
 436 0002 80B2     		uxth	r0, r0
 441:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 437              		.loc 1 441 0
 438              		@ sp needed
 439 0004 7047     		bx	lr
 440              		.cfi_endproc
 441              	.LFE39:
 443 0006 C046     		.section	.text.DMA_ITConfig,"ax",%progbits
 444              		.align	2
 445              		.global	DMA_ITConfig
 446              		.code	16
 447              		.thumb_func
 449              	DMA_ITConfig:
 450              	.LFB40:
 442:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 443:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 444:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @}
 445:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 446:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 447:.\StdPeriphLib\src/stm32f0xx_dma.c **** /** @defgroup DMA_Group3 Interrupts and flags management functions
 448:.\StdPeriphLib\src/stm32f0xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 449:.\StdPeriphLib\src/stm32f0xx_dma.c ****  *
 450:.\StdPeriphLib\src/stm32f0xx_dma.c **** @verbatim
 451:.\StdPeriphLib\src/stm32f0xx_dma.c ****  ===============================================================================
 452:.\StdPeriphLib\src/stm32f0xx_dma.c ****           ##### Interrupts and flags management functions #####
 453:.\StdPeriphLib\src/stm32f0xx_dma.c ****  ===============================================================================
 454:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] This subsection provides functions allowing to configure the DMA Interrupts 
 455:.\StdPeriphLib\src/stm32f0xx_dma.c ****          sources and check or clear the flags or pending bits status.
 456:.\StdPeriphLib\src/stm32f0xx_dma.c ****          The user should identify which mode will be used in his application to manage 
 457:.\StdPeriphLib\src/stm32f0xx_dma.c ****          the DMA controller events: Polling mode or Interrupt mode. 
 458:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *** Polling Mode ***
 459:.\StdPeriphLib\src/stm32f0xx_dma.c ****   ====================
 460:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] Each DMA channel can be managed through 4 event Flags:(y : DMA Controller 
 461:.\StdPeriphLib\src/stm32f0xx_dma.c ****          number  x : DMA channel number ).
 462:.\StdPeriphLib\src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_TCx : to indicate that a Transfer Complete event occurred.
 463:.\StdPeriphLib\src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_HTx : to indicate that a Half-Transfer Complete event occurred.
 464:.\StdPeriphLib\src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_TEx : to indicate that a Transfer Error occurred.
 465:.\StdPeriphLib\src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_GLx : to indicate that at least one of the events described 
 466:.\StdPeriphLib\src/stm32f0xx_dma.c ****              above occurred.
 467:.\StdPeriphLib\src/stm32f0xx_dma.c ****     -@- Clearing DMAy_FLAG_GLx results in clearing all other pending flags of the 
 468:.\StdPeriphLib\src/stm32f0xx_dma.c ****         same channel (DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
 469:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..]In this Mode it is advised to use the following functions:
 470:.\StdPeriphLib\src/stm32f0xx_dma.c ****         (+) FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG);
 471:.\StdPeriphLib\src/stm32f0xx_dma.c ****         (+) void DMA_ClearFlag(uint32_t DMA_FLAG);
 472:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 473:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *** Interrupt Mode ***
 474:.\StdPeriphLib\src/stm32f0xx_dma.c ****   ======================
 475:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..] Each DMA channel can be managed through 4 Interrupts:
 476:.\StdPeriphLib\src/stm32f0xx_dma.c ****     (+) Interrupt Source
 477:.\StdPeriphLib\src/stm32f0xx_dma.c ****        (##) DMA_IT_TC: specifies the interrupt source for the Transfer Complete 
 478:.\StdPeriphLib\src/stm32f0xx_dma.c ****             event.
 479:.\StdPeriphLib\src/stm32f0xx_dma.c ****        (##) DMA_IT_HT : specifies the interrupt source for the Half-transfer Complete 
 480:.\StdPeriphLib\src/stm32f0xx_dma.c ****             event.
 481:.\StdPeriphLib\src/stm32f0xx_dma.c ****        (##) DMA_IT_TE : specifies the interrupt source for the transfer errors event.
 482:.\StdPeriphLib\src/stm32f0xx_dma.c ****        (##) DMA_IT_GL : to indicate that at least one of the interrupts described 
 483:.\StdPeriphLib\src/stm32f0xx_dma.c ****             above occurred.
 484:.\StdPeriphLib\src/stm32f0xx_dma.c ****     -@@- Clearing DMA_IT_GL interrupt results in clearing all other interrupts of 
 485:.\StdPeriphLib\src/stm32f0xx_dma.c ****         the same channel (DMA_IT_TCx, DMA_IT_HT and DMA_IT_TE).
 486:.\StdPeriphLib\src/stm32f0xx_dma.c ****     [..]In this Mode it is advised to use the following functions:
 487:.\StdPeriphLib\src/stm32f0xx_dma.c ****         (+) void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, 
 488:.\StdPeriphLib\src/stm32f0xx_dma.c ****             FunctionalState NewState);
 489:.\StdPeriphLib\src/stm32f0xx_dma.c ****         (+) ITStatus DMA_GetITStatus(uint32_t DMA_IT);
 490:.\StdPeriphLib\src/stm32f0xx_dma.c ****         (+) void DMA_ClearITPendingBit(uint32_t DMA_IT);
 491:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 492:.\StdPeriphLib\src/stm32f0xx_dma.c **** @endverbatim
 493:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @{
 494:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 495:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 496:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 497:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx interrupts.
 498:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 499:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 500:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 501:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices.  
 502:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupts sources to be enabled
 503:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         or disabled. 
 504:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *          This parameter can be any combination of the following values:
 505:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA_IT_TC: Transfer complete interrupt mask
 506:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA_IT_HT: Half transfer interrupt mask
 507:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA_IT_TE: Transfer error interrupt mask
 508:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
 509:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         This parameter can be: ENABLE or DISABLE.
 510:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None
 511:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 512:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
 513:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 451              		.loc 1 513 0
 452              		.cfi_startproc
 453              	.LVL15:
 514:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 515:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 516:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 517:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 518:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 519:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if (NewState != DISABLE)
 454              		.loc 1 519 0
 455 0000 002A     		cmp	r2, #0
 456 0002 03D0     		beq	.L29
 520:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 521:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Enable the selected DMA interrupts */
 522:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR |= DMA_IT;
 457              		.loc 1 522 0
 458 0004 0368     		ldr	r3, [r0]
 459 0006 1943     		orr	r1, r3
 460              	.LVL16:
 461 0008 0160     		str	r1, [r0]
 462 000a 02E0     		b	.L28
 463              	.LVL17:
 464              	.L29:
 523:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 524:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 525:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 526:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Disable the selected DMA interrupts */
 527:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR &= ~DMA_IT;
 465              		.loc 1 527 0
 466 000c 0368     		ldr	r3, [r0]
 467 000e 8B43     		bic	r3, r1
 468 0010 0360     		str	r3, [r0]
 469              	.LVL18:
 470              	.L28:
 528:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 529:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 471              		.loc 1 529 0
 472              		@ sp needed
 473 0012 7047     		bx	lr
 474              		.cfi_endproc
 475              	.LFE40:
 477              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 478              		.align	2
 479              		.global	DMA_GetFlagStatus
 480              		.code	16
 481              		.thumb_func
 483              	DMA_GetFlagStatus:
 484              	.LFB41:
 530:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 531:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 532:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Checks whether the specified DMAy Channelx flag is set or not.
 533:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 534:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *          This parameter can be one of the following values:
 535:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 536:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 537:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 538:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 539:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 540:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 541:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 542:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 543:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 544:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 545:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 546:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 547:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 548:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 549:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 550:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 551:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 552:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 553:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 554:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 555:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag, applicable only for STM32F072 and STM
 556:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag, applicable only for STM32F
 557:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag, applicable only for STM32F072 
 558:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag, applicable only for STM32F072
 559:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag, applicable only for STM32F072 and STM
 560:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag, applicable only for STM32F
 561:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag, applicable only for STM32F072 
 562:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag, applicable only for STM32F072
 563:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag, applicable only for STM32FO91 devices
 564:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag, applicable only for STM32F
 565:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag, applicable only for STM32FO91 
 566:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag, applicable only for STM32FO91
 567:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag, applicable only for STM32FO91 devices
 568:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag, applicable only for STM32F
 569:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag, applicable only for STM32FO91 
 570:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag, applicable only for STM32FO91
 571:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag, applicable only for STM32FO91 devices
 572:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag, applicable only for STM32F
 573:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag, applicable only for STM32FO91 
 574:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag, applicable only for STM32FO91
 575:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag, applicable only for STM32FO91 devices
 576:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag, applicable only for STM32F
 577:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag, applicable only for STM32FO91 
 578:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag, applicable only for STM32FO91
 579:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag, applicable only for STM32FO91 devices
 580:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag, applicable only for STM32F
 581:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag, applicable only for STM32FO91 
 582:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag, applicable only for STM32FO91
 583:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   The Global flag (DMAy_FLAG_GLx) is set whenever any of the other flags 
 584:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         relative to the same channel is set (Transfer Complete, Half-transfer 
 585:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         Complete or Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx or 
 586:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         DMAy_FLAG_TEx). 
 587:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *      
 588:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 589:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 590:.\StdPeriphLib\src/stm32f0xx_dma.c **** FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
 591:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 485              		.loc 1 591 0
 486              		.cfi_startproc
 487              	.LVL19:
 592:.\StdPeriphLib\src/stm32f0xx_dma.c ****   FlagStatus bitstatus = RESET;
 593:.\StdPeriphLib\src/stm32f0xx_dma.c ****   uint32_t tmpreg = 0;
 594:.\StdPeriphLib\src/stm32f0xx_dma.c ****   
 595:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 596:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
 597:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 598:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Calculate the used DMAy */
 599:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 488              		.loc 1 599 0
 489 0000 C300     		lsl	r3, r0, #3
 490 0002 02D5     		bpl	.L32
 600:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 601:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Get DMA2 ISR register value */
 602:.\StdPeriphLib\src/stm32f0xx_dma.c ****     tmpreg = DMA2->ISR ;
 491              		.loc 1 602 0
 492 0004 044B     		ldr	r3, .L34
 493 0006 1B68     		ldr	r3, [r3]
 494              	.LVL20:
 495 0008 01E0     		b	.L33
 496              	.LVL21:
 497              	.L32:
 603:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 604:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 605:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 606:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Get DMA1 ISR register value */
 607:.\StdPeriphLib\src/stm32f0xx_dma.c ****     tmpreg = DMA1->ISR ;
 498              		.loc 1 607 0
 499 000a 044B     		ldr	r3, .L34+4
 500 000c 1B68     		ldr	r3, [r3]
 501              	.LVL22:
 502              	.L33:
 608:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 609:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 610:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the status of the specified DMAy flag */
 611:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 503              		.loc 1 611 0
 504 000e 1840     		and	r0, r3
 505              	.LVL23:
 506 0010 431E     		sub	r3, r0, #1
 507 0012 9841     		sbc	r0, r0, r3
 508              	.LVL24:
 612:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 613:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* DMAy_FLAG is set */
 614:.\StdPeriphLib\src/stm32f0xx_dma.c ****     bitstatus = SET;
 615:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 616:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 617:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 618:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* DMAy_FLAG is reset */
 619:.\StdPeriphLib\src/stm32f0xx_dma.c ****     bitstatus = RESET;
 620:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 621:.\StdPeriphLib\src/stm32f0xx_dma.c ****   
 622:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Return the DMAy_FLAG status */
 623:.\StdPeriphLib\src/stm32f0xx_dma.c ****   return  bitstatus;
 509              		.loc 1 623 0
 510 0014 C0B2     		uxtb	r0, r0
 624:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 511              		.loc 1 624 0
 512              		@ sp needed
 513 0016 7047     		bx	lr
 514              	.L35:
 515              		.align	2
 516              	.L34:
 517 0018 00040240 		.word	1073873920
 518 001c 00000240 		.word	1073872896
 519              		.cfi_endproc
 520              	.LFE41:
 522              		.section	.text.DMA_ClearFlag,"ax",%progbits
 523              		.align	2
 524              		.global	DMA_ClearFlag
 525              		.code	16
 526              		.thumb_func
 528              	DMA_ClearFlag:
 529              	.LFB42:
 625:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 626:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 627:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Clears the DMAy Channelx's pending flags.
 628:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
 629:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *          This parameter can be any combination (for the same DMA) of the following values:
 630:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 631:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 632:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 633:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 634:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 635:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 636:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 637:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 638:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 639:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 640:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 641:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 642:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 643:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 644:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 645:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 646:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 647:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 648:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 649:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 650:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag, applicable only for STM32F072 and STM
 651:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag, applicable only for STM32F
 652:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag, applicable only for STM32F072 
 653:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag, applicable only for STM32F072
 654:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag, applicable only for STM32F072 and STM
 655:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag, applicable only for STM32F
 656:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag, applicable only for STM32F072 
 657:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag, applicable only for STM32F072
 658:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag, applicable only for STM32FO91 devices
 659:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag, applicable only for STM32F
 660:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag, applicable only for STM32FO91 
 661:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag, applicable only for STM32FO91
 662:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag, applicable only for STM32FO91 devices
 663:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag, applicable only for STM32F
 664:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag, applicable only for STM32FO91 
 665:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag, applicable only for STM32FO91
 666:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag, applicable only for STM32FO91 devices
 667:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag, applicable only for STM32F
 668:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag, applicable only for STM32FO91 
 669:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag, applicable only for STM32FO91
 670:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag, applicable only for STM32FO91 devices
 671:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag, applicable only for STM32F
 672:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag, applicable only for STM32FO91 
 673:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag, applicable only for STM32FO91
 674:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag, applicable only for STM32FO91 devices
 675:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag, applicable only for STM32F
 676:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag, applicable only for STM32FO91 
 677:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag, applicable only for STM32FO91
 678:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *              
 679:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   Clearing the Global flag (DMAy_FLAG_GLx) results in clearing all other flags
 680:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         relative to the same channel (Transfer Complete, Half-transfer Complete and
 681:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
 682:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *
 683:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None
 684:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 685:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_ClearFlag(uint32_t DMAy_FLAG)
 686:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 530              		.loc 1 686 0
 531              		.cfi_startproc
 532              	.LVL25:
 687:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 688:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
 689:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 690:.\StdPeriphLib\src/stm32f0xx_dma.c **** /* Calculate the used DMAy */
 691:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 533              		.loc 1 691 0
 534 0000 C300     		lsl	r3, r0, #3
 535 0002 02D5     		bpl	.L37
 692:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 693:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Clear the selected DMAy flags */
 694:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA2->IFCR = DMAy_FLAG;
 536              		.loc 1 694 0
 537 0004 024B     		ldr	r3, .L39
 538 0006 5860     		str	r0, [r3, #4]
 539 0008 01E0     		b	.L36
 540              	.L37:
 695:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 696:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 697:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 698:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Clear the selected DMAy flags */
 699:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR = DMAy_FLAG;
 541              		.loc 1 699 0
 542 000a 024B     		ldr	r3, .L39+4
 543 000c 5860     		str	r0, [r3, #4]
 544              	.L36:
 700:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 701:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 545              		.loc 1 701 0
 546              		@ sp needed
 547 000e 7047     		bx	lr
 548              	.L40:
 549              		.align	2
 550              	.L39:
 551 0010 00040240 		.word	1073873920
 552 0014 00000240 		.word	1073872896
 553              		.cfi_endproc
 554              	.LFE42:
 556              		.section	.text.DMA_GetITStatus,"ax",%progbits
 557              		.align	2
 558              		.global	DMA_GetITStatus
 559              		.code	16
 560              		.thumb_func
 562              	DMA_GetITStatus:
 563              	.LFB43:
 702:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 703:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 704:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Checks whether the specified DMAy Channelx interrupt has occurred or not.
 705:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check. 
 706:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *          This parameter can be one of the following values:
 707:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 708:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 709:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 710:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 711:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 712:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 713:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 714:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 715:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 716:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 717:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 718:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 719:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 720:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 721:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 722:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 723:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 724:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 725:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 726:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 727:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt, applicable only for STM32F072 and 
 728:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt, applicable only for STM
 729:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt, applicable only for STM32F0
 730:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt, applicable only for STM32F
 731:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt, applicable only for STM32F072 and 
 732:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt, applicable only for STM
 733:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt, applicable only for STM32F0
 734:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt, applicable only for STM32F
 735:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt, applicable only for STM32FO91 devi
 736:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt, applicable only for STM
 737:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt, applicable only for STM32FO
 738:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt, applicable only for STM32F
 739:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt, applicable only for STM32FO91 devi
 740:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt, applicable only for STM
 741:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt, applicable only for STM32FO
 742:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt, applicable only for STM32F
 743:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt, applicable only for STM32FO91 devi
 744:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt, applicable only for STM
 745:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt, applicable only for STM32FO
 746:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt, applicable only for STM32F
 747:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt, applicable only for STM32FO91 devi
 748:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt, applicable only for STM
 749:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt, applicable only for STM32FO
 750:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt, applicable only for STM32F
 751:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt, applicable only for STM32FO91 devi
 752:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt, applicable only for STM
 753:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt, applicable only for STM32FO
 754:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt, applicable only for STM32F
 755:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   The Global interrupt (DMAy_FLAG_GLx) is set whenever any of the other 
 756:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         interrupts relative to the same channel is set (Transfer Complete, 
 757:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         Half-transfer Complete or Transfer Error interrupts: DMAy_IT_TCx, 
 758:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         DMAy_IT_HTx or DMAy_IT_TEx). 
 759:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *      
 760:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
 761:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 762:.\StdPeriphLib\src/stm32f0xx_dma.c **** ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
 763:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 564              		.loc 1 763 0
 565              		.cfi_startproc
 566              	.LVL26:
 764:.\StdPeriphLib\src/stm32f0xx_dma.c ****   ITStatus bitstatus = RESET;
 765:.\StdPeriphLib\src/stm32f0xx_dma.c ****   uint32_t tmpreg = 0;
 766:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 767:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 768:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMAy_IT));
 769:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 770:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Calculate the used DMA */
 771:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 567              		.loc 1 771 0
 568 0000 C300     		lsl	r3, r0, #3
 569 0002 02D5     		bpl	.L42
 772:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 773:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Get DMA2 ISR register value */
 774:.\StdPeriphLib\src/stm32f0xx_dma.c ****     tmpreg = DMA2->ISR;
 570              		.loc 1 774 0
 571 0004 044B     		ldr	r3, .L44
 572 0006 1B68     		ldr	r3, [r3]
 573              	.LVL27:
 574 0008 01E0     		b	.L43
 575              	.LVL28:
 576              	.L42:
 775:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 776:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 777:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 778:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Get DMA1 ISR register value */
 779:.\StdPeriphLib\src/stm32f0xx_dma.c ****     tmpreg = DMA1->ISR;
 577              		.loc 1 779 0
 578 000a 044B     		ldr	r3, .L44+4
 579 000c 1B68     		ldr	r3, [r3]
 580              	.LVL29:
 581              	.L43:
 780:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 781:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 782:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the status of the specified DMAy interrupt */
 783:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 582              		.loc 1 783 0
 583 000e 1840     		and	r0, r3
 584              	.LVL30:
 585 0010 431E     		sub	r3, r0, #1
 586 0012 9841     		sbc	r0, r0, r3
 587              	.LVL31:
 784:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 785:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* DMAy_IT is set */
 786:.\StdPeriphLib\src/stm32f0xx_dma.c ****     bitstatus = SET;
 787:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 788:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 789:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 790:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* DMAy_IT is reset */
 791:.\StdPeriphLib\src/stm32f0xx_dma.c ****     bitstatus = RESET;
 792:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 793:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Return the DMAy_IT status */
 794:.\StdPeriphLib\src/stm32f0xx_dma.c ****   return  bitstatus;
 588              		.loc 1 794 0
 589 0014 C0B2     		uxtb	r0, r0
 795:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 590              		.loc 1 795 0
 591              		@ sp needed
 592 0016 7047     		bx	lr
 593              	.L45:
 594              		.align	2
 595              	.L44:
 596 0018 00040240 		.word	1073873920
 597 001c 00000240 		.word	1073872896
 598              		.cfi_endproc
 599              	.LFE43:
 601              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 602              		.align	2
 603              		.global	DMA_ClearITPendingBit
 604              		.code	16
 605              		.thumb_func
 607              	DMA_ClearITPendingBit:
 608              	.LFB44:
 796:.\StdPeriphLib\src/stm32f0xx_dma.c **** 
 797:.\StdPeriphLib\src/stm32f0xx_dma.c **** /**
 798:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @brief  Clears the DMAy Channelx's interrupt pending bits.
 799:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
 800:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *          This parameter can be any combination (for the same DMA) of the following values:
 801:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 802:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 803:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 804:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 805:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 806:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 807:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 808:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 809:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 810:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 811:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 812:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 813:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 814:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 815:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 816:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 817:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 818:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 819:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 820:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 821:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt, applicable only for STM32F072 and 
 822:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt, applicable only for STM
 823:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt, applicable only for STM32F0
 824:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt, applicable only for STM32F
 825:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt, applicable only for STM32F072 and 
 826:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt, applicable only for STM
 827:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt, applicable only for STM32F0
 828:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt, applicable only for STM32F
 829:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt, applicable only for STM32FO91 devi
 830:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt, applicable only for STM
 831:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt, applicable only for STM32FO
 832:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt, applicable only for STM32F
 833:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt, applicable only for STM32FO91 devi
 834:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt, applicable only for STM
 835:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt, applicable only for STM32FO
 836:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt, applicable only for STM32F
 837:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt, applicable only for STM32FO91 devi
 838:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt, applicable only for STM
 839:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt, applicable only for STM32FO
 840:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt, applicable only for STM32F
 841:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt, applicable only for STM32FO91 devi
 842:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt, applicable only for STM
 843:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt, applicable only for STM32FO
 844:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt, applicable only for STM32F
 845:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt, applicable only for STM32FO91 devi
 846:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt, applicable only for STM
 847:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt, applicable only for STM32FO
 848:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt, applicable only for STM32F
 849:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *     
 850:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @note   Clearing the Global interrupt (DMAy_IT_GLx) results in clearing all other 
 851:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         interrupts relative to the same channel (Transfer Complete, Half-transfer 
 852:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         Complete and Transfer Error interrupts: DMAy_IT_TCx, DMAy_IT_HTx and 
 853:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *         DMAy_IT_TEx).  
 854:.\StdPeriphLib\src/stm32f0xx_dma.c ****   *        
 855:.\StdPeriphLib\src/stm32f0xx_dma.c ****   * @retval None
 856:.\StdPeriphLib\src/stm32f0xx_dma.c ****   */
 857:.\StdPeriphLib\src/stm32f0xx_dma.c **** void DMA_ClearITPendingBit(uint32_t DMAy_IT)
 858:.\StdPeriphLib\src/stm32f0xx_dma.c **** {
 609              		.loc 1 858 0
 610              		.cfi_startproc
 611              	.LVL32:
 859:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Check the parameters */
 860:.\StdPeriphLib\src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
 861:.\StdPeriphLib\src/stm32f0xx_dma.c ****   
 862:.\StdPeriphLib\src/stm32f0xx_dma.c ****   /* Calculate the used DMAy */
 863:.\StdPeriphLib\src/stm32f0xx_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 612              		.loc 1 863 0
 613 0000 C300     		lsl	r3, r0, #3
 614 0002 02D5     		bpl	.L47
 864:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 865:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 866:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA2->IFCR = DMAy_IT;
 615              		.loc 1 866 0
 616 0004 024B     		ldr	r3, .L49
 617 0006 5860     		str	r0, [r3, #4]
 618 0008 01E0     		b	.L46
 619              	.L47:
 867:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 868:.\StdPeriphLib\src/stm32f0xx_dma.c ****   else
 869:.\StdPeriphLib\src/stm32f0xx_dma.c ****   {
 870:.\StdPeriphLib\src/stm32f0xx_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 871:.\StdPeriphLib\src/stm32f0xx_dma.c ****     DMA1->IFCR = DMAy_IT;
 620              		.loc 1 871 0
 621 000a 024B     		ldr	r3, .L49+4
 622 000c 5860     		str	r0, [r3, #4]
 623              	.L46:
 872:.\StdPeriphLib\src/stm32f0xx_dma.c ****   }
 873:.\StdPeriphLib\src/stm32f0xx_dma.c **** }
 624              		.loc 1 873 0
 625              		@ sp needed
 626 000e 7047     		bx	lr
 627              	.L50:
 628              		.align	2
 629              	.L49:
 630 0010 00040240 		.word	1073873920
 631 0014 00000240 		.word	1073872896
 632              		.cfi_endproc
 633              	.LFE44:
 635              		.text
 636              	.Letext0:
 637              		.file 2 "c:\\myprograms\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\
 638              		.file 3 "c:\\myprograms\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\
 639              		.file 4 ".\\CMSIS/stm32f0xx.h"
 640              		.file 5 ".\\StdPeriphLib\\inc/stm32f0xx_dma.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_dma.c
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:18     .text.DMA_DeInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:23     .text.DMA_DeInit:00000000 DMA_DeInit
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:200    .text.DMA_DeInit:000000fc $d
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:219    .text.DMA_Init:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:224    .text.DMA_Init:00000000 DMA_Init
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:283    .text.DMA_Init:00000038 $d
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:288    .text.DMA_StructInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:293    .text.DMA_StructInit:00000000 DMA_StructInit
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:328    .text.DMA_Cmd:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:333    .text.DMA_Cmd:00000000 DMA_Cmd
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:360    .text.DMA_Cmd:00000018 $d
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:365    .text.DMA_RemapConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:370    .text.DMA_RemapConfig:00000000 DMA_RemapConfig
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:404    .text.DMA_SetCurrDataCounter:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:409    .text.DMA_SetCurrDataCounter:00000000 DMA_SetCurrDataCounter
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:423    .text.DMA_GetCurrDataCounter:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:428    .text.DMA_GetCurrDataCounter:00000000 DMA_GetCurrDataCounter
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:444    .text.DMA_ITConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:449    .text.DMA_ITConfig:00000000 DMA_ITConfig
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:478    .text.DMA_GetFlagStatus:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:483    .text.DMA_GetFlagStatus:00000000 DMA_GetFlagStatus
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:517    .text.DMA_GetFlagStatus:00000018 $d
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:523    .text.DMA_ClearFlag:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:528    .text.DMA_ClearFlag:00000000 DMA_ClearFlag
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:551    .text.DMA_ClearFlag:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:557    .text.DMA_GetITStatus:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:562    .text.DMA_GetITStatus:00000000 DMA_GetITStatus
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:596    .text.DMA_GetITStatus:00000018 $d
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:602    .text.DMA_ClearITPendingBit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:607    .text.DMA_ClearITPendingBit:00000000 DMA_ClearITPendingBit
C:\Users\Dima\AppData\Local\Temp\ccEqeX2r.s:630    .text.DMA_ClearITPendingBit:00000010 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
