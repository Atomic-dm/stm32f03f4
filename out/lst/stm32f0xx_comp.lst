   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_comp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.COMP_DeInit,"ax",%progbits
  18              		.align	2
  19              		.global	COMP_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	COMP_DeInit:
  24              	.LFB33:
  25              		.file 1 ".\\StdPeriphLib\\src/stm32f0xx_comp.c"
   1:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
   2:.\StdPeriphLib\src/stm32f0xx_comp.c ****   ******************************************************************************
   3:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @file    stm32f0xx_comp.c
   4:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @author  MCD Application Team
   5:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @version V1.5.0
   6:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @date    05-December-2014
   7:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief   This file provides firmware functions to manage the following 
   8:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          functionalities of the comparators (COMP1 and COMP2) peripheral
   9:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          applicable only on STM32F051 and STM32F072 devices: 
  10:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *           + Comparators configuration
  11:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *           + Window mode control
  12:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *
  13:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *  @verbatim
  14:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *
  15:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================
  16:.\StdPeriphLib\src/stm32f0xx_comp.c ****                      ##### How to use this driver #####
  17:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================
  18:.\StdPeriphLib\src/stm32f0xx_comp.c ****     [..]           
  19:.\StdPeriphLib\src/stm32f0xx_comp.c ****    
  20:.\StdPeriphLib\src/stm32f0xx_comp.c ****          The device integrates two analog comparators COMP1 and COMP2:
  21:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (+) The non inverting input is set to PA1 for COMP1 and to PA3
  22:.\StdPeriphLib\src/stm32f0xx_comp.c ****              for COMP2.
  23:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  24:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (+) The inverting input can be selected among: DAC1_OUT, DAC2_OUT 
  25:.\StdPeriphLib\src/stm32f0xx_comp.c ****              1/4 VREFINT, 1/2 VERFINT, 3/4 VREFINT, VREFINT,
  26:.\StdPeriphLib\src/stm32f0xx_comp.c ****              I/O (PA0 for COMP1 and PA2 for COMP2)
  27:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  28:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (+) The COMP output is internally is available using COMP_GetOutputLevel()
  29:.\StdPeriphLib\src/stm32f0xx_comp.c ****              and can be set on GPIO pins: PA0, PA6, PA11 for COMP1
  30:.\StdPeriphLib\src/stm32f0xx_comp.c ****              and PA2, PA7, PA12 for COMP2
  31:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  32:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (+) The COMP output can be redirected to embedded timers (TIM1, TIM2
  33:.\StdPeriphLib\src/stm32f0xx_comp.c ****              and TIM3)
  34:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  35:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (+) The two comparators COMP1 and COMP2 can be combined in window
  36:.\StdPeriphLib\src/stm32f0xx_comp.c ****              mode and only COMP1 non inverting (PA1) can be used as non-
  37:.\StdPeriphLib\src/stm32f0xx_comp.c ****              inverting input.
  38:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  39:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (+) The two comparators COMP1 and COMP2 have interrupt capability 
  40:.\StdPeriphLib\src/stm32f0xx_comp.c ****              with wake-up from Sleep and Stop modes (through the EXTI controller).
  41:.\StdPeriphLib\src/stm32f0xx_comp.c ****              COMP1 and COMP2 outputs are internally connected to EXTI Line 21
  42:.\StdPeriphLib\src/stm32f0xx_comp.c ****              and EXTI Line 22 respectively.
  43:.\StdPeriphLib\src/stm32f0xx_comp.c ****                    
  44:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
  45:.\StdPeriphLib\src/stm32f0xx_comp.c ****                      ##### How to configure the comparator #####
  46:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================
  47:.\StdPeriphLib\src/stm32f0xx_comp.c ****     [..] 
  48:.\StdPeriphLib\src/stm32f0xx_comp.c ****            This driver provides functions to configure and program the Comparators 
  49:.\StdPeriphLib\src/stm32f0xx_comp.c ****            of all STM32F0xx devices.
  50:.\StdPeriphLib\src/stm32f0xx_comp.c ****              
  51:.\StdPeriphLib\src/stm32f0xx_comp.c ****     [..]   To use the comparator, perform the following steps:
  52:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  53:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (#) Enable the SYSCFG APB clock to get write access to comparator
  54:.\StdPeriphLib\src/stm32f0xx_comp.c ****              register using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
  55:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  56:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (#) Configure the comparator input in analog mode using GPIO_Init()
  57:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  58:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (#) Configure the comparator output in alternate function mode
  59:.\StdPeriphLib\src/stm32f0xx_comp.c ****              using GPIO_Init() and use GPIO_PinAFConfig() function to map the
  60:.\StdPeriphLib\src/stm32f0xx_comp.c ****              comparator output to the GPIO pin
  61:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  62:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (#) Configure the comparator using COMP_Init() function:
  63:.\StdPeriphLib\src/stm32f0xx_comp.c ****                  (++)  Select the inverting input
  64:.\StdPeriphLib\src/stm32f0xx_comp.c ****                  (++)  Select the output polarity  
  65:.\StdPeriphLib\src/stm32f0xx_comp.c ****                  (++)  Select the output redirection
  66:.\StdPeriphLib\src/stm32f0xx_comp.c ****                  (++)  Select the hysteresis level
  67:.\StdPeriphLib\src/stm32f0xx_comp.c ****                  (++)  Select the power mode
  68:.\StdPeriphLib\src/stm32f0xx_comp.c ****     
  69:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (#) Enable the comparator using COMP_Cmd() function
  70:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  71:.\StdPeriphLib\src/stm32f0xx_comp.c ****          (#) If required enable the COMP interrupt by configuring and enabling
  72:.\StdPeriphLib\src/stm32f0xx_comp.c ****              EXTI line in Interrupt mode and selecting the desired sensitivity
  73:.\StdPeriphLib\src/stm32f0xx_comp.c ****              level using EXTI_Init() function. After that enable the comparator
  74:.\StdPeriphLib\src/stm32f0xx_comp.c ****              interrupt vector using NVIC_Init() function.
  75:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
  76:.\StdPeriphLib\src/stm32f0xx_comp.c ****      @endverbatim
  77:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *    
  78:.\StdPeriphLib\src/stm32f0xx_comp.c ****   ******************************************************************************
  79:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @attention
  80:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *
  81:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  82:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *
  83:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  84:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * You may not use this file except in compliance with the License.
  85:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * You may obtain a copy of the License at:
  86:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *
  87:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  88:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *
  89:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * Unless required by applicable law or agreed to in writing, software 
  90:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  91:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  92:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * See the License for the specific language governing permissions and
  93:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * limitations under the License.
  94:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *
  95:.\StdPeriphLib\src/stm32f0xx_comp.c ****   ******************************************************************************
  96:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
  97:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
  98:.\StdPeriphLib\src/stm32f0xx_comp.c **** /* Includes ------------------------------------------------------------------*/
  99:.\StdPeriphLib\src/stm32f0xx_comp.c **** #include "stm32f0xx_comp.h"
 100:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 101:.\StdPeriphLib\src/stm32f0xx_comp.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
 102:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @{
 103:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 104:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 105:.\StdPeriphLib\src/stm32f0xx_comp.c **** /** @defgroup COMP 
 106:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief COMP driver modules
 107:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @{
 108:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */ 
 109:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 110:.\StdPeriphLib\src/stm32f0xx_comp.c **** /* Private typedef -----------------------------------------------------------*/
 111:.\StdPeriphLib\src/stm32f0xx_comp.c **** /* Private define ------------------------------------------------------------*/
 112:.\StdPeriphLib\src/stm32f0xx_comp.c **** /* CSR register Mask */
 113:.\StdPeriphLib\src/stm32f0xx_comp.c **** #define COMP_CSR_CLEAR_MASK              ((uint32_t)0x00003FFE)
 114:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 115:.\StdPeriphLib\src/stm32f0xx_comp.c **** /* Private macro -------------------------------------------------------------*/
 116:.\StdPeriphLib\src/stm32f0xx_comp.c **** /* Private variables ---------------------------------------------------------*/
 117:.\StdPeriphLib\src/stm32f0xx_comp.c **** /* Private function prototypes -----------------------------------------------*/
 118:.\StdPeriphLib\src/stm32f0xx_comp.c **** /* Private functions ---------------------------------------------------------*/
 119:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 120:.\StdPeriphLib\src/stm32f0xx_comp.c **** /** @defgroup COMP_Private_Functions
 121:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @{
 122:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 123:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 124:.\StdPeriphLib\src/stm32f0xx_comp.c **** /** @defgroup COMP_Group1 Initialization and Configuration functions
 125:.\StdPeriphLib\src/stm32f0xx_comp.c ****  *  @brief   Initialization and Configuration functions 
 126:.\StdPeriphLib\src/stm32f0xx_comp.c ****  *
 127:.\StdPeriphLib\src/stm32f0xx_comp.c **** @verbatim   
 128:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================
 129:.\StdPeriphLib\src/stm32f0xx_comp.c ****                ##### Initialization and Configuration functions #####
 130:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================  
 131:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 132:.\StdPeriphLib\src/stm32f0xx_comp.c **** @endverbatim
 133:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @{
 134:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 135:.\StdPeriphLib\src/stm32f0xx_comp.c ****    
 136:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 137:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief  Deinitializes COMP peripheral registers to their default reset values.
 138:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   Deinitialization can't be performed if the COMP configuration is locked.
 139:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         To unlock the configuration, perform a system reset.
 140:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  None
 141:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @retval None
 142:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 143:.\StdPeriphLib\src/stm32f0xx_comp.c **** void COMP_DeInit(void)
 144:.\StdPeriphLib\src/stm32f0xx_comp.c **** {
  26              		.loc 1 144 0
  27              		.cfi_startproc
 145:.\StdPeriphLib\src/stm32f0xx_comp.c ****   COMP->CSR = ((uint32_t)0x00000000);    /*!< Set COMP_CSR register to reset value */
  28              		.loc 1 145 0
  29 0000 0022     		mov	r2, #0
  30 0002 014B     		ldr	r3, .L2
  31 0004 1A60     		str	r2, [r3]
 146:.\StdPeriphLib\src/stm32f0xx_comp.c **** }
  32              		.loc 1 146 0
  33              		@ sp needed
  34 0006 7047     		bx	lr
  35              	.L3:
  36              		.align	2
  37              	.L2:
  38 0008 1C000140 		.word	1073807388
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.section	.text.COMP_Init,"ax",%progbits
  43              		.align	2
  44              		.global	COMP_Init
  45              		.code	16
  46              		.thumb_func
  48              	COMP_Init:
  49              	.LFB34:
 147:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 148:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 149:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief  Initializes the COMP peripheral according to the specified parameters
 150:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         in COMP_InitStruct
 151:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   If the selected comparator is locked, initialization can't be performed.
 152:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         To unlock the configuration, perform a system reset.
 153:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   By default, PA1 is selected as COMP1 non inverting input.
 154:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         To use PA4 as COMP1 non inverting input call COMP_SwitchCmd() after COMP_Init()
 155:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  COMP_Selection: the selected comparator. 
 156:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          This parameter can be one of the following values:
 157:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            @arg COMP_Selection_COMP1: COMP1 selected
 158:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            @arg COMP_Selection_COMP2: COMP2 selected
 159:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  COMP_InitStruct: pointer to an COMP_InitTypeDef structure that contains 
 160:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         the configuration information for the specified COMP peripheral.
 161:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @retval None
 162:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 163:.\StdPeriphLib\src/stm32f0xx_comp.c **** void COMP_Init(uint32_t COMP_Selection, COMP_InitTypeDef* COMP_InitStruct)
 164:.\StdPeriphLib\src/stm32f0xx_comp.c **** {
  50              		.loc 1 164 0
  51              		.cfi_startproc
  52              	.LVL0:
  53 0000 30B5     		push	{r4, r5, lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 12
  56              		.cfi_offset 4, -12
  57              		.cfi_offset 5, -8
  58              		.cfi_offset 14, -4
  59              	.LVL1:
 165:.\StdPeriphLib\src/stm32f0xx_comp.c ****   uint32_t tmpreg = 0;
 166:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 167:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Check the parameters */
 168:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
 169:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_INVERTING_INPUT(COMP_InitStruct->COMP_InvertingInput));
 170:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_OUTPUT(COMP_InitStruct->COMP_Output));
 171:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_OUTPUT_POL(COMP_InitStruct->COMP_OutputPol));
 172:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_HYSTERESIS(COMP_InitStruct->COMP_Hysteresis));
 173:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_MODE(COMP_InitStruct->COMP_Mode));
 174:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 175:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Get the COMP_CSR register value */
 176:.\StdPeriphLib\src/stm32f0xx_comp.c ****   tmpreg = COMP->CSR;
  60              		.loc 1 176 0
  61 0002 094D     		ldr	r5, .L5
  62 0004 2C68     		ldr	r4, [r5]
  63              	.LVL2:
 177:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 178:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Clear the COMP1SW1, COMPx_IN_SEL, COMPx_OUT_TIM_SEL, COMPx_POL, COMPx_HYST and COMPx_PWR_MOD
 179:.\StdPeriphLib\src/stm32f0xx_comp.c ****   tmpreg &= (uint32_t) ~(COMP_CSR_CLEAR_MASK<<COMP_Selection);
  64              		.loc 1 179 0
  65 0006 094B     		ldr	r3, .L5+4
  66 0008 8340     		lsl	r3, r3, r0
  67 000a 9C43     		bic	r4, r3
  68              	.LVL3:
 180:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 181:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Configure COMP: inverting input, output redirection, hysteresis value and power mode */
 182:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Set COMPxINSEL bits according to COMP_InitStruct->COMP_InvertingInput value */
 183:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
 184:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
 185:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
 186:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */   
 187:.\StdPeriphLib\src/stm32f0xx_comp.c ****   tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
  69              		.loc 1 187 0
  70 000c 4B68     		ldr	r3, [r1, #4]
  71 000e 0A68     		ldr	r2, [r1]
  72 0010 1343     		orr	r3, r2
  73 0012 8A68     		ldr	r2, [r1, #8]
  74 0014 1343     		orr	r3, r2
 188:.\StdPeriphLib\src/stm32f0xx_comp.c ****                        COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_Hysteresis |
  75              		.loc 1 188 0
  76 0016 CA68     		ldr	r2, [r1, #12]
  77 0018 1343     		orr	r3, r2
  78 001a 0A69     		ldr	r2, [r1, #16]
  79 001c 1343     		orr	r3, r2
 187:.\StdPeriphLib\src/stm32f0xx_comp.c ****                        COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_Hysteresis |
  80              		.loc 1 187 0
  81 001e 8340     		lsl	r3, r3, r0
  82 0020 181C     		mov	r0, r3
  83              	.LVL4:
  84 0022 2043     		orr	r0, r4
  85              	.LVL5:
 189:.\StdPeriphLib\src/stm32f0xx_comp.c ****                        COMP_InitStruct->COMP_Mode)<<COMP_Selection);
 190:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 191:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /*!< Write to COMP_CSR register */
 192:.\StdPeriphLib\src/stm32f0xx_comp.c ****   COMP->CSR = tmpreg;  
  86              		.loc 1 192 0
  87 0024 2860     		str	r0, [r5]
 193:.\StdPeriphLib\src/stm32f0xx_comp.c **** }
  88              		.loc 1 193 0
  89              		@ sp needed
  90 0026 30BD     		pop	{r4, r5, pc}
  91              	.L6:
  92              		.align	2
  93              	.L5:
  94 0028 1C000140 		.word	1073807388
  95 002c FE3F0000 		.word	16382
  96              		.cfi_endproc
  97              	.LFE34:
  99              		.section	.text.COMP_StructInit,"ax",%progbits
 100              		.align	2
 101              		.global	COMP_StructInit
 102              		.code	16
 103              		.thumb_func
 105              	COMP_StructInit:
 106              	.LFB35:
 194:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 195:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 196:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief  Fills each COMP_InitStruct member with its default value.
 197:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  COMP_InitStruct: pointer to an COMP_InitTypeDef structure which will 
 198:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         be initialized.
 199:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @retval None
 200:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 201:.\StdPeriphLib\src/stm32f0xx_comp.c **** void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
 202:.\StdPeriphLib\src/stm32f0xx_comp.c **** {
 107              		.loc 1 202 0
 108              		.cfi_startproc
 109              	.LVL6:
 203:.\StdPeriphLib\src/stm32f0xx_comp.c ****   COMP_InitStruct->COMP_InvertingInput = COMP_InvertingInput_1_4VREFINT;
 110              		.loc 1 203 0
 111 0000 0023     		mov	r3, #0
 112 0002 0360     		str	r3, [r0]
 204:.\StdPeriphLib\src/stm32f0xx_comp.c ****   COMP_InitStruct->COMP_Output = COMP_Output_None;
 113              		.loc 1 204 0
 114 0004 4360     		str	r3, [r0, #4]
 205:.\StdPeriphLib\src/stm32f0xx_comp.c ****   COMP_InitStruct->COMP_OutputPol = COMP_OutputPol_NonInverted;
 115              		.loc 1 205 0
 116 0006 8360     		str	r3, [r0, #8]
 206:.\StdPeriphLib\src/stm32f0xx_comp.c ****   COMP_InitStruct->COMP_Hysteresis = COMP_Hysteresis_No;
 117              		.loc 1 206 0
 118 0008 C360     		str	r3, [r0, #12]
 207:.\StdPeriphLib\src/stm32f0xx_comp.c ****   COMP_InitStruct->COMP_Mode = COMP_Mode_UltraLowPower;
 119              		.loc 1 207 0
 120 000a 0C33     		add	r3, r3, #12
 121 000c 0361     		str	r3, [r0, #16]
 208:.\StdPeriphLib\src/stm32f0xx_comp.c **** }
 122              		.loc 1 208 0
 123              		@ sp needed
 124 000e 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE35:
 128              		.section	.text.COMP_Cmd,"ax",%progbits
 129              		.align	2
 130              		.global	COMP_Cmd
 131              		.code	16
 132              		.thumb_func
 134              	COMP_Cmd:
 135              	.LFB36:
 209:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 210:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 211:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief  Enable or disable the COMP peripheral.
 212:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   If the selected comparator is locked, enable/disable can't be performed.
 213:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         To unlock the configuration, perform a system reset.
 214:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  COMP_Selection: the selected comparator.
 215:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          This parameter can be one of the following values:
 216:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            @arg COMP_Selection_COMP1: COMP1 selected
 217:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            @arg COMP_Selection_COMP2: COMP2 selected
 218:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  NewState: new state of the COMP peripheral.
 219:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          This parameter can be: ENABLE or DISABLE.
 220:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   When enabled, the comparator compares the non inverting input with 
 221:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         the inverting input and the comparison result is available on comparator output.
 222:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   When disabled, the comparator doesn't perform comparison and the 
 223:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         output level is low.
 224:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @retval None
 225:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 226:.\StdPeriphLib\src/stm32f0xx_comp.c **** void COMP_Cmd(uint32_t COMP_Selection, FunctionalState NewState)
 227:.\StdPeriphLib\src/stm32f0xx_comp.c **** {
 136              		.loc 1 227 0
 137              		.cfi_startproc
 138              	.LVL7:
 228:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Check the parameters */
 229:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
 230:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 231:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 232:.\StdPeriphLib\src/stm32f0xx_comp.c ****   if (NewState != DISABLE)
 139              		.loc 1 232 0
 140 0000 0029     		cmp	r1, #0
 141 0002 07D0     		beq	.L9
 233:.\StdPeriphLib\src/stm32f0xx_comp.c ****   {
 234:.\StdPeriphLib\src/stm32f0xx_comp.c ****     /* Enable the selected COMP peripheral */
 235:.\StdPeriphLib\src/stm32f0xx_comp.c ****     COMP->CSR |= (uint32_t) (1<<COMP_Selection);
 142              		.loc 1 235 0
 143 0004 0749     		ldr	r1, .L11
 144              	.LVL8:
 145 0006 0B68     		ldr	r3, [r1]
 146 0008 0122     		mov	r2, #1
 147 000a 8240     		lsl	r2, r2, r0
 148 000c 101C     		mov	r0, r2
 149              	.LVL9:
 150 000e 1843     		orr	r0, r3
 151 0010 0860     		str	r0, [r1]
 152 0012 05E0     		b	.L8
 153              	.LVL10:
 154              	.L9:
 236:.\StdPeriphLib\src/stm32f0xx_comp.c ****   }
 237:.\StdPeriphLib\src/stm32f0xx_comp.c ****   else
 238:.\StdPeriphLib\src/stm32f0xx_comp.c ****   {
 239:.\StdPeriphLib\src/stm32f0xx_comp.c ****     /* Disable the selected COMP peripheral  */
 240:.\StdPeriphLib\src/stm32f0xx_comp.c ****     COMP->CSR &= (uint32_t)(~((uint32_t)1<<COMP_Selection));
 155              		.loc 1 240 0
 156 0014 0349     		ldr	r1, .L11
 157              	.LVL11:
 158 0016 0B68     		ldr	r3, [r1]
 159 0018 0122     		mov	r2, #1
 160 001a 8240     		lsl	r2, r2, r0
 161 001c 9343     		bic	r3, r2
 162 001e 0B60     		str	r3, [r1]
 163              	.LVL12:
 164              	.L8:
 241:.\StdPeriphLib\src/stm32f0xx_comp.c ****   }
 242:.\StdPeriphLib\src/stm32f0xx_comp.c **** }
 165              		.loc 1 242 0
 166              		@ sp needed
 167 0020 7047     		bx	lr
 168              	.L12:
 169 0022 C046     		.align	2
 170              	.L11:
 171 0024 1C000140 		.word	1073807388
 172              		.cfi_endproc
 173              	.LFE36:
 175              		.section	.text.COMP_SwitchCmd,"ax",%progbits
 176              		.align	2
 177              		.global	COMP_SwitchCmd
 178              		.code	16
 179              		.thumb_func
 181              	COMP_SwitchCmd:
 182              	.LFB37:
 243:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 244:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 245:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief  Close or Open the SW1 switch.
 246:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   This switch is solely intended to redirect signals onto high
 247:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         impedance input, such as COMP1 non-inverting input (highly resistive switch)
 248:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  NewState: New state of the analog switch.
 249:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          This parameter can be: ENABLE or DISABLE. 
 250:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   When enabled, the SW1 is closed; PA1 is connected to PA4
 251:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   When disabled, the SW1 switch is open; PA1 is disconnected from PA4
 252:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @retval None
 253:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 254:.\StdPeriphLib\src/stm32f0xx_comp.c **** void COMP_SwitchCmd(FunctionalState NewState)
 255:.\StdPeriphLib\src/stm32f0xx_comp.c **** {
 183              		.loc 1 255 0
 184              		.cfi_startproc
 185              	.LVL13:
 256:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Check the parameter */
 257:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 258:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 259:.\StdPeriphLib\src/stm32f0xx_comp.c ****   if (NewState != DISABLE)
 186              		.loc 1 259 0
 187 0000 0028     		cmp	r0, #0
 188 0002 05D0     		beq	.L14
 260:.\StdPeriphLib\src/stm32f0xx_comp.c ****   {
 261:.\StdPeriphLib\src/stm32f0xx_comp.c ****     /* Close SW1 switch */
 262:.\StdPeriphLib\src/stm32f0xx_comp.c ****     COMP->CSR |= (uint32_t) (COMP_CSR_COMP1SW1);
 189              		.loc 1 262 0
 190 0004 054A     		ldr	r2, .L16
 191 0006 1168     		ldr	r1, [r2]
 192 0008 0223     		mov	r3, #2
 193 000a 0B43     		orr	r3, r1
 194 000c 1360     		str	r3, [r2]
 195 000e 04E0     		b	.L13
 196              	.L14:
 263:.\StdPeriphLib\src/stm32f0xx_comp.c ****   }
 264:.\StdPeriphLib\src/stm32f0xx_comp.c ****   else
 265:.\StdPeriphLib\src/stm32f0xx_comp.c ****   {
 266:.\StdPeriphLib\src/stm32f0xx_comp.c ****     /* Open SW1 switch */
 267:.\StdPeriphLib\src/stm32f0xx_comp.c ****     COMP->CSR &= (uint32_t)(~COMP_CSR_COMP1SW1);
 197              		.loc 1 267 0
 198 0010 024A     		ldr	r2, .L16
 199 0012 1368     		ldr	r3, [r2]
 200 0014 0221     		mov	r1, #2
 201 0016 8B43     		bic	r3, r1
 202 0018 1360     		str	r3, [r2]
 203              	.L13:
 268:.\StdPeriphLib\src/stm32f0xx_comp.c ****   }
 269:.\StdPeriphLib\src/stm32f0xx_comp.c **** }
 204              		.loc 1 269 0
 205              		@ sp needed
 206 001a 7047     		bx	lr
 207              	.L17:
 208              		.align	2
 209              	.L16:
 210 001c 1C000140 		.word	1073807388
 211              		.cfi_endproc
 212              	.LFE37:
 214              		.section	.text.COMP_GetOutputLevel,"ax",%progbits
 215              		.align	2
 216              		.global	COMP_GetOutputLevel
 217              		.code	16
 218              		.thumb_func
 220              	COMP_GetOutputLevel:
 221              	.LFB38:
 270:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 271:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 272:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief  Return the output level (high or low) of the selected comparator. 
 273:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   The output level depends on the selected polarity.
 274:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   If the polarity is not inverted:
 275:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          - Comparator output is low when the non-inverting input is at a lower
 276:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            voltage than the inverting input
 277:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          - Comparator output is high when the non-inverting input is at a higher
 278:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            voltage than the inverting input
 279:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   If the polarity is inverted:
 280:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          - Comparator output is high when the non-inverting input is at a lower
 281:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            voltage than the inverting input
 282:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          - Comparator output is low when the non-inverting input is at a higher
 283:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            voltage than the inverting input
 284:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  COMP_Selection: the selected comparator. 
 285:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          This parameter can be one of the following values:
 286:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            @arg COMP_Selection_COMP1: COMP1 selected
 287:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            @arg COMP_Selection_COMP2: COMP2 selected  
 288:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @retval Returns the selected comparator output level: low or high.
 289:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *       
 290:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 291:.\StdPeriphLib\src/stm32f0xx_comp.c **** uint32_t COMP_GetOutputLevel(uint32_t COMP_Selection)
 292:.\StdPeriphLib\src/stm32f0xx_comp.c **** {
 222              		.loc 1 292 0
 223              		.cfi_startproc
 224              	.LVL14:
 293:.\StdPeriphLib\src/stm32f0xx_comp.c ****   uint32_t compout = 0x0;
 294:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 295:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Check the parameters */
 296:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
 297:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 298:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Check if selected comparator output is high */
 299:.\StdPeriphLib\src/stm32f0xx_comp.c ****   if ((COMP->CSR & (COMP_CSR_COMP1OUT<<COMP_Selection)) != 0)
 225              		.loc 1 299 0
 226 0000 054B     		ldr	r3, .L21
 227 0002 1A68     		ldr	r2, [r3]
 228 0004 8023     		mov	r3, #128
 229 0006 DB01     		lsl	r3, r3, #7
 230 0008 8340     		lsl	r3, r3, r0
 231 000a 181C     		mov	r0, r3
 232              	.LVL15:
 233 000c 1040     		and	r0, r2
 300:.\StdPeriphLib\src/stm32f0xx_comp.c ****   {
 301:.\StdPeriphLib\src/stm32f0xx_comp.c ****     compout = COMP_OutputLevel_High;
 302:.\StdPeriphLib\src/stm32f0xx_comp.c ****   }
 303:.\StdPeriphLib\src/stm32f0xx_comp.c ****   else
 304:.\StdPeriphLib\src/stm32f0xx_comp.c ****   {
 305:.\StdPeriphLib\src/stm32f0xx_comp.c ****     compout = COMP_OutputLevel_Low;
 234              		.loc 1 305 0
 235 000e 431E     		sub	r3, r0, #1
 236 0010 9841     		sbc	r0, r0, r3
 237 0012 8003     		lsl	r0, r0, #14
 238              	.LVL16:
 306:.\StdPeriphLib\src/stm32f0xx_comp.c ****   }
 307:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 308:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Return the comparator output level */
 309:.\StdPeriphLib\src/stm32f0xx_comp.c ****   return (uint32_t)(compout);
 310:.\StdPeriphLib\src/stm32f0xx_comp.c **** }
 239              		.loc 1 310 0
 240              		@ sp needed
 241 0014 7047     		bx	lr
 242              	.L22:
 243 0016 C046     		.align	2
 244              	.L21:
 245 0018 1C000140 		.word	1073807388
 246              		.cfi_endproc
 247              	.LFE38:
 249              		.section	.text.COMP_WindowCmd,"ax",%progbits
 250              		.align	2
 251              		.global	COMP_WindowCmd
 252              		.code	16
 253              		.thumb_func
 255              	COMP_WindowCmd:
 256              	.LFB39:
 311:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 312:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 313:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @}
 314:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 315:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 316:.\StdPeriphLib\src/stm32f0xx_comp.c **** /** @defgroup COMP_Group2 Window mode control function
 317:.\StdPeriphLib\src/stm32f0xx_comp.c ****  *  @brief   Window mode control function 
 318:.\StdPeriphLib\src/stm32f0xx_comp.c ****  *
 319:.\StdPeriphLib\src/stm32f0xx_comp.c **** @verbatim   
 320:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================
 321:.\StdPeriphLib\src/stm32f0xx_comp.c ****                      ##### Window mode control function #####
 322:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================  
 323:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 324:.\StdPeriphLib\src/stm32f0xx_comp.c **** @endverbatim
 325:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @{
 326:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 327:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 328:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 329:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief  Enables or disables the window mode.
 330:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   In window mode, COMP1 and COMP2 non inverting inputs are connected
 331:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         together and only COMP1 non inverting input (PA1) can be used.
 332:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  NewState: new state of the window mode.
 333:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          This parameter can be :
 334:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *           @arg ENABLE: COMP1 and COMP2 non inverting inputs are connected together.
 335:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *           @arg DISABLE: OMP1 and COMP2 non inverting inputs are disconnected.
 336:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @retval None
 337:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 338:.\StdPeriphLib\src/stm32f0xx_comp.c **** void COMP_WindowCmd(FunctionalState NewState)
 339:.\StdPeriphLib\src/stm32f0xx_comp.c **** {
 257              		.loc 1 339 0
 258              		.cfi_startproc
 259              	.LVL17:
 340:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Check the parameters */
 341:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 342:.\StdPeriphLib\src/stm32f0xx_comp.c ****   
 343:.\StdPeriphLib\src/stm32f0xx_comp.c ****   if (NewState != DISABLE)
 260              		.loc 1 343 0
 261 0000 0028     		cmp	r0, #0
 262 0002 06D0     		beq	.L24
 344:.\StdPeriphLib\src/stm32f0xx_comp.c ****   {
 345:.\StdPeriphLib\src/stm32f0xx_comp.c ****     /* Enable the window mode */
 346:.\StdPeriphLib\src/stm32f0xx_comp.c ****     COMP->CSR |= (uint32_t) COMP_CSR_WNDWEN;
 263              		.loc 1 346 0
 264 0004 064A     		ldr	r2, .L26
 265 0006 1368     		ldr	r3, [r2]
 266 0008 8021     		mov	r1, #128
 267 000a 0904     		lsl	r1, r1, #16
 268 000c 0B43     		orr	r3, r1
 269 000e 1360     		str	r3, [r2]
 270 0010 04E0     		b	.L23
 271              	.L24:
 347:.\StdPeriphLib\src/stm32f0xx_comp.c ****   }
 348:.\StdPeriphLib\src/stm32f0xx_comp.c ****   else
 349:.\StdPeriphLib\src/stm32f0xx_comp.c ****   {
 350:.\StdPeriphLib\src/stm32f0xx_comp.c ****     /* Disable the window mode */
 351:.\StdPeriphLib\src/stm32f0xx_comp.c ****     COMP->CSR &= (uint32_t)(~COMP_CSR_WNDWEN);
 272              		.loc 1 351 0
 273 0012 034A     		ldr	r2, .L26
 274 0014 1168     		ldr	r1, [r2]
 275 0016 034B     		ldr	r3, .L26+4
 276 0018 0B40     		and	r3, r1
 277 001a 1360     		str	r3, [r2]
 278              	.L23:
 352:.\StdPeriphLib\src/stm32f0xx_comp.c ****   }
 353:.\StdPeriphLib\src/stm32f0xx_comp.c **** }
 279              		.loc 1 353 0
 280              		@ sp needed
 281 001c 7047     		bx	lr
 282              	.L27:
 283 001e C046     		.align	2
 284              	.L26:
 285 0020 1C000140 		.word	1073807388
 286 0024 FFFF7FFF 		.word	-8388609
 287              		.cfi_endproc
 288              	.LFE39:
 290              		.section	.text.COMP_LockConfig,"ax",%progbits
 291              		.align	2
 292              		.global	COMP_LockConfig
 293              		.code	16
 294              		.thumb_func
 296              	COMP_LockConfig:
 297              	.LFB40:
 354:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 355:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 356:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @}
 357:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 358:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 359:.\StdPeriphLib\src/stm32f0xx_comp.c **** /** @defgroup COMP_Group3 COMP configuration locking function
 360:.\StdPeriphLib\src/stm32f0xx_comp.c ****  *  @brief   COMP1 and COMP2 configuration locking function
 361:.\StdPeriphLib\src/stm32f0xx_comp.c ****  *           COMP1 and COMP2 configuration can be locked each separately.
 362:.\StdPeriphLib\src/stm32f0xx_comp.c ****  *           Unlocking is performed by system reset.
 363:.\StdPeriphLib\src/stm32f0xx_comp.c ****  *
 364:.\StdPeriphLib\src/stm32f0xx_comp.c **** @verbatim   
 365:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================
 366:.\StdPeriphLib\src/stm32f0xx_comp.c ****                      ##### Configuration Lock function #####
 367:.\StdPeriphLib\src/stm32f0xx_comp.c ****  ===============================================================================  
 368:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 369:.\StdPeriphLib\src/stm32f0xx_comp.c **** @endverbatim
 370:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @{
 371:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 372:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 373:.\StdPeriphLib\src/stm32f0xx_comp.c **** /**
 374:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @brief  Lock the selected comparator (COMP1/COMP2) configuration.
 375:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @note   Locking the configuration means that all control bits are read-only.
 376:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *         To unlock the comparator configuration, perform a system reset.
 377:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @param  COMP_Selection: selects the comparator to be locked 
 378:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *          This parameter can be a value of the following values:
 379:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            @arg COMP_Selection_COMP1: COMP1 configuration is locked.
 380:.\StdPeriphLib\src/stm32f0xx_comp.c ****   *            @arg COMP_Selection_COMP2: COMP2 configuration is locked.  
 381:.\StdPeriphLib\src/stm32f0xx_comp.c ****   * @retval None
 382:.\StdPeriphLib\src/stm32f0xx_comp.c ****   */
 383:.\StdPeriphLib\src/stm32f0xx_comp.c **** void COMP_LockConfig(uint32_t COMP_Selection)
 384:.\StdPeriphLib\src/stm32f0xx_comp.c **** {
 298              		.loc 1 384 0
 299              		.cfi_startproc
 300              	.LVL18:
 385:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Check the parameter */
 386:.\StdPeriphLib\src/stm32f0xx_comp.c ****   assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
 387:.\StdPeriphLib\src/stm32f0xx_comp.c **** 
 388:.\StdPeriphLib\src/stm32f0xx_comp.c ****   /* Set the lock bit corresponding to selected comparator */
 389:.\StdPeriphLib\src/stm32f0xx_comp.c ****   COMP->CSR |= (uint32_t) (COMP_CSR_COMP1LOCK<<COMP_Selection);
 301              		.loc 1 389 0
 302 0000 0449     		ldr	r1, .L29
 303 0002 0B68     		ldr	r3, [r1]
 304 0004 8022     		mov	r2, #128
 305 0006 1202     		lsl	r2, r2, #8
 306 0008 8240     		lsl	r2, r2, r0
 307 000a 101C     		mov	r0, r2
 308              	.LVL19:
 309 000c 1843     		orr	r0, r3
 310 000e 0860     		str	r0, [r1]
 390:.\StdPeriphLib\src/stm32f0xx_comp.c **** }
 311              		.loc 1 390 0
 312              		@ sp needed
 313 0010 7047     		bx	lr
 314              	.L30:
 315 0012 C046     		.align	2
 316              	.L29:
 317 0014 1C000140 		.word	1073807388
 318              		.cfi_endproc
 319              	.LFE40:
 321              		.text
 322              	.Letext0:
 323              		.file 2 "c:\\myprograms\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\
 324              		.file 3 "c:\\myprograms\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\
 325              		.file 4 ".\\CMSIS/stm32f0xx.h"
 326              		.file 5 ".\\StdPeriphLib\\inc/stm32f0xx_comp.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_comp.c
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:18     .text.COMP_DeInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:23     .text.COMP_DeInit:00000000 COMP_DeInit
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:38     .text.COMP_DeInit:00000008 $d
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:43     .text.COMP_Init:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:48     .text.COMP_Init:00000000 COMP_Init
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:94     .text.COMP_Init:00000028 $d
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:100    .text.COMP_StructInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:105    .text.COMP_StructInit:00000000 COMP_StructInit
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:129    .text.COMP_Cmd:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:134    .text.COMP_Cmd:00000000 COMP_Cmd
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:171    .text.COMP_Cmd:00000024 $d
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:176    .text.COMP_SwitchCmd:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:181    .text.COMP_SwitchCmd:00000000 COMP_SwitchCmd
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:210    .text.COMP_SwitchCmd:0000001c $d
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:215    .text.COMP_GetOutputLevel:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:220    .text.COMP_GetOutputLevel:00000000 COMP_GetOutputLevel
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:245    .text.COMP_GetOutputLevel:00000018 $d
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:250    .text.COMP_WindowCmd:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:255    .text.COMP_WindowCmd:00000000 COMP_WindowCmd
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:285    .text.COMP_WindowCmd:00000020 $d
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:291    .text.COMP_LockConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:296    .text.COMP_LockConfig:00000000 COMP_LockConfig
C:\Users\Dima\AppData\Local\Temp\ccZtMVLu.s:317    .text.COMP_LockConfig:00000014 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
