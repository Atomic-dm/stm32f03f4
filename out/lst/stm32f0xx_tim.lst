   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.TI1_Config,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	TI1_Config:
  23              	.LFB122:
  24              		.file 1 ".\\StdPeriphLib\\src/stm32f0xx_tim.c"
   1:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
   2:.\StdPeriphLib\src/stm32f0xx_tim.c ****   ******************************************************************************
   3:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @file    stm32f0xx_tim.c
   4:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @author  MCD Application Team
   5:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @version V1.5.0
   6:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @date    05-December-2014
   7:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief   This file provides firmware functions to manage the following 
   8:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          functionalities of the TIM peripheral:
   9:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            + TimeBase management
  10:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            + Output Compare management
  11:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            + Input Capture management
  12:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            + Interrupts, DMA and flags management
  13:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            + Clocks management
  14:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            + Synchronization management
  15:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            + Specific interface management
  16:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            + Specific remapping management      
  17:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *              
  18:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *  @verbatim
  19:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  20:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
  21:.\StdPeriphLib\src/stm32f0xx_tim.c ****                     ##### How to use this driver #####
  22:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
  23:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..] This driver provides functions to configure and program the TIM 
  24:.\StdPeriphLib\src/stm32f0xx_tim.c ****          of all STM32F0xx devices These functions are split in 8 groups: 
  25:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) TIM TimeBase management: this group includes all needed functions 
  26:.\StdPeriphLib\src/stm32f0xx_tim.c ****              to configure the TM Timebase unit:
  27:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Set/Get Prescaler.
  28:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Set/Get Autoreload.
  29:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Counter modes configuration.
  30:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Set Clock division.
  31:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select the One Pulse mode.
  32:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Update Request Configuration.
  33:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Update Disable Configuration.
  34:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Auto-Preload Configuration.
  35:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Enable/Disable the counter.
  36:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  37:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) TIM Output Compare management: this group includes all needed 
  38:.\StdPeriphLib\src/stm32f0xx_tim.c ****              functions to configure the Capture/Compare unit used in Output 
  39:.\StdPeriphLib\src/stm32f0xx_tim.c ****              compare mode: 
  40:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Configure each channel, independently, in Output Compare mode.
  41:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select the output compare modes.
  42:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select the Polarities of each channel.
  43:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Set/Get the Capture/Compare register values.
  44:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select the Output Compare Fast mode. 
  45:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select the Output Compare Forced mode.  
  46:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Output Compare-Preload Configuration. 
  47:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Clear Output Compare Reference.
  48:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select the OCREF Clear signal.
  49:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Enable/Disable the Capture/Compare Channels.    
  50:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  51:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) TIM Input Capture management: this group includes all needed 
  52:.\StdPeriphLib\src/stm32f0xx_tim.c ****              functions to configure the Capture/Compare unit used in 
  53:.\StdPeriphLib\src/stm32f0xx_tim.c ****              Input Capture mode:
  54:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Configure each channel in input capture mode.
  55:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Configure Channel1/2 in PWM Input mode.
  56:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Set the Input Capture Prescaler.
  57:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Get the Capture/Compare values.  
  58:.\StdPeriphLib\src/stm32f0xx_tim.c ****              
  59:.\StdPeriphLib\src/stm32f0xx_tim.c ****         (#) Advanced-control timers (TIM1) specific features
  60:.\StdPeriphLib\src/stm32f0xx_tim.c ****             (++) Configures the Break input, dead time, Lock level, the OSSI,
  61:.\StdPeriphLib\src/stm32f0xx_tim.c ****                  the OSSR State and the AOE(automatic output enable)
  62:.\StdPeriphLib\src/stm32f0xx_tim.c ****             (++) Enable/Disable the TIM peripheral Main Outputs
  63:.\StdPeriphLib\src/stm32f0xx_tim.c ****             (++) Select the Commutation event
  64:.\StdPeriphLib\src/stm32f0xx_tim.c ****             (++) Set/Reset the Capture Compare Preload Control bit     
  65:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  66:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) TIM interrupts, DMA and flags management.
  67:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Enable/Disable interrupt sources.
  68:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Get flags status.
  69:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Clear flags/ Pending bits.
  70:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Enable/Disable DMA requests. 
  71:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Configure DMA burst mode.
  72:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select CaptureCompare DMA request.  
  73:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  74:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) TIM clocks management: this group includes all needed functions 
  75:.\StdPeriphLib\src/stm32f0xx_tim.c ****              to configure the clock controller unit:
  76:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select internal/External clock.
  77:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select the external clock mode: ETR(Mode1/Mode2), TIx or ITRx.
  78:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  79:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) TIM synchronization management: this group includes all needed. 
  80:.\StdPeriphLib\src/stm32f0xx_tim.c ****              functions to configure the Synchronization unit:
  81:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select Input Trigger.  
  82:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select Output Trigger.  
  83:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select Master Slave Mode. 
  84:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) ETR Configuration when used as external trigger.   
  85:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  86:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) TIM specific interface management, this group includes all 
  87:.\StdPeriphLib\src/stm32f0xx_tim.c ****              needed functions to use the specific TIM interface:
  88:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Encoder Interface Configuration.
  89:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Select Hall Sensor.   
  90:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  91:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) TIM specific remapping management includes the Remapping 
  92:.\StdPeriphLib\src/stm32f0xx_tim.c ****              configuration of specific timers
  93:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
  94:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
  95:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *    
  96:.\StdPeriphLib\src/stm32f0xx_tim.c ****   ******************************************************************************
  97:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @attention
  98:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
  99:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 100:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
 101:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 102:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * You may not use this file except in compliance with the License.
 103:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * You may obtain a copy of the License at:
 104:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
 105:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 106:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
 107:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * Unless required by applicable law or agreed to in writing, software 
 108:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 109:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 110:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * See the License for the specific language governing permissions and
 111:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * limitations under the License.
 112:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
 113:.\StdPeriphLib\src/stm32f0xx_tim.c ****   ******************************************************************************
 114:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 115:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 116:.\StdPeriphLib\src/stm32f0xx_tim.c **** /* Includes ------------------------------------------------------------------*/
 117:.\StdPeriphLib\src/stm32f0xx_tim.c **** #include "stm32f0xx_tim.h"
 118:.\StdPeriphLib\src/stm32f0xx_tim.c **** #include "stm32f0xx_rcc.h"
 119:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 120:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
 121:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
 122:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 123:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 124:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM 
 125:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief TIM driver modules
 126:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
 127:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 128:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 129:.\StdPeriphLib\src/stm32f0xx_tim.c **** /* Private typedef -----------------------------------------------------------*/
 130:.\StdPeriphLib\src/stm32f0xx_tim.c **** /* Private define ------------------------------------------------------------*/
 131:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 132:.\StdPeriphLib\src/stm32f0xx_tim.c **** /* ---------------------- TIM registers bit mask ------------------------ */
 133:.\StdPeriphLib\src/stm32f0xx_tim.c **** #define SMCR_ETR_MASK               ((uint16_t)0x00FF) 
 134:.\StdPeriphLib\src/stm32f0xx_tim.c **** #define CCMR_OFFSET                 ((uint16_t)0x0018)
 135:.\StdPeriphLib\src/stm32f0xx_tim.c **** #define CCER_CCE_SET                ((uint16_t)0x0001)
 136:.\StdPeriphLib\src/stm32f0xx_tim.c **** #define CCER_CCNE_SET               ((uint16_t)0x0004) 
 137:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 138:.\StdPeriphLib\src/stm32f0xx_tim.c **** /* Private macro -------------------------------------------------------------*/
 139:.\StdPeriphLib\src/stm32f0xx_tim.c **** /* Private variables ---------------------------------------------------------*/
 140:.\StdPeriphLib\src/stm32f0xx_tim.c **** /* Private function prototypes -----------------------------------------------*/
 141:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 142:.\StdPeriphLib\src/stm32f0xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 143:.\StdPeriphLib\src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 144:.\StdPeriphLib\src/stm32f0xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 145:.\StdPeriphLib\src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 146:.\StdPeriphLib\src/stm32f0xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 147:.\StdPeriphLib\src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 148:.\StdPeriphLib\src/stm32f0xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 149:.\StdPeriphLib\src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 150:.\StdPeriphLib\src/stm32f0xx_tim.c **** /* Private functions ---------------------------------------------------------*/
 151:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 152:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Private_Functions
 153:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
 154:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 155:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 156:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group1 TimeBase management functions
 157:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief   TimeBase management functions 
 158:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
 159:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim
 160:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
 161:.\StdPeriphLib\src/stm32f0xx_tim.c ****                  ##### TimeBase management functions #####
 162:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
 163:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 164:.\StdPeriphLib\src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in Timing(Time base) Mode ***
 165:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
 166:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..] To use the Timer in Timing(Time base) mode, the following steps are 
 167:.\StdPeriphLib\src/stm32f0xx_tim.c ****          mandatory:
 168:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Enable TIM clock using 
 169:.\StdPeriphLib\src/stm32f0xx_tim.c ****              RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function.
 170:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Fill the TIM_TimeBaseInitStruct with the desired parameters.
 171:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Call TIM_TimeBaseInit(TIMx, &TIM_TimeBaseInitStruct) to configure 
 172:.\StdPeriphLib\src/stm32f0xx_tim.c ****              the Time Base unit with the corresponding configuration.
 173:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Enable the NVIC if you need to generate the update interrupt. 
 174:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Enable the corresponding interrupt using the function 
 175:.\StdPeriphLib\src/stm32f0xx_tim.c ****              TIM_ITConfig(TIMx, TIM_IT_Update). 
 176:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 177:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..]
 178:.\StdPeriphLib\src/stm32f0xx_tim.c ****         (@) All other functions can be used seperatly to modify, if needed,
 179:.\StdPeriphLib\src/stm32f0xx_tim.c ****             a specific feature of the Timer. 
 180:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 181:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
 182:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
 183:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 184:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 185:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 186:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
 187:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 188:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 189:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 190:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 191:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 192:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *   
 193:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 194:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_DeInit(TIM_TypeDef* TIMx)
 195:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 196:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 197:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 198:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 199:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (TIMx == TIM1)
 200:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 201:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 202:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 203:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }     
 204:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIMx == TIM2)
 205:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 206:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 207:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 208:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 209:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIMx == TIM3)
 210:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 211:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 212:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 213:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 214:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIMx == TIM6)
 215:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 216:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 217:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 218:.\StdPeriphLib\src/stm32f0xx_tim.c ****   } 
 219:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIMx == TIM7)
 220:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 221:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 222:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 223:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 224:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIMx == TIM14) 
 225:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {       
 226:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 227:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 228:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }        
 229:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIMx == TIM15)
 230:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 231:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 232:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 233:.\StdPeriphLib\src/stm32f0xx_tim.c ****   } 
 234:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIMx == TIM16)
 235:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 236:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 237:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 238:.\StdPeriphLib\src/stm32f0xx_tim.c ****   } 
 239:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
 240:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 241:.\StdPeriphLib\src/stm32f0xx_tim.c ****     if (TIMx == TIM17)
 242:.\StdPeriphLib\src/stm32f0xx_tim.c ****     {
 243:.\StdPeriphLib\src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 244:.\StdPeriphLib\src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 245:.\StdPeriphLib\src/stm32f0xx_tim.c ****     }  
 246:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 247:.\StdPeriphLib\src/stm32f0xx_tim.c ****      
 248:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 249:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 250:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 251:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Time Base Unit peripheral according to 
 252:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         the specified parameters in the TIM_TimeBaseInitStruct.
 253:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 254:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 255:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 256:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 257:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 258:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
 259:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         structure that contains the configuration information for
 260:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         the specified TIM peripheral.
 261:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 262:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 263:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 264:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 265:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpcr1 = 0;
 266:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 267:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 268:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 269:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 270:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 271:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 272:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;  
 273:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 274:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 275:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 276:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Select the Counter Mode */
 277:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 278:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 279:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 280:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
 281:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if(TIMx != TIM6)
 282:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 283:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the clock division */
 284:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 285:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 286:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 287:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 288:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 289:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 290:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Autoreload value */
 291:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 292:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
 293:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Prescaler value */
 294:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 295:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 296:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 297:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 298:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Repetition Counter value */
 299:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 300:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 301:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 302:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Generate an update event to reload the Prescaler and the Repetition counter
 303:.\StdPeriphLib\src/stm32f0xx_tim.c ****      values immediately */
 304:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 305:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 306:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 307:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 308:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
 309:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
 310:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         which will be initialized.
 311:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 312:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 313:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 314:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 315:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the default configuration */
 316:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 317:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 318:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 319:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 320:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 321:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 322:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 323:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 324:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Prescaler.
 325:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 326:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 327:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 328:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 329:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  Prescaler: specifies the Prescaler Register value
 330:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
 331:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 332:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
 333:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
 334:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 335:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 336:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
 337:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 338:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 339:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 340:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
 341:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 342:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Prescaler value */
 343:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->PSC = Prescaler;
 344:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or reset the UG Bit */
 345:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 346:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 347:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 348:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 349:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Specifies the TIMx Counter Mode to be used.
 350:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, or 3 to select the TIM peripheral.
 351:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 352:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_CounterMode: specifies the Counter Mode to be used
 353:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 354:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_Up: TIM Up Counting Mode
 355:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_Down: TIM Down Counting Mode
 356:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
 357:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
 358:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
 359:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 360:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 361:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
 362:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 363:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpcr1 = 0;
 364:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 365:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 366:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 367:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
 368:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 369:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;
 370:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the CMS and DIR Bits */
 371:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 372:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Counter Mode */
 373:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpcr1 |= TIM_CounterMode;
 374:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CR1 register */
 375:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 376:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 377:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 378:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 379:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Counter Register value
 380:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 381:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          peripheral.
 382:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 383:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 384:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 385:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  Counter: specifies the Counter register new value.
 386:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 387:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 388:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
 389:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 390:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 391:.\StdPeriphLib\src/stm32f0xx_tim.c ****    assert_param(IS_TIM_ALL_PERIPH(TIMx));
 392:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
 393:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Counter Register value */
 394:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CNT = Counter;
 395:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 396:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 397:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 398:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Autoreload Register value
 399:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 400:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 401:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 402:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 403:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  Autoreload: specifies the Autoreload register new value.
 404:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 405:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 406:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
 407:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 408:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 409:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 410:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 411:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Autoreload Register value */
 412:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->ARR = Autoreload;
 413:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 414:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 415:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 416:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Counter value.
 417:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 418:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 419:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 420:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 421:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 422:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval Counter Register value.
 423:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 424:.\StdPeriphLib\src/stm32f0xx_tim.c **** uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
 425:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 426:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 427:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 428:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 429:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the Counter Register value */
 430:.\StdPeriphLib\src/stm32f0xx_tim.c ****   return TIMx->CNT;
 431:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 432:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 433:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 434:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Prescaler value.
 435:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 436:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 437:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 438:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 439:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 440:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval Prescaler Register value.
 441:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 442:.\StdPeriphLib\src/stm32f0xx_tim.c **** uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
 443:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 444:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 445:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 446:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 447:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the Prescaler Register value */
 448:.\StdPeriphLib\src/stm32f0xx_tim.c ****   return TIMx->PSC;
 449:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 450:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 451:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 452:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or Disables the TIMx Update event.
 453:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 454:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 455:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 456:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 457:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 458:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx UDIS bit
 459:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 460:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 461:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 462:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 463:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 464:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 465:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 466:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 467:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 468:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 469:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 470:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Update Disable Bit */
 471:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 472:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 473:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
 474:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 475:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Update Disable Bit */
 476:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 477:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 478:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 479:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 480:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 481:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Update Request Interrupt source.
 482:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 483:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 484:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 485:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 486:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 487:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_UpdateSource: specifies the Update source.
 488:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 489:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_UpdateSource_Regular: Source of update is the counter
 490:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *                 overflow/underflow or the setting of UG bit, or an update
 491:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *                 generation through the slave mode controller.
 492:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
 493:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 494:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 495:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
 496:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 497:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 498:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 499:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
 500:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 501:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 502:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 503:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the URS Bit */
 504:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 505:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 506:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
 507:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 508:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the URS Bit */
 509:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 510:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 511:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 512:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 513:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 514:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables TIMx peripheral Preload register on ARR.
 515:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 516:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 517:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 518:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 519:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 520:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral Preload register
 521:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 522:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 523:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 524:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 525:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 526:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 527:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 528:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 530:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 531:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 532:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the ARR Preload Bit */
 533:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 534:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 535:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
 536:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 537:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the ARR Preload Bit */
 538:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 539:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 540:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 541:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 542:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 543:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx's One Pulse Mode.
 544:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 545:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 546:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 547:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 548:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 549:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OPMode: specifies the OPM Mode to be used.
 550:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 551:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OPMode_Single
 552:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OPMode_Repetitive
 553:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 554:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 555:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
 556:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 557:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 558:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 559:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
 560:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 561:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OPM Bit */
 562:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 563:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure the OPM Mode */
 564:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 565:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 566:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 567:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 568:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Clock Division value.
 569:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
 570:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 571:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_CKD: specifies the clock division value.
 572:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following value:
 573:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV1: TDTS = Tck_tim
 574:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
 575:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
 576:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 577:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 578:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
 579:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 580:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 581:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
 582:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_CKD));
 583:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 584:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the CKD Bits */
 585:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 586:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the CKD value */
 587:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_CKD;
 588:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 589:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 590:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 591:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the specified TIM peripheral.
 592:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17to select the TIMx
 593:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 594:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 595:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 596:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 597:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral.
 598:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 599:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 600:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 601:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
 602:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 603:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 604:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 605:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 606:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 607:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 608:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 609:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Enable the TIM Counter */
 610:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 611:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 612:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
 613:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 614:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Disable the TIM Counter */
 615:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 616:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 617:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 618:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 619:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 620:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
 621:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 622:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 623:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group2 Advanced-control timers (TIM1) specific features
 624:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief   Advanced-control timers (TIM1) specific features
 625:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
 626:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim   
 627:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
 628:.\StdPeriphLib\src/stm32f0xx_tim.c ****       ##### Advanced-control timers (TIM1) specific features #####
 629:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================  
 630:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 631:.\StdPeriphLib\src/stm32f0xx_tim.c ****        ===================================================================      
 632:.\StdPeriphLib\src/stm32f0xx_tim.c ****               *** TIM Driver: how to use the Break feature ***
 633:.\StdPeriphLib\src/stm32f0xx_tim.c ****        =================================================================== 
 634:.\StdPeriphLib\src/stm32f0xx_tim.c ****        [..] After configuring the Timer channel(s) in the appropriate Output Compare mode: 
 635:.\StdPeriphLib\src/stm32f0xx_tim.c ****                          
 636:.\StdPeriphLib\src/stm32f0xx_tim.c ****            (#) Fill the TIM_BDTRInitStruct with the desired parameters for the Timer
 637:.\StdPeriphLib\src/stm32f0xx_tim.c ****                Break Polarity, dead time, Lock level, the OSSI/OSSR State and the 
 638:.\StdPeriphLib\src/stm32f0xx_tim.c ****                AOE(automatic output enable).
 639:.\StdPeriphLib\src/stm32f0xx_tim.c ****                
 640:.\StdPeriphLib\src/stm32f0xx_tim.c ****            (#) Call TIM_BDTRConfig(TIMx, &TIM_BDTRInitStruct) to configure the Timer
 641:.\StdPeriphLib\src/stm32f0xx_tim.c ****           
 642:.\StdPeriphLib\src/stm32f0xx_tim.c ****            (#) Enable the Main Output using TIM_CtrlPWMOutputs(TIM1, ENABLE) 
 643:.\StdPeriphLib\src/stm32f0xx_tim.c ****           
 644:.\StdPeriphLib\src/stm32f0xx_tim.c ****            (#) Once the break even occurs, the Timer's output signals are put in reset
 645:.\StdPeriphLib\src/stm32f0xx_tim.c ****                state or in a known state (according to the configuration made in
 646:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_BDTRConfig() function).
 647:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 648:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
 649:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
 650:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 651:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 652:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the: Break feature, dead time, Lock level, OSSI/OSSR State
 653:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         and the AOE(automatic output enable).
 654:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 15, 16 or 17 to select the TIM 
 655:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
 656:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         contains the BDTR Register configuration  information for the TIM peripheral.
 657:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 658:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 659:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
 660:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 661:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 662:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 663:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
 664:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
 665:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
 666:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
 667:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
 668:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
 669:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
 670:.\StdPeriphLib\src/stm32f0xx_tim.c ****      the OSSI State, the dead time value and the Automatic Output Enable Bit */
 671:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 672:.\StdPeriphLib\src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 673:.\StdPeriphLib\src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 674:.\StdPeriphLib\src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
 675:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 676:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 677:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 678:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_BDTRInitStruct member with its default value.
 679:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
 680:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         will be initialized.
 681:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 682:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 683:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
 684:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 685:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the default configuration */
 686:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 687:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 688:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 689:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 690:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 691:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 692:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 693:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 694:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 695:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 696:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM peripheral Main Outputs.
 697:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIMx peripheral.
 698:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIM peripheral Main Outputs.
 699:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 700:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 701:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 702:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
 703:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 704:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 705:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 706:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 707:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 708:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 709:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Enable the TIM Main Output */
 710:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
 711:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 712:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
 713:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 714:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Disable the TIM Main Output */
 715:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 716:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }  
 717:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 718:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 719:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 720:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
 721:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 722:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 723:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group3 Output Compare management functions
 724:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief    Output Compare management functions 
 725:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
 726:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim
 727:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
 728:.\StdPeriphLib\src/stm32f0xx_tim.c ****                 ##### Output Compare management functions #####
 729:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
 730:.\StdPeriphLib\src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in Output Compare Mode ***
 731:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
 732:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..] To use the Timer in Output Compare mode, the following steps are mandatory:
 733:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Enable TIM clock using 
 734:.\StdPeriphLib\src/stm32f0xx_tim.c ****              RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function.
 735:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Configure the TIM pins by configuring the corresponding GPIO pins
 736:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Configure the Time base unit as described in the first part of this 
 737:.\StdPeriphLib\src/stm32f0xx_tim.c ****              driver, if needed, else the Timer will run with the default 
 738:.\StdPeriphLib\src/stm32f0xx_tim.c ****              configuration:
 739:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Autoreload value = 0xFFFF.
 740:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Prescaler value = 0x0000.
 741:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Counter mode = Up counting.
 742:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Clock Division = TIM_CKD_DIV1.
 743:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Fill the TIM_OCInitStruct with the desired parameters including:
 744:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) The TIM Output Compare mode: TIM_OCMode.
 745:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) TIM Output State: TIM_OutputState.
 746:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) TIM Pulse value: TIM_Pulse.
 747:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) TIM Output Compare Polarity : TIM_OCPolarity.
 748:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Call TIM_OCxInit(TIMx, &TIM_OCInitStruct) to configure the desired 
 749:.\StdPeriphLib\src/stm32f0xx_tim.c ****              channel with the corresponding configuration.
 750:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 751:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..]
 752:.\StdPeriphLib\src/stm32f0xx_tim.c ****         (@) All other functions can be used separately to modify, if needed,
 753:.\StdPeriphLib\src/stm32f0xx_tim.c ****           a specific feature of the Timer.
 754:.\StdPeriphLib\src/stm32f0xx_tim.c ****         (@) In case of PWM mode, this function is mandatory:
 755:.\StdPeriphLib\src/stm32f0xx_tim.c ****             TIM_OCxPreloadConfig(TIMx, TIM_OCPreload_ENABLE).
 756:.\StdPeriphLib\src/stm32f0xx_tim.c ****         (@) If the corresponding interrupt or DMA request are needed, the user should:
 757:.\StdPeriphLib\src/stm32f0xx_tim.c ****             (#@) Enable the NVIC (or the DMA) to use the TIM interrupts (or DMA requests).
 758:.\StdPeriphLib\src/stm32f0xx_tim.c ****             (#@) Enable the corresponding interrupt (or DMA request) using the function
 759:.\StdPeriphLib\src/stm32f0xx_tim.c ****                  TIM_ITConfig(TIMx, TIM_IT_CCx) (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)).
 760:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 761:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
 762:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
 763:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 764:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 765:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 766:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel1 according to the specified
 767:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 768:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
 769:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 770:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 771:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 772:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 773:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 774:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 775:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 776:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 777:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 778:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
 779:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 780:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
 781:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 782:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 783:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 784:.\StdPeriphLib\src/stm32f0xx_tim.c ****  /* Disable the Channel 1: Reset the CC1E Bit */
 785:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 786:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
 787:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 788:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 789:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 790:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 791:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 792:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 793:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 794:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the Output Compare Mode Bits */
 795:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 796:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 797:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 798:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 799:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 801:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 802:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 803:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 804:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 805:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 806:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output State */
 807:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 808:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 809:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 810:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 811:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 812:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 813:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 814:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 815:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 816:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Output N Polarity level */
 817:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 818:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N Polarity */
 819:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 820:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 821:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Output N State */
 822:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 823:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N State */
 824:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 825:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 826:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare and Output Compare N IDLE State */
 827:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 828:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 829:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 830:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
 831:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 832:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N Idle state */
 833:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 834:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 835:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
 836:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 837:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 838:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 839:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 840:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 841:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
 842:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 843:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
 844:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
 845:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 846:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 847:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 848:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 849:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel2 according to the specified
 850:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 851:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
 852:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 853:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 854:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 855:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 856:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 857:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 858:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 859:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 860:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 861:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
 862:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 863:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
 864:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 865:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 866:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 867:.\StdPeriphLib\src/stm32f0xx_tim.c ****    /* Disable the Channel 2: Reset the CC2E Bit */
 868:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 869:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 870:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */  
 871:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 872:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 873:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 874:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 875:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 876:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 877:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 878:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 879:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 880:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 881:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 882:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 883:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 884:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 885:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 886:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 887:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 888:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 889:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 890:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output State */
 891:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 892:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 893:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 894:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 895:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Check the parameters */
 896:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 897:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 898:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare State */
 899:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 900:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 901:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
 902:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 903:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 904:.\StdPeriphLib\src/stm32f0xx_tim.c ****     if (TIMx == TIM1)
 905:.\StdPeriphLib\src/stm32f0xx_tim.c ****     {    
 906:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Check the parameters */
 907:.\StdPeriphLib\src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 908:.\StdPeriphLib\src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 909:.\StdPeriphLib\src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 910:.\StdPeriphLib\src/stm32f0xx_tim.c ****       
 911:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Reset the Output N Polarity level */
 912:.\StdPeriphLib\src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 913:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Set the Output N Polarity */
 914:.\StdPeriphLib\src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 915:.\StdPeriphLib\src/stm32f0xx_tim.c ****       
 916:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Reset the Output N State */
 917:.\StdPeriphLib\src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 918:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Set the Output N State */
 919:.\StdPeriphLib\src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 920:.\StdPeriphLib\src/stm32f0xx_tim.c ****       
 921:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Reset the Output Compare N IDLE State */
 922:.\StdPeriphLib\src/stm32f0xx_tim.c ****       tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 923:.\StdPeriphLib\src/stm32f0xx_tim.c ****       
 924:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Set the Output N Idle state */
 925:.\StdPeriphLib\src/stm32f0xx_tim.c ****       tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 926:.\StdPeriphLib\src/stm32f0xx_tim.c ****     }
 927:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 928:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
 929:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 930:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 931:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 932:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 933:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 934:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
 935:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 936:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 937:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
 938:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 939:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 940:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 941:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
 942:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel3 according to the specified
 943:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 944:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
 945:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 946:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 947:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 948:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
 949:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
 950:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
 951:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 952:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
 953:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 954:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
 955:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 956:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 957:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 958:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 959:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 960:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
 961:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 962:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 963:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
 964:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 965:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 966:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 967:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 968:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 969:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 970:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 971:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 972:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 973:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 974:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 975:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 976:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 977:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 978:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 979:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 980:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 981:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 982:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output State */
 983:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 984:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 985:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 986:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 987:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 988:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 989:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 990:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 991:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 992:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Output N Polarity level */
 993:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 994:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N Polarity */
 995:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 996:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Output N State */
 997:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 998:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 999:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N State */
1000:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
1001:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare and Output Compare N IDLE State */
1002:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
1003:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
1004:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
1005:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
1006:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N Idle state */
1007:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
1008:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
1009:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
1010:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
1011:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1012:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1013:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
1014:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1015:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
1016:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
1017:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1018:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
1019:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1020:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1021:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1022:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1023:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel4 according to the specified
1024:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
1025:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1026:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1027:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
1028:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
1029:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
1030:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1031:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1032:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
1033:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1034:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
1035:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
1036:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1037:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
1038:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
1039:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
1040:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
1041:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC4E Bit */
1042:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
1043:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1044:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
1045:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1046:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
1047:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
1048:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1049:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1050:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
1051:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
1052:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
1053:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
1054:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
1055:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1056:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
1057:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
1058:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1059:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
1060:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
1061:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
1062:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
1063:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1064:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output State */
1065:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
1066:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
1067:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
1068:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
1069:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
1070:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare IDLE State */
1071:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
1072:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
1073:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
1074:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
1075:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
1076:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
1077:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1078:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */  
1079:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
1080:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1081:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
1082:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
1083:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1084:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
1085:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1086:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1087:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1088:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1089:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_OCInitStruct member with its default value.
1090:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
1091:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         be initialized.
1092:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1093:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1094:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
1095:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1096:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the default configuration */
1097:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
1098:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
1099:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
1100:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x0000000;
1101:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
1102:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
1103:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
1104:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
1105:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1106:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1107:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1108:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Selects the TIM Output Compare Mode.
1109:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   This function disables the selected channel before changing the Output
1110:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         Compare Mode.
1111:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         User has to enable this channel using TIM_CCxCmd and TIM_CCxNCmd functions.
1112:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1113:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1114:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1115:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1116:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1117:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1118:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1119:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1120:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
1121:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1122:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Timing
1123:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Active
1124:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Toggle
1125:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_PWM1
1126:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_PWM2
1127:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active
1128:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive
1129:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1130:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1131:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
1132:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1133:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint32_t tmp = 0;
1134:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmp1 = 0;
1135:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1136:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1137:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
1138:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCM(TIM_OCMode));
1139:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1140:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp = (uint32_t) TIMx;
1141:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp += CCMR_OFFSET;
1142:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1143:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
1144:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1145:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Disable the Channel: Reset the CCxE Bit */
1146:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
1147:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1148:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
1149:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
1150:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmp += (TIM_Channel>>1);
1151:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1152:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1153:.\StdPeriphLib\src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
1154:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
1155:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1156:.\StdPeriphLib\src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
1157:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
1158:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
1159:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
1160:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
1161:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1162:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1163:.\StdPeriphLib\src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
1164:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
1165:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1166:.\StdPeriphLib\src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
1167:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
1168:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1169:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1170:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1171:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare1 Register value
1172:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1173:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1174:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  Compare1: specifies the Capture Compare1 register new value.
1175:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1176:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1177:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
1178:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1179:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1180:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1181:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1182:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Capture Compare1 Register value */
1183:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCR1 = Compare1;
1184:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1185:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1186:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1187:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare2 Register value
1188:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1189:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1190:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  Compare2: specifies the Capture Compare2 register new value.
1191:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1192:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1193:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
1194:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1195:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1196:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1197:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1198:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Capture Compare2 Register value */
1199:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCR2 = Compare2;
1200:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1201:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1202:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1203:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare3 Register value
1204:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1205:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  Compare3: specifies the Capture Compare3 register new value.
1206:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1207:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1208:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
1209:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1210:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1211:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1212:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1213:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Capture Compare3 Register value */
1214:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCR3 = Compare3;
1215:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1216:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1217:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1218:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare4 Register value
1219:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1220:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
1221:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  Compare4: specifies the Capture Compare4 register new value.
1222:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1223:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1224:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
1225:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1226:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1227:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1228:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1229:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Capture Compare4 Register value */
1230:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCR4 = Compare4;
1231:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1232:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1233:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1234:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 1 waveform to active or inactive level.
1235:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1236:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1237:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1238:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1239:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
1240:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
1241:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1242:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1243:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1244:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1245:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1246:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1247:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1248:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1249:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1250:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1M Bits */
1251:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
1252:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1253:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
1254:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1255:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1256:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1257:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
1258:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1259:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 2 waveform to active or inactive level.
1260:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
1261:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1262:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1263:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1264:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
1265:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
1266:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1267:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1268:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1269:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1270:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1271:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1272:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1273:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1274:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1275:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1276:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1277:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2M Bits */
1278:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
1279:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1280:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
1281:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1282:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1283:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1284:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1285:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1286:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 3 waveform to active or inactive level.
1287:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1288:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1289:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1290:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1291:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
1292:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
1293:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1294:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1295:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1296:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1297:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1298:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1299:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1300:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1301:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1302:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1303:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1304:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1M Bits */
1305:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
1306:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1307:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
1308:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1309:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1310:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1311:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1312:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1313:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 4 waveform to active or inactive level.
1314:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1315:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1316:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1317:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1318:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
1319:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
1320:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1321:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1322:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1323:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1324:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1325:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1326:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1327:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1328:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1329:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1330:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2M Bits */
1331:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
1332:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1333:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
1334:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1335:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1336:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1337:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1338:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1339:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
1340:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIMx peripheral
1341:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1342:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Capture Compare Preload Control bit
1343:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
1344:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1345:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1346:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
1347:.\StdPeriphLib\src/stm32f0xx_tim.c **** { 
1348:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1349:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1350:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1351:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
1352:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
1353:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the CCPC Bit */
1354:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
1355:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
1356:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
1357:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
1358:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the CCPC Bit */
1359:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
1360:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
1361:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1362:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1363:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1364:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1365:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
1366:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
1367:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1368:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1369:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1370:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1371:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1372:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1373:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1374:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1375:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1376:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1377:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1378:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1379:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1380:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1381:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1382:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1PE Bit */
1383:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
1384:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1385:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCPreload;
1386:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1387:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1388:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1389:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1390:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1391:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
1392:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 and 15 to select the TIM peripheral.
1393:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1394:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1395:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1396:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1397:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1398:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1399:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1400:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1401:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1402:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1403:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1404:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1405:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1406:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1407:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1408:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2PE Bit */
1409:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
1410:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1411:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
1412:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1413:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1414:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1415:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1416:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1417:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
1418:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1419:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1420:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1421:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1422:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1423:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1424:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1425:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1426:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1427:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1428:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1429:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1430:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1431:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1432:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1433:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1434:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1435:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC3PE Bit */
1436:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
1437:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1438:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCPreload;
1439:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1440:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1441:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1442:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1443:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1444:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
1445:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1446:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1447:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1448:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1449:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1450:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1451:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1452:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1453:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1454:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1455:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1456:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1457:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1458:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1459:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1460:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1461:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1462:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC4PE Bit */
1463:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
1464:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1465:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
1466:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1467:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1468:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1469:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1470:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1471:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 1 Fast feature.
1472:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1473:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
1474:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1475:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1476:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1477:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1478:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1479:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1480:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1481:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1482:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1483:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1484:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1485:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1486:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1487:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1488:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1489:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1490:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1FE Bit */
1491:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
1492:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1493:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCFast;
1494:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
1495:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1496:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1497:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1498:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1499:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 2 Fast feature.
1500:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1501:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1502:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1503:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1504:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1505:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1506:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1507:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1508:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1509:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1510:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1511:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1512:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1513:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1514:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1515:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1516:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1517:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1518:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2FE Bit */
1519:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
1520:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1521:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
1522:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
1523:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1524:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1525:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1526:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1527:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 3 Fast feature.
1528:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1529:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1530:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1531:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1532:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1533:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1534:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1535:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1536:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1537:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1538:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1539:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1540:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1541:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1542:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1543:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1544:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1545:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1546:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC3FE Bit */
1547:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
1548:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1549:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCFast;
1550:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1551:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1552:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1553:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1554:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1555:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 4 Fast feature.
1556:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1557:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1558:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1559:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1560:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1561:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1562:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1563:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1564:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1565:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1566:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1567:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1568:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1569:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1570:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1571:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1572:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1573:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1574:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC4FE Bit */
1575:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
1576:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1577:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
1578:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1579:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1580:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1581:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1582:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1583:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF1 signal on an external event
1584:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1585:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1586:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1587:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1588:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1589:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1590:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1591:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1592:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1593:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1594:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1595:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1596:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1597:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1598:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1599:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1600:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1601:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1CE Bit */
1602:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
1603:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1604:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCClear;
1605:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1606:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1607:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1608:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1609:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1610:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF2 signal on an external event
1611:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1612:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1613:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1614:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1615:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1616:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1617:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1618:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1619:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1620:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1621:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1622:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1623:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1624:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1625:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1626:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1627:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1628:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2CE Bit */
1629:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
1630:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1631:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
1632:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1633:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1634:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1635:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1636:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1637:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF3 signal on an external event
1638:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1639:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1640:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1641:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1642:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1643:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1644:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1645:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1646:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1647:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1648:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1649:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1650:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1651:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1652:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1653:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1654:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1655:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC3CE Bit */
1656:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
1657:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1658:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCClear;
1659:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1660:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1661:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1662:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1663:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1664:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF4 signal on an external event
1665:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1666:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1667:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1668:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1669:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1670:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1671:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1672:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1673:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1674:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1675:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1676:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1677:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1678:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1679:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1680:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1681:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1682:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC4CE Bit */
1683:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
1684:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1685:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
1686:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1687:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1688:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1689:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1690:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1691:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 1 polarity.
1692:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1693:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1694:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC1 Polarity
1695:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1696:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1697:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1698:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1699:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1700:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1701:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1702:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1703:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1704:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1705:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1706:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1707:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1708:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1709:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC1P Bit */
1710:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
1711:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCPolarity;
1712:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1713:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1714:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1715:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1716:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1717:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 1N polarity.
1718:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIM peripheral.
1719:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC1N Polarity
1720:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1721:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1722:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1723:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1724:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1725:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1726:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1727:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1728:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1729:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1730:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1731:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
1732:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1733:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC1NP Bit */
1734:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
1735:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
1736:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1737:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1738:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1739:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1740:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1741:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 2 polarity.
1742:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
1743:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1744:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC2 Polarity
1745:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1746:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1747:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1748:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1749:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1750:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1751:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1752:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1753:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1754:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1755:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1756:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1757:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1758:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1759:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC2P Bit */
1760:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
1761:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
1762:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1763:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1764:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1765:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1766:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1767:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 2N polarity.
1768:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1 to select the TIM peripheral.
1769:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC2N Polarity
1770:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1771:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1772:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1773:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1774:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1775:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1776:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1777:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1778:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1779:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1780:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1781:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1782:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1783:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC2NP Bit */
1784:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
1785:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
1786:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1787:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1788:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1789:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1790:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1791:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 3 polarity.
1792:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1793:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1794:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC3 Polarity
1795:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1796:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1797:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1798:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1799:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1800:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1801:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1802:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1803:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1804:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1805:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1806:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1807:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1808:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1809:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC3P Bit */
1810:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
1811:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
1812:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1813:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1814:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1815:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1816:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1817:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 3N polarity.
1818:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1 to select the TIM peripheral.
1819:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC3N Polarity
1820:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1821:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1822:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1823:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1824:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1825:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1826:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1827:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1828:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
1829:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1830:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1831:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1832:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
1833:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1834:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC3NP Bit */
1835:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
1836:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
1837:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1838:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1839:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1840:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1841:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1842:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 4 polarity.
1843:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1844:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1845:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC4 Polarity
1846:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1847:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1848:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1849:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1850:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1851:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1852:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1853:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1854:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1855:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1856:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1857:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1858:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
1859:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1860:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC4P Bit */
1861:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
1862:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
1863:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1864:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1865:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1866:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1867:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1868:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Selects the OCReference Clear source.
1869:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1870:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1871:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_OCReferenceClear: specifies the OCReference Clear source.
1872:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1873:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to
1874:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connecte
1875:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1876:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1877:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
1878:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1879:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1880:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1881:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));
1882:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1883:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the TIM_OCReferenceClear source */
1884:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
1885:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR |=  TIM_OCReferenceClear;
1886:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1887:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1888:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1889:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
1890:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1891:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
1892:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1893:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1894:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1895:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1896:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1897:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1898:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
1899:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
1900:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1901:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1902:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
1903:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1904:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmp = 0;
1905:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1906:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1907:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx)); 
1908:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CCX(TIM_CCx));
1909:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1910:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp = CCER_CCE_SET << TIM_Channel;
1911:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1912:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the CCxE Bit */
1913:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
1914:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1915:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or reset the CCxE Bit */ 
1916:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
1917:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1918:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1919:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1920:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel xN.
1921:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIM peripheral.
1922:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1923:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1924:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1925:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1926:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1927:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
1928:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
1929:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1930:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1931:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
1932:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1933:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmp = 0;
1934:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1935:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1936:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1937:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
1938:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CCXN(TIM_CCxN));
1939:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1940:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp = CCER_CCNE_SET << TIM_Channel;
1941:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1942:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the CCxNE Bit */
1943:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
1944:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1945:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or reset the CCxNE Bit */ 
1946:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
1947:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1948:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1949:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1950:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Selects the TIM peripheral Commutation event.
1951:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 15, 16 or 17 to select the TIMx peripheral
1952:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Commutation event.
1953:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
1955:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1956:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
1957:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
1958:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
1959:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1960:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1961:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
1962:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
1963:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the COM Bit */
1964:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
1965:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
1966:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
1967:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
1968:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the COM Bit */
1969:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
1970:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
1971:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
1972:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1973:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
1974:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
1975:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
1976:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
1977:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group4 Input Capture management functions
1978:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief    Input Capture management functions 
1979:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
1980:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim
1981:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
1982:.\StdPeriphLib\src/stm32f0xx_tim.c ****                ##### Input Capture management functions #####
1983:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
1984:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
1985:.\StdPeriphLib\src/stm32f0xx_tim.c ****           *** TIM Driver: how to use it in Input Capture Mode ***
1986:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
1987:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..] To use the Timer in Input Capture mode, the following steps are mandatory:
1988:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
1989:.\StdPeriphLib\src/stm32f0xx_tim.c ****              function.
1990:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Configure the TIM pins by configuring the corresponding GPIO pins.
1991:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Configure the Time base unit as described in the first part of this 
1992:.\StdPeriphLib\src/stm32f0xx_tim.c ****              driver, if needed, else the Timer will run with the default configuration:
1993:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Autoreload value = 0xFFFF.
1994:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Prescaler value = 0x0000.
1995:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Counter mode = Up counting.
1996:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) Clock Division = TIM_CKD_DIV1.
1997:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Fill the TIM_ICInitStruct with the desired parameters including:
1998:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) TIM Channel: TIM_Channel.
1999:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) TIM Input Capture polarity: TIM_ICPolarity.
2000:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) TIM Input Capture selection: TIM_ICSelection.
2001:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) TIM Input Capture Prescaler: TIM_ICPrescaler.
2002:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) TIM Input CApture filter value: TIM_ICFilter.
2003:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Call TIM_ICInit(TIMx, &TIM_ICInitStruct) to configure the desired 
2004:.\StdPeriphLib\src/stm32f0xx_tim.c ****              channel with the corresponding configuration and to measure only 
2005:.\StdPeriphLib\src/stm32f0xx_tim.c ****              frequency or duty cycle of the input signal,or, Call 
2006:.\StdPeriphLib\src/stm32f0xx_tim.c ****              TIM_PWMIConfig(TIMx, &TIM_ICInitStruct) to configure the desired 
2007:.\StdPeriphLib\src/stm32f0xx_tim.c ****              channels with the corresponding configuration and to measure the 
2008:.\StdPeriphLib\src/stm32f0xx_tim.c ****              frequency and the duty cycle of the input signal.
2009:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Enable the NVIC or the DMA to read the measured frequency.
2010:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Enable the corresponding interrupt (or DMA request) to read 
2011:.\StdPeriphLib\src/stm32f0xx_tim.c ****              the Captured value, using the function TIM_ITConfig(TIMx, TIM_IT_CCx)
2012:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)).
2013:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
2014:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Use TIM_GetCapturex(TIMx); to read the captured value.
2015:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..]
2016:.\StdPeriphLib\src/stm32f0xx_tim.c ****         (@) All other functions can be used separately to modify, if needed,
2017:.\StdPeriphLib\src/stm32f0xx_tim.c ****             a specific feature of the Timer. 
2018:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2019:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
2020:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
2021:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2022:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2023:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2024:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Initializes the TIM peripheral according to the specified
2025:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         parameters in the TIM_ICInitStruct.
2026:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2027:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2028:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
2029:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
2030:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
2031:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2032:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2033:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
2034:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2035:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2036:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2037:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
2038:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
2039:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
2040:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
2041:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
2042:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2043:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
2044:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2045:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2046:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2047:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2048:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2049:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2050:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2051:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2052:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2053:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
2054:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2055:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2056:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2057:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2058:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2059:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2060:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2061:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2062:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2063:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
2064:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2065:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2066:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI3 Configuration */
2067:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
2068:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2069:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2070:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2071:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2072:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2073:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2074:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2075:.\StdPeriphLib\src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2076:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI4 Configuration */
2077:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2078:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2079:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2080:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2081:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2082:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2083:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2084:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2085:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2086:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_ICInitStruct member with its default value.
2087:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
2088:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         be initialized.
2089:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2090:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2091:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
2092:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2093:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the default configuration */
2094:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
2095:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
2096:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
2097:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
2098:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
2099:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2100:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2101:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2102:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIM peripheral according to the specified
2103:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         parameters in the TIM_ICInitStruct to measure an external PWM signal.
2104:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2105:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2106:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
2107:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
2108:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         peripheral.
2109:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2110:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2111:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
2112:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2113:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
2114:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
2115:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2116:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2117:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Opposite Input Polarity */
2118:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
2119:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2120:.\StdPeriphLib\src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
2121:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2122:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2123:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2124:.\StdPeriphLib\src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Rising;
2125:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2126:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Opposite Input */
2127:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
2128:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2129:.\StdPeriphLib\src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
2130:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2131:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2132:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2133:.\StdPeriphLib\src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_DirectTI;
2134:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2135:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
2136:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2137:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2138:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2139:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2140:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2141:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2142:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2143:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2144:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2145:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2146:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2147:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2148:.\StdPeriphLib\src/stm32f0xx_tim.c ****   { 
2149:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2150:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2151:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2152:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2153:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2154:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2155:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2156:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2157:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2158:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2159:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2160:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2161:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2162:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 1 value.
2163:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2164:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2165:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval Capture Compare 1 Register value.
2166:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2167:.\StdPeriphLib\src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
2168:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2169:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2170:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2171:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2172:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the Capture 1 Register value */
2173:.\StdPeriphLib\src/stm32f0xx_tim.c ****   return TIMx->CCR1;
2174:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2175:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2176:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2177:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 2 value.
2178:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2179:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval Capture Compare 2 Register value.
2180:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2181:.\StdPeriphLib\src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
2182:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2183:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2184:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2185:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2186:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the Capture 2 Register value */
2187:.\StdPeriphLib\src/stm32f0xx_tim.c ****   return TIMx->CCR2;
2188:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2189:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2190:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2191:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 3 value.
2192:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2193:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2194:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval Capture Compare 3 Register value.
2195:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2196:.\StdPeriphLib\src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
2197:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2198:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2199:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
2200:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2201:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the Capture 3 Register value */
2202:.\StdPeriphLib\src/stm32f0xx_tim.c ****   return TIMx->CCR3;
2203:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2204:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2205:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2206:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 4 value.
2207:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2208:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2209:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval Capture Compare 4 Register value.
2210:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2211:.\StdPeriphLib\src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
2212:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2213:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2214:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2215:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2216:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the Capture 4 Register value */
2217:.\StdPeriphLib\src/stm32f0xx_tim.c ****   return TIMx->CCR4;
2218:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2219:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2220:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2221:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 1 prescaler.
2222:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2223:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2224:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
2225:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2226:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2227:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2228:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2229:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2230:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2231:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2232:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2233:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2234:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2235:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2236:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2237:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2238:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the IC1PSC Bits */
2239:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
2240:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the IC1PSC value */
2241:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
2242:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2243:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2244:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2245:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 2 prescaler.
2246:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2247:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2248:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
2249:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2250:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2251:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2252:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2253:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2254:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2255:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2256:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2257:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2258:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2259:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2260:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2261:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2262:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the IC2PSC Bits */
2263:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
2264:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the IC2PSC value */
2265:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
2266:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2267:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2268:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2269:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 3 prescaler.
2270:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2271:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2272:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
2273:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2274:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2275:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2276:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2277:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2278:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2279:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2280:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2281:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2282:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2283:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2284:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2285:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2286:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the IC3PSC Bits */
2287:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
2288:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the IC3PSC value */
2289:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
2290:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2291:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2292:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2293:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 4 prescaler.
2294:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2295:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2296:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
2297:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2298:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2299:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2300:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2301:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2302:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2303:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2304:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2305:.\StdPeriphLib\src/stm32f0xx_tim.c **** {  
2306:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2307:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2308:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2309:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2310:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the IC4PSC Bits */
2311:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
2312:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the IC4PSC value */
2313:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
2314:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2315:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2316:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2317:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
2318:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2319:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2320:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group5 Interrupts DMA and flags management functions
2321:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief    Interrupts, DMA and flags management functions 
2322:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
2323:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim
2324:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
2325:.\StdPeriphLib\src/stm32f0xx_tim.c ****           ##### Interrupts, DMA and flags management functions #####
2326:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
2327:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2328:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
2329:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
2330:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2331:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2332:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2333:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the specified TIM interrupts.
2334:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIMx peripheral.
2335:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2336:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2337:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2338:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
2339:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2340:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2341:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2342:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2343:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2344:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2345:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2346:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2347:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2348:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * 
2349:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update interrupt.
2350:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1,TIM_IT_CC2 or TIM_IT_Trigger. 
2351:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2352:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2353:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2354:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *       
2355:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIM interrupts.
2356:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2357:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2358:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2359:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
2360:.\StdPeriphLib\src/stm32f0xx_tim.c **** {  
2361:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2362:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2363:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2364:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2365:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2366:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2367:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2368:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Enable the Interrupt sources */
2369:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_IT;
2370:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2371:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2372:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2373:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Disable the Interrupt sources */
2374:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
2375:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2376:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2377:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2378:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2379:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx event to be generate by software.
2380:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the 
2381:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         TIM peripheral.
2382:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2383:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2384:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2385:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_EventSource: specifies the event source.
2386:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one or more of the following values:  
2387:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Update: Timer update Event source
2388:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
2389:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
2390:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
2391:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
2392:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_COM: Timer COM event source  
2393:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Trigger: Timer Trigger Event source
2394:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Break: Timer Break event source
2395:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2396:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update event.  
2397:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1.
2398:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *             
2399:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2400:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2401:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
2402:.\StdPeriphLib\src/stm32f0xx_tim.c **** { 
2403:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2404:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2405:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource)); 
2406:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the event sources */
2407:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_EventSource;
2408:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2409:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2410:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2411:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Checks whether the specified TIM flag is set or not.
2412:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2413:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2414:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2415:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2416:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_FLAG: specifies the flag to check.
2417:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2418:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2419:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2420:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2421:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2422:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2423:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2424:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2425:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2426:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2427:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2428:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2429:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2430:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2431:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2432:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1, TIM_FLAG_CC2 or TIM_FLAG_Trigger.
2433:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2434:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_Break is used only with TIM1 and TIM15. 
2435:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_COM is used only with TIM1 TIM15, TIM16 and TIM17.
2436:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2437:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval The new state of TIM_FLAG (SET or RESET).
2438:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2439:.\StdPeriphLib\src/stm32f0xx_tim.c **** FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2440:.\StdPeriphLib\src/stm32f0xx_tim.c **** { 
2441:.\StdPeriphLib\src/stm32f0xx_tim.c ****   ITStatus bitstatus = RESET; 
2442:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
2443:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2444:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2445:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
2446:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2447:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
2448:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2449:.\StdPeriphLib\src/stm32f0xx_tim.c ****     bitstatus = SET;
2450:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2451:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2452:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2453:.\StdPeriphLib\src/stm32f0xx_tim.c ****     bitstatus = RESET;
2454:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2455:.\StdPeriphLib\src/stm32f0xx_tim.c ****   return bitstatus;
2456:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2457:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2458:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2459:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Clears the TIMx's pending flags.
2460:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2461:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2462:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2463:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2464:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_FLAG: specifies the flag bit to clear.
2465:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2466:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2467:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2468:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2469:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2470:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2471:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2472:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2473:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2474:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2475:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2476:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2477:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2478:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2479:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2480:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1,TIM_FLAG_CC2 or 
2481:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         TIM_FLAG_Trigger. 
2482:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2483:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_Break is used only with TIM1 and TIM15. 
2484:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2485:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2486:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2487:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2488:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2489:.\StdPeriphLib\src/stm32f0xx_tim.c **** {  
2490:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2491:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2492:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
2493:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
2494:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Clear the flags */
2495:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
2496:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2497:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2498:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2499:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Checks whether the TIM interrupt has occurred or not.
2500:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2501:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2502:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2503:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2504:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupt source to check.
2505:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2506:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2507:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2508:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2509:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2510:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2511:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2512:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2513:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2514:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2515:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2516:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2517:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2518:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2519:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2520:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2521:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval The new state of the TIM_IT(SET or RESET).
2522:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2523:.\StdPeriphLib\src/stm32f0xx_tim.c **** ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2524:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2525:.\StdPeriphLib\src/stm32f0xx_tim.c ****   ITStatus bitstatus = RESET;  
2526:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
2527:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2528:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2529:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2530:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_GET_IT(TIM_IT));
2531:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
2532:.\StdPeriphLib\src/stm32f0xx_tim.c ****   itstatus = TIMx->SR & TIM_IT;
2533:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2534:.\StdPeriphLib\src/stm32f0xx_tim.c ****   itenable = TIMx->DIER & TIM_IT;
2535:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
2536:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2537:.\StdPeriphLib\src/stm32f0xx_tim.c ****     bitstatus = SET;
2538:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2539:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2540:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2541:.\StdPeriphLib\src/stm32f0xx_tim.c ****     bitstatus = RESET;
2542:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2543:.\StdPeriphLib\src/stm32f0xx_tim.c ****   return bitstatus;
2544:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2545:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2546:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2547:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Clears the TIMx's interrupt pending bits.
2548:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2549:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2550:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2551:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2552:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the pending bit to clear.
2553:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2554:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM1 update Interrupt source
2555:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2556:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2557:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2558:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2559:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2560:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2561:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2562:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2563:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2564:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2565:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2566:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2567:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2568:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2569:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2570:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2571:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2572:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2573:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2574:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2575:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2576:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
2577:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Clear the IT pending Bit */
2578:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
2579:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2580:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2581:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2582:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx's DMA interface.
2583:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 15, 16 or 17  to select the TIM peripheral.
2584:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2585:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_DMABase: DMA Base address.
2586:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2587:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CR1
2588:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CR2
2589:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_SMCR
2590:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_DIER
2591:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_SR
2592:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_EGR
2593:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCMR1
2594:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCMR2
2595:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCER
2596:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CNT
2597:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_PSC
2598:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_ARR
2599:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR1
2600:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR2
2601:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR3 
2602:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR4
2603:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_DCR
2604:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_OR
2605:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
2606:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
2607:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2608:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2609:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
2610:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2611:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2612:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2613:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
2614:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
2615:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the DMA Base and the DMA Burst Length */
2616:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
2617:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2618:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2619:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2620:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx's DMA Requests.
2621:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 15, 16 or 17 to select the TIM peripheral. 
2622:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2623:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2624:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2625:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_DMASource: specifies the DMA Request sources.
2626:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2627:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_Update: TIM update Interrupt source
2628:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
2629:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
2630:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
2631:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
2632:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
2633:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_Trigger: TIM Trigger DMA source
2634:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the DMA Request sources.
2635:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2636:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2637:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2638:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
2639:.\StdPeriphLib\src/stm32f0xx_tim.c **** { 
2640:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2641:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST10_PERIPH(TIMx));
2642:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
2643:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2644:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2645:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2646:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2647:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Enable the DMA sources */
2648:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
2649:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2650:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2651:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2652:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Disable the DMA sources */
2653:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
2654:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2655:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2656:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2657:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2658:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx peripheral Capture Compare DMA source.
2659:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 15, 16 or 17  to select the TIM peripheral.
2660:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2661:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Capture Compare DMA source
2662:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2663:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2664:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2665:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
2666:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2667:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2668:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
2669:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2670:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2671:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2672:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2673:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the CCDS Bit */
2674:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
2675:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2676:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2677:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2678:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the CCDS Bit */
2679:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
2680:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2681:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2682:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2683:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2684:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
2685:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2686:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2687:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group6 Clocks management functions
2688:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief    Clocks management functions
2689:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
2690:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim
2691:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
2692:.\StdPeriphLib\src/stm32f0xx_tim.c ****                      ##### Clocks management functions #####
2693:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
2694:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2695:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
2696:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
2697:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2698:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2699:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2700:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx internal Clock
2701:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2702:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2703:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2704:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2705:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
2706:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2707:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2708:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2709:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Disable slave mode to clock the prescaler directly with the internal clock */
2710:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
2711:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2712:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2713:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2714:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Internal Trigger as External Clock
2715:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2716:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2717:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ITRSource: Trigger source.
2718:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2719:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR0: Internal Trigger 0
2720:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR1: Internal Trigger 1
2721:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR2: Internal Trigger 2
2722:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR3: Internal Trigger 3
2723:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2724:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2725:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2726:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2727:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2728:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2729:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
2730:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Internal Trigger */
2731:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
2732:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2733:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2734:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2735:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2736:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2737:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Trigger as External Clock
2738:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2739:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2740:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_TIxExternalCLKSource: Trigger source.
2741:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2742:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
2743:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
2744:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
2745:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: specifies the TIx Polarity.
2746:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2747:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
2748:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
2749:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  ICFilter: specifies the filter value.
2750:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x0 and 0xF.
2751:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2752:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2753:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
2754:.\StdPeriphLib\src/stm32f0xx_tim.c ****                                 uint16_t TIM_ICPolarity, uint16_t ICFilter)
2755:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2756:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2757:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2758:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
2759:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(ICFilter));
2760:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2761:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure the Timer Input Clock Source */
2762:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
2763:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2764:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2765:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2766:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
2767:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
2768:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2769:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
2770:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Trigger source */
2771:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
2772:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2773:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2774:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2775:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2776:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2777:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the External clock Mode1
2778:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2779:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2780:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2781:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2782:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2783:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2784:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2785:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2786:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2787:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2788:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2789:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2790:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2791:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2792:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2793:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2794:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPo
2795:.\StdPeriphLib\src/stm32f0xx_tim.c ****                              uint16_t ExtTRGFilter)
2796:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2797:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
2798:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2799:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2800:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2801:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2802:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2803:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2804:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2805:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure the ETR Clock source */
2806:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2807:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2808:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
2809:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2810:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the SMS Bits */
2811:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
2812:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2813:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
2814:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Trigger selection : ETRF */
2815:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
2816:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
2817:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
2818:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2819:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2820:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2821:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2822:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the External clock Mode2
2823:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2824:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2825:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2826:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2827:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2828:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2829:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2830:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2831:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2832:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2833:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2834:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2835:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2836:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2837:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2838:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2839:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
2840:.\StdPeriphLib\src/stm32f0xx_tim.c ****                              uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2841:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2842:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2843:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2844:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2845:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2846:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2847:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2848:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure the ETR Clock source */
2849:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2850:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable the External clock mode2 */
2851:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
2852:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2853:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2854:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2855:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
2856:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2857:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2858:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group7 Synchronization management functions
2859:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief    Synchronization management functions 
2860:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
2861:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim
2862:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
2863:.\StdPeriphLib\src/stm32f0xx_tim.c ****                ##### Synchronization management functions #####
2864:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
2865:.\StdPeriphLib\src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in synchronization Mode ***
2866:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
2867:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..] Case of two/several Timers
2868:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Configure the Master Timers using the following functions:
2869:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx,
2870:.\StdPeriphLib\src/stm32f0xx_tim.c ****                   uint16_t TIM_TRGOSource).
2871:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx,
2872:.\StdPeriphLib\src/stm32f0xx_tim.c ****                   uint16_t TIM_MasterSlaveMode);  
2873:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Configure the Slave Timers using the following functions: 
2874:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, 
2875:.\StdPeriphLib\src/stm32f0xx_tim.c ****                   uint16_t TIM_InputTriggerSource);  
2876:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
2877:.\StdPeriphLib\src/stm32f0xx_tim.c ****     [..] Case of Timers and external trigger(ETR pin)
2878:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Configure the Etrenal trigger using this function:
2879:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
2880:.\StdPeriphLib\src/stm32f0xx_tim.c ****                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);
2881:.\StdPeriphLib\src/stm32f0xx_tim.c ****          (#) Configure the Slave Timers using the following functions:
2882:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx,
2883:.\StdPeriphLib\src/stm32f0xx_tim.c ****                   uint16_t TIM_InputTriggerSource);
2884:.\StdPeriphLib\src/stm32f0xx_tim.c ****              (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
2885:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2886:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
2887:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
2888:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2889:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2890:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Selects the Input Trigger source
2891:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2892:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2893:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_InputTriggerSource: The Input Trigger source.
2894:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2895:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
2896:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2897:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
2898:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2899:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
2900:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
2901:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
2902:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ETRF: External Trigger input
2903:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2904:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2905:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2906:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2907:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
2908:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2909:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2910:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
2911:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
2912:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2913:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
2914:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2915:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the TS Bits */
2916:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
2917:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Input Trigger source */
2918:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
2919:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
2920:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2921:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2922:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2923:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2924:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx Trigger Output Mode.
2925:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, or 15 to select the TIM peripheral.
2926:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2927:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2928:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2929:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_TRGOSource: specifies the Trigger Output source.
2930:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2931:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2932:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *   - For all TIMx
2933:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigge
2934:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output (TR
2935:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Update: The update event is selected as the trigger output (TRGO
2936:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2937:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *   - For all TIMx except TIM6 and TIM7
2938:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF fl
2939:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *                                     is to be set, as soon as a capture or compare match occurs 
2940:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output (TRGO).
2941:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output (TRGO).
2942:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output (TRGO).
2943:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
2944:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *
2945:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2946:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2947:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
2948:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2949:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2950:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST9_PERIPH(TIMx));
2951:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
2952:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2953:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the MMS Bits */
2954:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
2955:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the TRGO source */
2956:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
2957:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2958:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2959:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2960:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx Slave Mode.
2961:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2962:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2963:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
2964:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2965:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal (TRGI) re-initi
2966:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *                                      the counter and triggers an update of the registers.
2967:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (
2968:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRG
2969:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the 
2970:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2971:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2972:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
2973:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2974:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2975:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
2976:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
2977:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
2978:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the SMS Bits */
2979:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
2980:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Slave Mode */
2981:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
2982:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
2983:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
2984:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
2985:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Sets or Resets the TIMx Master/Slave Mode.
2986:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2987:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2988:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
2989:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2990:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
2991:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *                                             and its slaves (through TRGO).
2992:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Disable: No action
2993:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
2994:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
2995:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
2996:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
2997:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
2998:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2999:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
3000:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
3001:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the MSM Bit */
3002:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
3003:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
3004:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the MSM Bit */
3005:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
3006:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
3007:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3008:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3009:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
3010:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3011:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3012:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
3013:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3014:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
3015:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
3016:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
3017:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
3018:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
3019:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3020:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
3021:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
3022:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
3023:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
3024:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
3025:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3026:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
3027:.\StdPeriphLib\src/stm32f0xx_tim.c ****                    uint16_t ExtTRGFilter)
3028:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
3029:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
3030:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
3031:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
3032:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3033:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
3034:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
3035:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
3036:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
3037:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3038:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the ETR Bits */
3039:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr &= SMCR_ETR_MASK;
3040:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
3041:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
3042:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
3043:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3044:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
3045:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3046:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3047:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
3048:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3049:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3050:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group8 Specific interface management functions
3051:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief    Specific interface management functions 
3052:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
3053:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim
3054:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
3055:.\StdPeriphLib\src/stm32f0xx_tim.c ****              ##### Specific interface management functions #####
3056:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
3057:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3058:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
3059:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
3060:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3061:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3062:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3063:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Encoder Interface.
3064:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2 or 3 to select the TIM peripheral.
3065:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3066:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
3067:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3068:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
3069:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
3070:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
3071:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *                                       on the level of the other input.
3072:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_IC1Polarity: specifies the IC1 Polarity
3073:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
3074:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3075:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3076:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_IC2Polarity: specifies the IC2 Polarity
3077:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
3078:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3079:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3080:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
3081:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3082:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
3083:.\StdPeriphLib\src/stm32f0xx_tim.c ****                                 uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
3084:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
3085:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
3086:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
3087:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
3088:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
3089:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
3090:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3091:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
3092:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
3093:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
3094:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
3095:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
3096:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3097:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
3098:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
3099:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
3100:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3101:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the encoder Mode */
3102:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
3103:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
3104:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
3105:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
3106:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
3107:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the TI1 and the TI2 Polarities */
3108:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_C
3109:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
3110:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
3111:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3112:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
3113:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
3114:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
3115:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
3116:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
3117:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3118:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3119:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx's Hall sensor interface.
3120:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3121:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3122:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx Hall sensor interface.
3123:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
3124:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
3125:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3126:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
3127:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
3128:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
3129:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3130:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3131:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
3132:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
3133:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
3134:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the TI1S Bit */
3135:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
3136:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
3137:.\StdPeriphLib\src/stm32f0xx_tim.c ****   else
3138:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
3139:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the TI1S Bit */
3140:.\StdPeriphLib\src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
3141:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
3142:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
3143:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3144:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3145:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
3146:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3147:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3148:.\StdPeriphLib\src/stm32f0xx_tim.c **** /** @defgroup TIM_Group9 Specific remapping management function
3149:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *  @brief   Specific remapping management function
3150:.\StdPeriphLib\src/stm32f0xx_tim.c ****  *
3151:.\StdPeriphLib\src/stm32f0xx_tim.c **** @verbatim
3152:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
3153:.\StdPeriphLib\src/stm32f0xx_tim.c ****                ##### Specific remapping management function #####
3154:.\StdPeriphLib\src/stm32f0xx_tim.c ****  ===============================================================================
3155:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3156:.\StdPeriphLib\src/stm32f0xx_tim.c **** @endverbatim
3157:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @{
3158:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3159:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3160:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configures the TIM14 Remapping input Capabilities.
3161:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 14 to select the TIM peripheral.
3162:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_Remap: specifies the TIM input reampping source.
3163:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3164:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM14_GPIO: TIM14 Channel 1 is connected to GPIO.
3165:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM14_RTC_CLK: TIM14 Channel 1 is connected to RTC input clock.
3166:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *                                RTC input clock can be LSE, LSI or HSE/div128.
3167:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM14_HSE_DIV32: TIM14 Channel 1 is connected to HSE/32 clock.  
3168:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM14_MCO: TIM14 Channel 1 is connected to MCO clock.  
3169:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *                            MCO clock can be HSI14, SYSCLK, HSI, HSE or PLL/2.  
3170:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
3171:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3172:.\StdPeriphLib\src/stm32f0xx_tim.c **** void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
3173:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
3174:.\StdPeriphLib\src/stm32f0xx_tim.c ****  /* Check the parameters */
3175:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST11_PERIPH(TIMx));
3176:.\StdPeriphLib\src/stm32f0xx_tim.c ****   assert_param(IS_TIM_REMAP(TIM_Remap));
3177:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3178:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Timer remapping configuration */
3179:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->OR =  TIM_Remap;
3180:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
3181:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3182:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3183:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @}
3184:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3185:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3186:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3187:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configure the TI1 as Input.
3188:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
3189:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3190:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3191:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3192:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3193:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3194:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3195:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3196:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
3197:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
3198:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
3199:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3200:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3201:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
3202:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3203:.\StdPeriphLib\src/stm32f0xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3204:.\StdPeriphLib\src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3205:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
  25              		.loc 1 3205 0
  26              		.cfi_startproc
  27              	.LVL0:
  28 0000 70B5     		push	{r4, r5, r6, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 16
  31              		.cfi_offset 4, -16
  32              		.cfi_offset 5, -12
  33              		.cfi_offset 6, -8
  34              		.cfi_offset 14, -4
  35              	.LVL1:
3206:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0;
3207:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
3208:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  36              		.loc 1 3208 0
  37 0002 048C     		ldrh	r4, [r0, #32]
  38 0004 0125     		mov	r5, #1
  39 0006 AC43     		bic	r4, r5
  40 0008 0484     		strh	r4, [r0, #32]
3209:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
  41              		.loc 1 3209 0
  42 000a 048B     		ldrh	r4, [r0, #24]
  43              	.LVL2:
3210:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
  44              		.loc 1 3210 0
  45 000c 058C     		ldrh	r5, [r0, #32]
  46              	.LVL3:
3211:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3212:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
  47              		.loc 1 3212 0
  48 000e F326     		mov	r6, #243
  49 0010 B443     		bic	r4, r6
  50              	.LVL4:
  51 0012 2243     		orr	r2, r4
  52              	.LVL5:
3213:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  53              		.loc 1 3213 0
  54 0014 1B01     		lsl	r3, r3, #4
  55              	.LVL6:
  56 0016 1A43     		orr	r2, r3
  57 0018 92B2     		uxth	r2, r2
  58              	.LVL7:
3214:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
3215:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC1E Bit */
3216:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  59              		.loc 1 3216 0
  60 001a 0A23     		mov	r3, #10
  61 001c 9D43     		bic	r5, r3
  62              	.LVL8:
  63 001e 2B1C     		mov	r3, r5
  64 0020 0124     		mov	r4, #1
  65 0022 2343     		orr	r3, r4
3217:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  66              		.loc 1 3217 0
  67 0024 1943     		orr	r1, r3
  68              	.LVL9:
3218:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3219:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
  69              		.loc 1 3219 0
  70 0026 0283     		strh	r2, [r0, #24]
3220:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
  71              		.loc 1 3220 0
  72 0028 0184     		strh	r1, [r0, #32]
3221:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
  73              		.loc 1 3221 0
  74              		@ sp needed
  75 002a 70BD     		pop	{r4, r5, r6, pc}
  76              		.cfi_endproc
  77              	.LFE122:
  79              		.section	.text.TI2_Config,"ax",%progbits
  80              		.align	2
  81              		.code	16
  82              		.thumb_func
  84              	TI2_Config:
  85              	.LFB123:
3222:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3223:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3224:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configure the TI2 as Input.
3225:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
3226:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
3227:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3228:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3229:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3230:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3231:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3232:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3233:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
3234:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
3235:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
3236:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3237:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3238:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
3239:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3240:.\StdPeriphLib\src/stm32f0xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3241:.\StdPeriphLib\src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3242:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
  86              		.loc 1 3242 0
  87              		.cfi_startproc
  88              	.LVL10:
  89 0000 70B5     		push	{r4, r5, r6, lr}
  90              	.LCFI1:
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 4, -16
  93              		.cfi_offset 5, -12
  94              		.cfi_offset 6, -8
  95              		.cfi_offset 14, -4
  96              	.LVL11:
3243:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
3244:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
3245:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  97              		.loc 1 3245 0
  98 0002 048C     		ldrh	r4, [r0, #32]
  99 0004 1025     		mov	r5, #16
 100 0006 AC43     		bic	r4, r5
 101 0008 0484     		strh	r4, [r0, #32]
3246:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 102              		.loc 1 3246 0
 103 000a 068B     		ldrh	r6, [r0, #24]
 104              	.LVL12:
3247:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 105              		.loc 1 3247 0
 106 000c 058C     		ldrh	r5, [r0, #32]
 107              	.LVL13:
3248:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
3249:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3250:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
3251:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
3252:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 108              		.loc 1 3252 0
 109 000e 1202     		lsl	r2, r2, #8
 110              	.LVL14:
3250:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 111              		.loc 1 3250 0
 112 0010 084C     		ldr	r4, .L3
 113 0012 3440     		and	r4, r6
 114 0014 2243     		orr	r2, r4
 115 0016 92B2     		uxth	r2, r2
3251:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 116              		.loc 1 3251 0
 117 0018 1B03     		lsl	r3, r3, #12
 118              	.LVL15:
 119              		.loc 1 3252 0
 120 001a 1343     		orr	r3, r2
 121 001c 9BB2     		uxth	r3, r3
 122              	.LVL16:
3253:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC2E Bit */
3254:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 123              		.loc 1 3254 0
 124 001e A022     		mov	r2, #160
 125 0020 9543     		bic	r5, r2
 126              	.LVL17:
 127 0022 2A1C     		mov	r2, r5
 128 0024 1024     		mov	r4, #16
 129 0026 2243     		orr	r2, r4
3248:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
 130              		.loc 1 3248 0
 131 0028 0901     		lsl	r1, r1, #4
 132              	.LVL18:
3255:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 133              		.loc 1 3255 0
 134 002a 1143     		orr	r1, r2
 135 002c 89B2     		uxth	r1, r1
 136              	.LVL19:
3256:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3257:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 137              		.loc 1 3257 0
 138 002e 0383     		strh	r3, [r0, #24]
3258:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 139              		.loc 1 3258 0
 140 0030 0184     		strh	r1, [r0, #32]
3259:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 141              		.loc 1 3259 0
 142              		@ sp needed
 143 0032 70BD     		pop	{r4, r5, r6, pc}
 144              	.L4:
 145              		.align	2
 146              	.L3:
 147 0034 FF0C0000 		.word	3327
 148              		.cfi_endproc
 149              	.LFE123:
 151              		.section	.text.TIM_DeInit,"ax",%progbits
 152              		.align	2
 153              		.global	TIM_DeInit
 154              		.code	16
 155              		.thumb_func
 157              	TIM_DeInit:
 158              	.LFB33:
 195:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 159              		.loc 1 195 0
 160              		.cfi_startproc
 161              	.LVL20:
 162 0000 10B5     		push	{r4, lr}
 163              	.LCFI2:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 4, -8
 166              		.cfi_offset 14, -4
 199:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 167              		.loc 1 199 0
 168 0002 3B4B     		ldr	r3, .L15
 169 0004 9842     		cmp	r0, r3
 170 0006 0AD1     		bne	.L6
 201:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 171              		.loc 1 201 0
 172 0008 8024     		mov	r4, #128
 173 000a 2401     		lsl	r4, r4, #4
 174 000c 201C     		mov	r0, r4
 175              	.LVL21:
 176 000e 0121     		mov	r1, #1
 177 0010 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 178              	.LVL22:
 202:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }     
 179              		.loc 1 202 0
 180 0014 201C     		mov	r0, r4
 181 0016 0021     		mov	r1, #0
 182 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 183              	.LVL23:
 184 001c 67E0     		b	.L5
 185              	.LVL24:
 186              	.L6:
 204:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 187              		.loc 1 204 0
 188 001e 8023     		mov	r3, #128
 189 0020 DB05     		lsl	r3, r3, #23
 190 0022 9842     		cmp	r0, r3
 191 0024 08D1     		bne	.L8
 206:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 192              		.loc 1 206 0
 193 0026 0120     		mov	r0, #1
 194              	.LVL25:
 195 0028 0121     		mov	r1, #1
 196 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 197              	.LVL26:
 207:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 198              		.loc 1 207 0
 199 002e 0120     		mov	r0, #1
 200 0030 0021     		mov	r1, #0
 201 0032 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 202              	.LVL27:
 203 0036 5AE0     		b	.L5
 204              	.LVL28:
 205              	.L8:
 209:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 206              		.loc 1 209 0
 207 0038 2E4B     		ldr	r3, .L15+4
 208 003a 9842     		cmp	r0, r3
 209 003c 08D1     		bne	.L9
 211:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 210              		.loc 1 211 0
 211 003e 0220     		mov	r0, #2
 212              	.LVL29:
 213 0040 0121     		mov	r1, #1
 214 0042 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 215              	.LVL30:
 212:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 216              		.loc 1 212 0
 217 0046 0220     		mov	r0, #2
 218 0048 0021     		mov	r1, #0
 219 004a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 220              	.LVL31:
 221 004e 4EE0     		b	.L5
 222              	.LVL32:
 223              	.L9:
 214:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 224              		.loc 1 214 0
 225 0050 294B     		ldr	r3, .L15+8
 226 0052 9842     		cmp	r0, r3
 227 0054 08D1     		bne	.L10
 216:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 228              		.loc 1 216 0
 229 0056 1020     		mov	r0, #16
 230              	.LVL33:
 231 0058 0121     		mov	r1, #1
 232 005a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 233              	.LVL34:
 217:.\StdPeriphLib\src/stm32f0xx_tim.c ****   } 
 234              		.loc 1 217 0
 235 005e 1020     		mov	r0, #16
 236 0060 0021     		mov	r1, #0
 237 0062 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 238              	.LVL35:
 239 0066 42E0     		b	.L5
 240              	.LVL36:
 241              	.L10:
 219:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 242              		.loc 1 219 0
 243 0068 244B     		ldr	r3, .L15+12
 244 006a 9842     		cmp	r0, r3
 245 006c 08D1     		bne	.L11
 221:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 246              		.loc 1 221 0
 247 006e 2020     		mov	r0, #32
 248              	.LVL37:
 249 0070 0121     		mov	r1, #1
 250 0072 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 251              	.LVL38:
 222:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 252              		.loc 1 222 0
 253 0076 2020     		mov	r0, #32
 254 0078 0021     		mov	r1, #0
 255 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 256              	.LVL39:
 257 007e 36E0     		b	.L5
 258              	.LVL40:
 259              	.L11:
 224:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {       
 260              		.loc 1 224 0
 261 0080 1F4B     		ldr	r3, .L15+16
 262 0082 9842     		cmp	r0, r3
 263 0084 0AD1     		bne	.L12
 226:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 264              		.loc 1 226 0
 265 0086 8024     		mov	r4, #128
 266 0088 6400     		lsl	r4, r4, #1
 267 008a 201C     		mov	r0, r4
 268              	.LVL41:
 269 008c 0121     		mov	r1, #1
 270 008e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 271              	.LVL42:
 227:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }        
 272              		.loc 1 227 0
 273 0092 201C     		mov	r0, r4
 274 0094 0021     		mov	r1, #0
 275 0096 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 276              	.LVL43:
 277 009a 28E0     		b	.L5
 278              	.LVL44:
 279              	.L12:
 229:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 280              		.loc 1 229 0
 281 009c 194B     		ldr	r3, .L15+20
 282 009e 9842     		cmp	r0, r3
 283 00a0 0AD1     		bne	.L13
 231:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 284              		.loc 1 231 0
 285 00a2 8024     		mov	r4, #128
 286 00a4 6402     		lsl	r4, r4, #9
 287 00a6 201C     		mov	r0, r4
 288              	.LVL45:
 289 00a8 0121     		mov	r1, #1
 290 00aa FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 291              	.LVL46:
 232:.\StdPeriphLib\src/stm32f0xx_tim.c ****   } 
 292              		.loc 1 232 0
 293 00ae 201C     		mov	r0, r4
 294 00b0 0021     		mov	r1, #0
 295 00b2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 296              	.LVL47:
 297 00b6 1AE0     		b	.L5
 298              	.LVL48:
 299              	.L13:
 234:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 300              		.loc 1 234 0
 301 00b8 134B     		ldr	r3, .L15+24
 302 00ba 9842     		cmp	r0, r3
 303 00bc 0AD1     		bne	.L14
 236:.\StdPeriphLib\src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 304              		.loc 1 236 0
 305 00be 8024     		mov	r4, #128
 306 00c0 A402     		lsl	r4, r4, #10
 307 00c2 201C     		mov	r0, r4
 308              	.LVL49:
 309 00c4 0121     		mov	r1, #1
 310 00c6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 311              	.LVL50:
 237:.\StdPeriphLib\src/stm32f0xx_tim.c ****   } 
 312              		.loc 1 237 0
 313 00ca 201C     		mov	r0, r4
 314 00cc 0021     		mov	r1, #0
 315 00ce FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 316              	.LVL51:
 317 00d2 0CE0     		b	.L5
 318              	.LVL52:
 319              	.L14:
 241:.\StdPeriphLib\src/stm32f0xx_tim.c ****     {
 320              		.loc 1 241 0
 321 00d4 0D4B     		ldr	r3, .L15+28
 322 00d6 9842     		cmp	r0, r3
 323 00d8 09D1     		bne	.L5
 243:.\StdPeriphLib\src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 324              		.loc 1 243 0
 325 00da 8024     		mov	r4, #128
 326 00dc E402     		lsl	r4, r4, #11
 327 00de 201C     		mov	r0, r4
 328              	.LVL53:
 329 00e0 0121     		mov	r1, #1
 330 00e2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 331              	.LVL54:
 244:.\StdPeriphLib\src/stm32f0xx_tim.c ****     }  
 332              		.loc 1 244 0
 333 00e6 201C     		mov	r0, r4
 334 00e8 0021     		mov	r1, #0
 335 00ea FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 336              	.LVL55:
 337              	.L5:
 248:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 338              		.loc 1 248 0
 339              		@ sp needed
 340 00ee 10BD     		pop	{r4, pc}
 341              	.L16:
 342              		.align	2
 343              	.L15:
 344 00f0 002C0140 		.word	1073818624
 345 00f4 00040040 		.word	1073742848
 346 00f8 00100040 		.word	1073745920
 347 00fc 00140040 		.word	1073746944
 348 0100 00200040 		.word	1073750016
 349 0104 00400140 		.word	1073823744
 350 0108 00440140 		.word	1073824768
 351 010c 00480140 		.word	1073825792
 352              		.cfi_endproc
 353              	.LFE33:
 355              		.section	.text.TIM_TimeBaseInit,"ax",%progbits
 356              		.align	2
 357              		.global	TIM_TimeBaseInit
 358              		.code	16
 359              		.thumb_func
 361              	TIM_TimeBaseInit:
 362              	.LFB34:
 264:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpcr1 = 0;
 363              		.loc 1 264 0
 364              		.cfi_startproc
 365              	.LVL56:
 366 0000 10B5     		push	{r4, lr}
 367              	.LCFI3:
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 4, -8
 370              		.cfi_offset 14, -4
 371              	.LVL57:
 272:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 372              		.loc 1 272 0
 373 0002 0388     		ldrh	r3, [r0]
 374 0004 9BB2     		uxth	r3, r3
 375              	.LVL58:
 274:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 376              		.loc 1 274 0
 377 0006 204A     		ldr	r2, .L26
 378 0008 9042     		cmp	r0, r2
 379 000a 06D0     		beq	.L18
 274:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 380              		.loc 1 274 0 is_stmt 0 discriminator 1
 381 000c 8022     		mov	r2, #128
 382 000e D205     		lsl	r2, r2, #23
 383 0010 9042     		cmp	r0, r2
 384 0012 02D0     		beq	.L18
 274:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 385              		.loc 1 274 0 discriminator 2
 386 0014 1D4A     		ldr	r2, .L26+4
 387 0016 9042     		cmp	r0, r2
 388 0018 31D1     		bne	.L19
 389              	.L18:
 277:.\StdPeriphLib\src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 390              		.loc 1 277 0 is_stmt 1
 391 001a 7022     		mov	r2, #112
 392 001c 9343     		bic	r3, r2
 393              	.LVL59:
 278:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 394              		.loc 1 278 0
 395 001e 4A88     		ldrh	r2, [r1, #2]
 396 0020 1343     		orr	r3, r2
 397              	.LVL60:
 281:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 398              		.loc 1 281 0
 399 0022 1B4A     		ldr	r2, .L26+8
 400 0024 9042     		cmp	r0, r2
 401 0026 19D0     		beq	.L20
 402              	.LVL61:
 285:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 403              		.loc 1 285 0
 404 0028 0A89     		ldrh	r2, [r1, #8]
 405 002a 1A4C     		ldr	r4, .L26+12
 406 002c 2340     		and	r3, r4
 407              	.LVL62:
 408 002e 1343     		orr	r3, r2
 409              	.LVL63:
 288:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 410              		.loc 1 288 0
 411 0030 0380     		strh	r3, [r0]
 291:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
 412              		.loc 1 291 0
 413 0032 4B68     		ldr	r3, [r1, #4]
 414              	.LVL64:
 415 0034 C362     		str	r3, [r0, #44]
 416              	.LVL65:
 294:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 417              		.loc 1 294 0
 418 0036 0B88     		ldrh	r3, [r1]
 419 0038 0385     		strh	r3, [r0, #40]
 296:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 420              		.loc 1 296 0
 421 003a 134B     		ldr	r3, .L26
 422 003c 9842     		cmp	r0, r3
 423 003e 08D0     		beq	.L21
 424              	.L23:
 296:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 425              		.loc 1 296 0 is_stmt 0 discriminator 1
 426 0040 154B     		ldr	r3, .L26+16
 427 0042 9842     		cmp	r0, r3
 428 0044 05D0     		beq	.L21
 296:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 429              		.loc 1 296 0 discriminator 2
 430 0046 154B     		ldr	r3, .L26+20
 431 0048 9842     		cmp	r0, r3
 432 004a 02D0     		beq	.L21
 296:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 433              		.loc 1 296 0 discriminator 3
 434 004c 144B     		ldr	r3, .L26+24
 435 004e 9842     		cmp	r0, r3
 436 0050 01D1     		bne	.L22
 437              	.L21:
 299:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 438              		.loc 1 299 0 is_stmt 1
 439 0052 8B7A     		ldrb	r3, [r1, #10]
 440 0054 0386     		strh	r3, [r0, #48]
 441              	.L22:
 304:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 442              		.loc 1 304 0
 443 0056 0123     		mov	r3, #1
 444 0058 8382     		strh	r3, [r0, #20]
 445 005a 14E0     		b	.L25
 446              	.LVL66:
 447              	.L20:
 288:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 448              		.loc 1 288 0
 449 005c 0C4A     		ldr	r2, .L26+8
 450 005e 1380     		strh	r3, [r2]
 291:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
 451              		.loc 1 291 0
 452 0060 4B68     		ldr	r3, [r1, #4]
 453              	.LVL67:
 454 0062 D362     		str	r3, [r2, #44]
 455              	.LVL68:
 294:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 456              		.loc 1 294 0
 457 0064 0B88     		ldrh	r3, [r1]
 458 0066 1385     		strh	r3, [r2, #40]
 459 0068 F5E7     		b	.L22
 460              	.LVL69:
 461              	.L24:
 285:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 462              		.loc 1 285 0
 463 006a 0A89     		ldrh	r2, [r1, #8]
 464 006c 094C     		ldr	r4, .L26+12
 465 006e 2340     		and	r3, r4
 466              	.LVL70:
 467 0070 1343     		orr	r3, r2
 468              	.LVL71:
 288:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 469              		.loc 1 288 0
 470 0072 0380     		strh	r3, [r0]
 291:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
 471              		.loc 1 291 0
 472 0074 4B68     		ldr	r3, [r1, #4]
 473              	.LVL72:
 474 0076 C362     		str	r3, [r0, #44]
 475              	.LVL73:
 294:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 476              		.loc 1 294 0
 477 0078 0B88     		ldrh	r3, [r1]
 478 007a 0385     		strh	r3, [r0, #40]
 479 007c E0E7     		b	.L23
 480              	.LVL74:
 481              	.L19:
 281:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 482              		.loc 1 281 0
 483 007e 044A     		ldr	r2, .L26+8
 484 0080 9042     		cmp	r0, r2
 485 0082 F2D1     		bne	.L24
 486 0084 EAE7     		b	.L20
 487              	.LVL75:
 488              	.L25:
 305:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 489              		.loc 1 305 0
 490              		@ sp needed
 491 0086 10BD     		pop	{r4, pc}
 492              	.L27:
 493              		.align	2
 494              	.L26:
 495 0088 002C0140 		.word	1073818624
 496 008c 00040040 		.word	1073742848
 497 0090 00100040 		.word	1073745920
 498 0094 FFFCFFFF 		.word	-769
 499 0098 00400140 		.word	1073823744
 500 009c 00440140 		.word	1073824768
 501 00a0 00480140 		.word	1073825792
 502              		.cfi_endproc
 503              	.LFE34:
 505              		.section	.text.TIM_TimeBaseStructInit,"ax",%progbits
 506              		.align	2
 507              		.global	TIM_TimeBaseStructInit
 508              		.code	16
 509              		.thumb_func
 511              	TIM_TimeBaseStructInit:
 512              	.LFB35:
 314:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the default configuration */
 513              		.loc 1 314 0
 514              		.cfi_startproc
 515              	.LVL76:
 316:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 516              		.loc 1 316 0
 517 0000 0123     		mov	r3, #1
 518 0002 5B42     		neg	r3, r3
 519 0004 4360     		str	r3, [r0, #4]
 317:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 520              		.loc 1 317 0
 521 0006 0023     		mov	r3, #0
 522 0008 0380     		strh	r3, [r0]
 318:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 523              		.loc 1 318 0
 524 000a 0381     		strh	r3, [r0, #8]
 319:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 525              		.loc 1 319 0
 526 000c 4380     		strh	r3, [r0, #2]
 320:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 527              		.loc 1 320 0
 528 000e 8372     		strb	r3, [r0, #10]
 321:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 529              		.loc 1 321 0
 530              		@ sp needed
 531 0010 7047     		bx	lr
 532              		.cfi_endproc
 533              	.LFE35:
 535 0012 C046     		.section	.text.TIM_PrescalerConfig,"ax",%progbits
 536              		.align	2
 537              		.global	TIM_PrescalerConfig
 538              		.code	16
 539              		.thumb_func
 541              	TIM_PrescalerConfig:
 542              	.LFB36:
 337:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 543              		.loc 1 337 0
 544              		.cfi_startproc
 545              	.LVL77:
 343:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or reset the UG Bit */
 546              		.loc 1 343 0
 547 0000 0185     		strh	r1, [r0, #40]
 345:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 548              		.loc 1 345 0
 549 0002 8282     		strh	r2, [r0, #20]
 346:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 550              		.loc 1 346 0
 551              		@ sp needed
 552 0004 7047     		bx	lr
 553              		.cfi_endproc
 554              	.LFE36:
 556 0006 C046     		.section	.text.TIM_CounterModeConfig,"ax",%progbits
 557              		.align	2
 558              		.global	TIM_CounterModeConfig
 559              		.code	16
 560              		.thumb_func
 562              	TIM_CounterModeConfig:
 563              	.LFB37:
 362:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpcr1 = 0;
 564              		.loc 1 362 0
 565              		.cfi_startproc
 566              	.LVL78:
 369:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the CMS and DIR Bits */
 567              		.loc 1 369 0
 568 0000 0388     		ldrh	r3, [r0]
 569              	.LVL79:
 371:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Counter Mode */
 570              		.loc 1 371 0
 571 0002 7022     		mov	r2, #112
 572 0004 9343     		bic	r3, r2
 573              	.LVL80:
 373:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CR1 register */
 574              		.loc 1 373 0
 575 0006 1943     		orr	r1, r3
 576              	.LVL81:
 375:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 577              		.loc 1 375 0
 578 0008 0180     		strh	r1, [r0]
 376:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 579              		.loc 1 376 0
 580              		@ sp needed
 581 000a 7047     		bx	lr
 582              		.cfi_endproc
 583              	.LFE37:
 585              		.section	.text.TIM_SetCounter,"ax",%progbits
 586              		.align	2
 587              		.global	TIM_SetCounter
 588              		.code	16
 589              		.thumb_func
 591              	TIM_SetCounter:
 592              	.LFB38:
 389:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 593              		.loc 1 389 0
 594              		.cfi_startproc
 595              	.LVL82:
 394:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 596              		.loc 1 394 0
 597 0000 4162     		str	r1, [r0, #36]
 395:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 598              		.loc 1 395 0
 599              		@ sp needed
 600 0002 7047     		bx	lr
 601              		.cfi_endproc
 602              	.LFE38:
 604              		.section	.text.TIM_SetAutoreload,"ax",%progbits
 605              		.align	2
 606              		.global	TIM_SetAutoreload
 607              		.code	16
 608              		.thumb_func
 610              	TIM_SetAutoreload:
 611              	.LFB39:
 407:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 612              		.loc 1 407 0
 613              		.cfi_startproc
 614              	.LVL83:
 412:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 615              		.loc 1 412 0
 616 0000 C162     		str	r1, [r0, #44]
 413:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 617              		.loc 1 413 0
 618              		@ sp needed
 619 0002 7047     		bx	lr
 620              		.cfi_endproc
 621              	.LFE39:
 623              		.section	.text.TIM_GetCounter,"ax",%progbits
 624              		.align	2
 625              		.global	TIM_GetCounter
 626              		.code	16
 627              		.thumb_func
 629              	TIM_GetCounter:
 630              	.LFB40:
 425:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 631              		.loc 1 425 0
 632              		.cfi_startproc
 633              	.LVL84:
 430:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 634              		.loc 1 430 0
 635 0000 406A     		ldr	r0, [r0, #36]
 636              	.LVL85:
 431:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 637              		.loc 1 431 0
 638              		@ sp needed
 639 0002 7047     		bx	lr
 640              		.cfi_endproc
 641              	.LFE40:
 643              		.section	.text.TIM_GetPrescaler,"ax",%progbits
 644              		.align	2
 645              		.global	TIM_GetPrescaler
 646              		.code	16
 647              		.thumb_func
 649              	TIM_GetPrescaler:
 650              	.LFB41:
 443:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 651              		.loc 1 443 0
 652              		.cfi_startproc
 653              	.LVL86:
 448:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 654              		.loc 1 448 0
 655 0000 008D     		ldrh	r0, [r0, #40]
 656              	.LVL87:
 657 0002 80B2     		uxth	r0, r0
 449:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 658              		.loc 1 449 0
 659              		@ sp needed
 660 0004 7047     		bx	lr
 661              		.cfi_endproc
 662              	.LFE41:
 664 0006 C046     		.section	.text.TIM_UpdateDisableConfig,"ax",%progbits
 665              		.align	2
 666              		.global	TIM_UpdateDisableConfig
 667              		.code	16
 668              		.thumb_func
 670              	TIM_UpdateDisableConfig:
 671              	.LFB42:
 463:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 672              		.loc 1 463 0
 673              		.cfi_startproc
 674              	.LVL88:
 468:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 675              		.loc 1 468 0
 676 0000 0029     		cmp	r1, #0
 677 0002 04D0     		beq	.L36
 471:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 678              		.loc 1 471 0
 679 0004 0288     		ldrh	r2, [r0]
 680 0006 0223     		mov	r3, #2
 681 0008 1343     		orr	r3, r2
 682 000a 0380     		strh	r3, [r0]
 683 000c 03E0     		b	.L35
 684              	.L36:
 476:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 685              		.loc 1 476 0
 686 000e 0388     		ldrh	r3, [r0]
 687 0010 0222     		mov	r2, #2
 688 0012 9343     		bic	r3, r2
 689 0014 0380     		strh	r3, [r0]
 690              	.L35:
 478:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 691              		.loc 1 478 0
 692              		@ sp needed
 693 0016 7047     		bx	lr
 694              		.cfi_endproc
 695              	.LFE42:
 697              		.section	.text.TIM_UpdateRequestConfig,"ax",%progbits
 698              		.align	2
 699              		.global	TIM_UpdateRequestConfig
 700              		.code	16
 701              		.thumb_func
 703              	TIM_UpdateRequestConfig:
 704              	.LFB43:
 496:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 705              		.loc 1 496 0
 706              		.cfi_startproc
 707              	.LVL89:
 501:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 708              		.loc 1 501 0
 709 0000 0029     		cmp	r1, #0
 710 0002 04D0     		beq	.L39
 504:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 711              		.loc 1 504 0
 712 0004 0288     		ldrh	r2, [r0]
 713 0006 0423     		mov	r3, #4
 714 0008 1343     		orr	r3, r2
 715 000a 0380     		strh	r3, [r0]
 716 000c 03E0     		b	.L38
 717              	.L39:
 509:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 718              		.loc 1 509 0
 719 000e 0388     		ldrh	r3, [r0]
 720 0010 0422     		mov	r2, #4
 721 0012 9343     		bic	r3, r2
 722 0014 0380     		strh	r3, [r0]
 723              	.L38:
 511:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 724              		.loc 1 511 0
 725              		@ sp needed
 726 0016 7047     		bx	lr
 727              		.cfi_endproc
 728              	.LFE43:
 730              		.section	.text.TIM_ARRPreloadConfig,"ax",%progbits
 731              		.align	2
 732              		.global	TIM_ARRPreloadConfig
 733              		.code	16
 734              		.thumb_func
 736              	TIM_ARRPreloadConfig:
 737              	.LFB44:
 525:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 738              		.loc 1 525 0
 739              		.cfi_startproc
 740              	.LVL90:
 530:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 741              		.loc 1 530 0
 742 0000 0029     		cmp	r1, #0
 743 0002 04D0     		beq	.L42
 533:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 744              		.loc 1 533 0
 745 0004 0288     		ldrh	r2, [r0]
 746 0006 8023     		mov	r3, #128
 747 0008 1343     		orr	r3, r2
 748 000a 0380     		strh	r3, [r0]
 749 000c 03E0     		b	.L41
 750              	.L42:
 538:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 751              		.loc 1 538 0
 752 000e 0388     		ldrh	r3, [r0]
 753 0010 8022     		mov	r2, #128
 754 0012 9343     		bic	r3, r2
 755 0014 0380     		strh	r3, [r0]
 756              	.L41:
 540:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 757              		.loc 1 540 0
 758              		@ sp needed
 759 0016 7047     		bx	lr
 760              		.cfi_endproc
 761              	.LFE44:
 763              		.section	.text.TIM_SelectOnePulseMode,"ax",%progbits
 764              		.align	2
 765              		.global	TIM_SelectOnePulseMode
 766              		.code	16
 767              		.thumb_func
 769              	TIM_SelectOnePulseMode:
 770              	.LFB45:
 556:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 771              		.loc 1 556 0
 772              		.cfi_startproc
 773              	.LVL91:
 562:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure the OPM Mode */
 774              		.loc 1 562 0
 775 0000 0388     		ldrh	r3, [r0]
 776 0002 0822     		mov	r2, #8
 777 0004 9343     		bic	r3, r2
 778 0006 0380     		strh	r3, [r0]
 564:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 779              		.loc 1 564 0
 780 0008 0388     		ldrh	r3, [r0]
 781 000a 1943     		orr	r1, r3
 782              	.LVL92:
 783 000c 0180     		strh	r1, [r0]
 565:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 784              		.loc 1 565 0
 785              		@ sp needed
 786 000e 7047     		bx	lr
 787              		.cfi_endproc
 788              	.LFE45:
 790              		.section	.text.TIM_SetClockDivision,"ax",%progbits
 791              		.align	2
 792              		.global	TIM_SetClockDivision
 793              		.code	16
 794              		.thumb_func
 796              	TIM_SetClockDivision:
 797              	.LFB46:
 579:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 798              		.loc 1 579 0
 799              		.cfi_startproc
 800              	.LVL93:
 585:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the CKD value */
 801              		.loc 1 585 0
 802 0000 0288     		ldrh	r2, [r0]
 803 0002 034B     		ldr	r3, .L46
 804 0004 1340     		and	r3, r2
 805 0006 0380     		strh	r3, [r0]
 587:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 806              		.loc 1 587 0
 807 0008 0388     		ldrh	r3, [r0]
 808 000a 1943     		orr	r1, r3
 809              	.LVL94:
 810 000c 0180     		strh	r1, [r0]
 588:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 811              		.loc 1 588 0
 812              		@ sp needed
 813 000e 7047     		bx	lr
 814              	.L47:
 815              		.align	2
 816              	.L46:
 817 0010 FFFCFFFF 		.word	-769
 818              		.cfi_endproc
 819              	.LFE46:
 821              		.section	.text.TIM_Cmd,"ax",%progbits
 822              		.align	2
 823              		.global	TIM_Cmd
 824              		.code	16
 825              		.thumb_func
 827              	TIM_Cmd:
 828              	.LFB47:
 602:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 829              		.loc 1 602 0
 830              		.cfi_startproc
 831              	.LVL95:
 607:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 832              		.loc 1 607 0
 833 0000 0029     		cmp	r1, #0
 834 0002 04D0     		beq	.L49
 610:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 835              		.loc 1 610 0
 836 0004 0288     		ldrh	r2, [r0]
 837 0006 0123     		mov	r3, #1
 838 0008 1343     		orr	r3, r2
 839 000a 0380     		strh	r3, [r0]
 840 000c 03E0     		b	.L48
 841              	.L49:
 615:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 842              		.loc 1 615 0
 843 000e 0388     		ldrh	r3, [r0]
 844 0010 0122     		mov	r2, #1
 845 0012 9343     		bic	r3, r2
 846 0014 0380     		strh	r3, [r0]
 847              	.L48:
 617:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 848              		.loc 1 617 0
 849              		@ sp needed
 850 0016 7047     		bx	lr
 851              		.cfi_endproc
 852              	.LFE47:
 854              		.section	.text.TIM_BDTRConfig,"ax",%progbits
 855              		.align	2
 856              		.global	TIM_BDTRConfig
 857              		.code	16
 858              		.thumb_func
 860              	TIM_BDTRConfig:
 861              	.LFB48:
 660:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 862              		.loc 1 660 0
 863              		.cfi_startproc
 864              	.LVL96:
 671:.\StdPeriphLib\src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 865              		.loc 1 671 0
 866 0000 4A88     		ldrh	r2, [r1, #2]
 867 0002 0B88     		ldrh	r3, [r1]
 868 0004 1343     		orr	r3, r2
 869 0006 8A88     		ldrh	r2, [r1, #4]
 870 0008 1343     		orr	r3, r2
 871 000a CA88     		ldrh	r2, [r1, #6]
 872 000c 1343     		orr	r3, r2
 873 000e 0A89     		ldrh	r2, [r1, #8]
 874 0010 1343     		orr	r3, r2
 875 0012 4A89     		ldrh	r2, [r1, #10]
 876 0014 1343     		orr	r3, r2
 877 0016 8A89     		ldrh	r2, [r1, #12]
 878 0018 1343     		orr	r3, r2
 879 001a 4422     		mov	r2, #68
 880 001c 8352     		strh	r3, [r0, r2]
 675:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 881              		.loc 1 675 0
 882              		@ sp needed
 883 001e 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE48:
 887              		.section	.text.TIM_BDTRStructInit,"ax",%progbits
 888              		.align	2
 889              		.global	TIM_BDTRStructInit
 890              		.code	16
 891              		.thumb_func
 893              	TIM_BDTRStructInit:
 894              	.LFB49:
 684:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the default configuration */
 895              		.loc 1 684 0
 896              		.cfi_startproc
 897              	.LVL97:
 686:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 898              		.loc 1 686 0
 899 0000 0023     		mov	r3, #0
 900 0002 0380     		strh	r3, [r0]
 687:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 901              		.loc 1 687 0
 902 0004 4380     		strh	r3, [r0, #2]
 688:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 903              		.loc 1 688 0
 904 0006 8380     		strh	r3, [r0, #4]
 689:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 905              		.loc 1 689 0
 906 0008 C380     		strh	r3, [r0, #6]
 690:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 907              		.loc 1 690 0
 908 000a 0381     		strh	r3, [r0, #8]
 691:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 909              		.loc 1 691 0
 910 000c 4381     		strh	r3, [r0, #10]
 692:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 911              		.loc 1 692 0
 912 000e 8381     		strh	r3, [r0, #12]
 693:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 913              		.loc 1 693 0
 914              		@ sp needed
 915 0010 7047     		bx	lr
 916              		.cfi_endproc
 917              	.LFE49:
 919 0012 C046     		.section	.text.TIM_CtrlPWMOutputs,"ax",%progbits
 920              		.align	2
 921              		.global	TIM_CtrlPWMOutputs
 922              		.code	16
 923              		.thumb_func
 925              	TIM_CtrlPWMOutputs:
 926              	.LFB50:
 703:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 927              		.loc 1 703 0
 928              		.cfi_startproc
 929              	.LVL98:
 707:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 930              		.loc 1 707 0
 931 0000 0029     		cmp	r1, #0
 932 0002 06D0     		beq	.L54
 710:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 933              		.loc 1 710 0
 934 0004 4422     		mov	r2, #68
 935 0006 815A     		ldrh	r1, [r0, r2]
 936              	.LVL99:
 937 0008 8023     		mov	r3, #128
 938 000a 1B02     		lsl	r3, r3, #8
 939 000c 0B43     		orr	r3, r1
 940 000e 8352     		strh	r3, [r0, r2]
 941 0010 04E0     		b	.L53
 942              	.LVL100:
 943              	.L54:
 715:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }  
 944              		.loc 1 715 0
 945 0012 4422     		mov	r2, #68
 946 0014 835A     		ldrh	r3, [r0, r2]
 947 0016 5B04     		lsl	r3, r3, #17
 948 0018 5B0C     		lsr	r3, r3, #17
 949 001a 8352     		strh	r3, [r0, r2]
 950              	.LVL101:
 951              	.L53:
 717:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 952              		.loc 1 717 0
 953              		@ sp needed
 954 001c 7047     		bx	lr
 955              		.cfi_endproc
 956              	.LFE50:
 958 001e C046     		.section	.text.TIM_OC1Init,"ax",%progbits
 959              		.align	2
 960              		.global	TIM_OC1Init
 961              		.code	16
 962              		.thumb_func
 964              	TIM_OC1Init:
 965              	.LFB51:
 776:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 966              		.loc 1 776 0
 967              		.cfi_startproc
 968              	.LVL102:
 969 0000 70B5     		push	{r4, r5, r6, lr}
 970              	.LCFI4:
 971              		.cfi_def_cfa_offset 16
 972              		.cfi_offset 4, -16
 973              		.cfi_offset 5, -12
 974              		.cfi_offset 6, -8
 975              		.cfi_offset 14, -4
 976              	.LVL103:
 785:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
 977              		.loc 1 785 0
 978 0002 038C     		ldrh	r3, [r0, #32]
 979 0004 0122     		mov	r2, #1
 980 0006 9343     		bic	r3, r2
 981 0008 0384     		strh	r3, [r0, #32]
 787:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 982              		.loc 1 787 0
 983 000a 038C     		ldrh	r3, [r0, #32]
 984              	.LVL104:
 789:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 985              		.loc 1 789 0
 986 000c 8488     		ldrh	r4, [r0, #4]
 987 000e A4B2     		uxth	r4, r4
 988              	.LVL105:
 792:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 989              		.loc 1 792 0
 990 0010 058B     		ldrh	r5, [r0, #24]
 991              	.LVL106:
 796:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 992              		.loc 1 796 0
 993 0012 7232     		add	r2, r2, #114
 994 0014 9543     		bic	r5, r2
 995              	.LVL107:
 799:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 996              		.loc 1 799 0
 997 0016 0A88     		ldrh	r2, [r1]
 998 0018 1543     		orr	r5, r2
 999              	.LVL108:
 802:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 1000              		.loc 1 802 0
 1001 001a 0222     		mov	r2, #2
 1002 001c 9343     		bic	r3, r2
 1003              	.LVL109:
 1004 001e 1E1C     		mov	r6, r3
 1005              	.LVL110:
 1006 0020 4B88     		ldrh	r3, [r1, #2]
 1007 0022 8A89     		ldrh	r2, [r1, #12]
 1008 0024 1343     		orr	r3, r2
 807:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1009              		.loc 1 807 0
 1010 0026 3343     		orr	r3, r6
 1011              	.LVL111:
 809:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1012              		.loc 1 809 0
 1013 0028 0F4A     		ldr	r2, .L59
 1014 002a 9042     		cmp	r0, r2
 1015 002c 08D0     		beq	.L57
 809:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1016              		.loc 1 809 0 is_stmt 0 discriminator 1
 1017 002e 0F4A     		ldr	r2, .L59+4
 1018 0030 9042     		cmp	r0, r2
 1019 0032 05D0     		beq	.L57
 809:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1020              		.loc 1 809 0 discriminator 2
 1021 0034 0E4A     		ldr	r2, .L59+8
 1022 0036 9042     		cmp	r0, r2
 1023 0038 02D0     		beq	.L57
 809:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1024              		.loc 1 809 0 discriminator 3
 1025 003a 0E4A     		ldr	r2, .L59+12
 1026 003c 9042     		cmp	r0, r2
 1027 003e 0DD1     		bne	.L58
 1028              	.L57:
 817:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N Polarity */
 1029              		.loc 1 817 0 is_stmt 1
 1030 0040 0822     		mov	r2, #8
 1031 0042 9343     		bic	r3, r2
 1032              	.LVL112:
 819:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1033              		.loc 1 819 0
 1034 0044 CA89     		ldrh	r2, [r1, #14]
 1035 0046 1343     		orr	r3, r2
 1036              	.LVL113:
 822:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N State */
 1037              		.loc 1 822 0
 1038 0048 0422     		mov	r2, #4
 1039 004a 9343     		bic	r3, r2
 1040              	.LVL114:
 824:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1041              		.loc 1 824 0
 1042 004c 8A88     		ldrh	r2, [r1, #4]
 1043 004e 1343     		orr	r3, r2
 1044              	.LVL115:
 828:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1045              		.loc 1 828 0
 1046 0050 094A     		ldr	r2, .L59+16
 1047 0052 1440     		and	r4, r2
 1048              	.LVL116:
 1049 0054 4E8A     		ldrh	r6, [r1, #18]
 1050 0056 0A8A     		ldrh	r2, [r1, #16]
 1051 0058 3243     		orr	r2, r6
 833:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 1052              		.loc 1 833 0
 1053 005a 1443     		orr	r4, r2
 1054              	.LVL117:
 1055              	.L58:
 836:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1056              		.loc 1 836 0
 1057 005c 8480     		strh	r4, [r0, #4]
 839:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1058              		.loc 1 839 0
 1059 005e 0583     		strh	r5, [r0, #24]
 842:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
 1060              		.loc 1 842 0
 1061 0060 8A68     		ldr	r2, [r1, #8]
 1062 0062 4263     		str	r2, [r0, #52]
 845:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1063              		.loc 1 845 0
 1064 0064 0384     		strh	r3, [r0, #32]
 846:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1065              		.loc 1 846 0
 1066              		@ sp needed
 1067              	.LVL118:
 1068              	.LVL119:
 1069 0066 70BD     		pop	{r4, r5, r6, pc}
 1070              	.L60:
 1071              		.align	2
 1072              	.L59:
 1073 0068 002C0140 		.word	1073818624
 1074 006c 00400140 		.word	1073823744
 1075 0070 00440140 		.word	1073824768
 1076 0074 00480140 		.word	1073825792
 1077 0078 FFFCFFFF 		.word	-769
 1078              		.cfi_endproc
 1079              	.LFE51:
 1081              		.section	.text.TIM_OC2Init,"ax",%progbits
 1082              		.align	2
 1083              		.global	TIM_OC2Init
 1084              		.code	16
 1085              		.thumb_func
 1087              	TIM_OC2Init:
 1088              	.LFB52:
 859:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1089              		.loc 1 859 0
 1090              		.cfi_startproc
 1091              	.LVL120:
 1092 0000 70B5     		push	{r4, r5, r6, lr}
 1093              	.LCFI5:
 1094              		.cfi_def_cfa_offset 16
 1095              		.cfi_offset 4, -16
 1096              		.cfi_offset 5, -12
 1097              		.cfi_offset 6, -8
 1098              		.cfi_offset 14, -4
 1099              	.LVL121:
 868:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1100              		.loc 1 868 0
 1101 0002 038C     		ldrh	r3, [r0, #32]
 1102 0004 1022     		mov	r2, #16
 1103 0006 9343     		bic	r3, r2
 1104 0008 0384     		strh	r3, [r0, #32]
 871:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 1105              		.loc 1 871 0
 1106 000a 028C     		ldrh	r2, [r0, #32]
 1107              	.LVL122:
 873:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1108              		.loc 1 873 0
 1109 000c 8588     		ldrh	r5, [r0, #4]
 1110 000e ADB2     		uxth	r5, r5
 1111              	.LVL123:
 876:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1112              		.loc 1 876 0
 1113 0010 048B     		ldrh	r4, [r0, #24]
 1114              	.LVL124:
 880:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1115              		.loc 1 880 0
 1116 0012 1D4B     		ldr	r3, .L66
 1117 0014 1C40     		and	r4, r3
 1118              	.LVL125:
 883:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1119              		.loc 1 883 0
 1120 0016 0E88     		ldrh	r6, [r1]
 1121 0018 3602     		lsl	r6, r6, #8
 1122 001a 3443     		orr	r4, r6
 1123              	.LVL126:
 1124 001c A4B2     		uxth	r4, r4
 1125              	.LVL127:
 886:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 1126              		.loc 1 886 0
 1127 001e 2023     		mov	r3, #32
 1128 0020 9A43     		bic	r2, r3
 1129              	.LVL128:
 888:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1130              		.loc 1 888 0
 1131 0022 8B89     		ldrh	r3, [r1, #12]
 1132 0024 1B01     		lsl	r3, r3, #4
 1133 0026 1A43     		orr	r2, r3
 1134              	.LVL129:
 1135 0028 92B2     		uxth	r2, r2
 1136              	.LVL130:
 891:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1137              		.loc 1 891 0
 1138 002a 4B88     		ldrh	r3, [r1, #2]
 1139 002c 1B01     		lsl	r3, r3, #4
 1140 002e 1A43     		orr	r2, r3
 1141              	.LVL131:
 1142 0030 93B2     		uxth	r3, r2
 1143              	.LVL132:
 893:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1144              		.loc 1 893 0
 1145 0032 164A     		ldr	r2, .L66+4
 1146 0034 9042     		cmp	r0, r2
 1147 0036 08D0     		beq	.L62
 893:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1148              		.loc 1 893 0 is_stmt 0 discriminator 1
 1149 0038 154A     		ldr	r2, .L66+8
 1150 003a 9042     		cmp	r0, r2
 1151 003c 1CD0     		beq	.L63
 1152              	.L64:
 929:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1153              		.loc 1 929 0 is_stmt 1
 1154 003e 8580     		strh	r5, [r0, #4]
 932:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1155              		.loc 1 932 0
 1156 0040 0483     		strh	r4, [r0, #24]
 935:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1157              		.loc 1 935 0
 1158 0042 8A68     		ldr	r2, [r1, #8]
 1159 0044 8263     		str	r2, [r0, #56]
 938:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1160              		.loc 1 938 0
 1161 0046 0384     		strh	r3, [r0, #32]
 1162 0048 1DE0     		b	.L65
 1163              	.L62:
 899:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1164              		.loc 1 899 0
 1165 004a 124A     		ldr	r2, .L66+12
 1166 004c 1540     		and	r5, r2
 1167              	.LVL133:
 902:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1168              		.loc 1 902 0
 1169 004e 0A8A     		ldrh	r2, [r1, #16]
 1170 0050 9200     		lsl	r2, r2, #2
 1171 0052 1543     		orr	r5, r2
 1172              	.LVL134:
 912:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Set the Output N Polarity */
 1173              		.loc 1 912 0
 1174 0054 8022     		mov	r2, #128
 1175 0056 9343     		bic	r3, r2
 1176              	.LVL135:
 914:.\StdPeriphLib\src/stm32f0xx_tim.c ****       
 1177              		.loc 1 914 0
 1178 0058 CA89     		ldrh	r2, [r1, #14]
 1179 005a 1201     		lsl	r2, r2, #4
 1180 005c 1343     		orr	r3, r2
 1181              	.LVL136:
 917:.\StdPeriphLib\src/stm32f0xx_tim.c ****       /* Set the Output N State */
 1182              		.loc 1 917 0
 1183 005e 0E4A     		ldr	r2, .L66+16
 1184 0060 1340     		and	r3, r2
 1185              	.LVL137:
 919:.\StdPeriphLib\src/stm32f0xx_tim.c ****       
 1186              		.loc 1 919 0
 1187 0062 8A88     		ldrh	r2, [r1, #4]
 1188 0064 1201     		lsl	r2, r2, #4
 1189 0066 1343     		orr	r3, r2
 1190              	.LVL138:
 1191 0068 9BB2     		uxth	r3, r3
 1192              	.LVL139:
 922:.\StdPeriphLib\src/stm32f0xx_tim.c ****       
 1193              		.loc 1 922 0
 1194 006a 0C4A     		ldr	r2, .L66+20
 1195 006c 1540     		and	r5, r2
 1196              	.LVL140:
 925:.\StdPeriphLib\src/stm32f0xx_tim.c ****     }
 1197              		.loc 1 925 0
 1198 006e 4A8A     		ldrh	r2, [r1, #18]
 1199 0070 9200     		lsl	r2, r2, #2
 1200 0072 1543     		orr	r5, r2
 1201              	.LVL141:
 1202 0074 ADB2     		uxth	r5, r5
 1203              	.LVL142:
 1204 0076 E2E7     		b	.L64
 1205              	.L63:
 899:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1206              		.loc 1 899 0
 1207 0078 064A     		ldr	r2, .L66+12
 1208 007a 1540     		and	r5, r2
 1209              	.LVL143:
 902:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1210              		.loc 1 902 0
 1211 007c 0A8A     		ldrh	r2, [r1, #16]
 1212 007e 9200     		lsl	r2, r2, #2
 1213 0080 1543     		orr	r5, r2
 1214              	.LVL144:
 1215 0082 ADB2     		uxth	r5, r5
 1216              	.LVL145:
 1217 0084 DBE7     		b	.L64
 1218              	.L65:
 939:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1219              		.loc 1 939 0
 1220              		@ sp needed
 1221              	.LVL146:
 1222              	.LVL147:
 1223 0086 70BD     		pop	{r4, r5, r6, pc}
 1224              	.L67:
 1225              		.align	2
 1226              	.L66:
 1227 0088 FF8CFFFF 		.word	-29441
 1228 008c 002C0140 		.word	1073818624
 1229 0090 00400140 		.word	1073823744
 1230 0094 FFFBFFFF 		.word	-1025
 1231 0098 BFFF0000 		.word	65471
 1232 009c FFF70000 		.word	63487
 1233              		.cfi_endproc
 1234              	.LFE52:
 1236              		.section	.text.TIM_OC3Init,"ax",%progbits
 1237              		.align	2
 1238              		.global	TIM_OC3Init
 1239              		.code	16
 1240              		.thumb_func
 1242              	TIM_OC3Init:
 1243              	.LFB53:
 952:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1244              		.loc 1 952 0
 1245              		.cfi_startproc
 1246              	.LVL148:
 1247 0000 70B5     		push	{r4, r5, r6, lr}
 1248              	.LCFI6:
 1249              		.cfi_def_cfa_offset 16
 1250              		.cfi_offset 4, -16
 1251              		.cfi_offset 5, -12
 1252              		.cfi_offset 6, -8
 1253              		.cfi_offset 14, -4
 1254              	.LVL149:
 961:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1255              		.loc 1 961 0
 1256 0002 028C     		ldrh	r2, [r0, #32]
 1257 0004 194B     		ldr	r3, .L70
 1258 0006 1340     		and	r3, r2
 1259 0008 0384     		strh	r3, [r0, #32]
 964:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 1260              		.loc 1 964 0
 1261 000a 028C     		ldrh	r2, [r0, #32]
 1262              	.LVL150:
 966:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1263              		.loc 1 966 0
 1264 000c 8588     		ldrh	r5, [r0, #4]
 1265 000e ADB2     		uxth	r5, r5
 1266              	.LVL151:
 969:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1267              		.loc 1 969 0
 1268 0010 868B     		ldrh	r6, [r0, #28]
 1269              	.LVL152:
 973:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 1270              		.loc 1 973 0
 1271 0012 7323     		mov	r3, #115
 1272 0014 9E43     		bic	r6, r3
 1273              	.LVL153:
 975:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1274              		.loc 1 975 0
 1275 0016 0B88     		ldrh	r3, [r1]
 1276 0018 1E43     		orr	r6, r3
 1277              	.LVL154:
 978:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 1278              		.loc 1 978 0
 1279 001a 154B     		ldr	r3, .L70+4
 1280 001c 1A40     		and	r2, r3
 1281              	.LVL155:
 980:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1282              		.loc 1 980 0
 1283 001e 8C89     		ldrh	r4, [r1, #12]
 1284 0020 2402     		lsl	r4, r4, #8
 1285 0022 2243     		orr	r2, r4
 1286              	.LVL156:
 1287 0024 92B2     		uxth	r2, r2
 1288              	.LVL157:
 983:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1289              		.loc 1 983 0
 1290 0026 4B88     		ldrh	r3, [r1, #2]
 1291 0028 1B02     		lsl	r3, r3, #8
 1292 002a 1A43     		orr	r2, r3
 1293              	.LVL158:
 1294 002c 93B2     		uxth	r3, r2
 1295              	.LVL159:
 985:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1296              		.loc 1 985 0
 1297 002e 114A     		ldr	r2, .L70+8
 1298 0030 9042     		cmp	r0, r2
 1299 0032 14D1     		bne	.L69
 993:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N Polarity */
 1300              		.loc 1 993 0
 1301 0034 104A     		ldr	r2, .L70+12
 1302 0036 1340     		and	r3, r2
 1303              	.LVL160:
 995:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Output N State */
 1304              		.loc 1 995 0
 1305 0038 CA89     		ldrh	r2, [r1, #14]
 1306 003a 1202     		lsl	r2, r2, #8
 1307 003c 1343     		orr	r3, r2
 1308              	.LVL161:
 997:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1309              		.loc 1 997 0
 1310 003e 0F4A     		ldr	r2, .L70+16
 1311 0040 1340     		and	r3, r2
 1312              	.LVL162:
1000:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare and Output Compare N IDLE State */
 1313              		.loc 1 1000 0
 1314 0042 8A88     		ldrh	r2, [r1, #4]
 1315 0044 1202     		lsl	r2, r2, #8
 1316 0046 1343     		orr	r3, r2
 1317              	.LVL163:
 1318 0048 9BB2     		uxth	r3, r3
 1319              	.LVL164:
1003:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
 1320              		.loc 1 1003 0
 1321 004a 0D4A     		ldr	r2, .L70+20
 1322 004c 1540     		and	r5, r2
 1323              	.LVL165:
1005:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output N Idle state */
 1324              		.loc 1 1005 0
 1325 004e 0A8A     		ldrh	r2, [r1, #16]
 1326 0050 1201     		lsl	r2, r2, #4
 1327 0052 1543     		orr	r5, r2
 1328              	.LVL166:
 1329 0054 AAB2     		uxth	r2, r5
 1330              	.LVL167:
1007:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 1331              		.loc 1 1007 0
 1332 0056 4D8A     		ldrh	r5, [r1, #18]
 1333 0058 2D01     		lsl	r5, r5, #4
 1334 005a 2A43     		orr	r2, r5
 1335              	.LVL168:
 1336 005c 95B2     		uxth	r5, r2
 1337              	.LVL169:
 1338              	.L69:
1010:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1339              		.loc 1 1010 0
 1340 005e 8580     		strh	r5, [r0, #4]
1013:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1341              		.loc 1 1013 0
 1342 0060 8683     		strh	r6, [r0, #28]
1016:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1343              		.loc 1 1016 0
 1344 0062 8A68     		ldr	r2, [r1, #8]
 1345 0064 C263     		str	r2, [r0, #60]
1019:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1346              		.loc 1 1019 0
 1347 0066 0384     		strh	r3, [r0, #32]
1020:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1348              		.loc 1 1020 0
 1349              		@ sp needed
 1350              	.LVL170:
 1351              	.LVL171:
 1352 0068 70BD     		pop	{r4, r5, r6, pc}
 1353              	.L71:
 1354 006a C046     		.align	2
 1355              	.L70:
 1356 006c FFFEFFFF 		.word	-257
 1357 0070 FFFDFFFF 		.word	-513
 1358 0074 002C0140 		.word	1073818624
 1359 0078 FFF7FFFF 		.word	-2049
 1360 007c FFFB0000 		.word	64511
 1361 0080 FFCFFFFF 		.word	-12289
 1362              		.cfi_endproc
 1363              	.LFE53:
 1365              		.section	.text.TIM_OC4Init,"ax",%progbits
 1366              		.align	2
 1367              		.global	TIM_OC4Init
 1368              		.code	16
 1369              		.thumb_func
 1371              	TIM_OC4Init:
 1372              	.LFB54:
1033:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1373              		.loc 1 1033 0
 1374              		.cfi_startproc
 1375              	.LVL172:
 1376 0000 70B5     		push	{r4, r5, r6, lr}
 1377              	.LCFI7:
 1378              		.cfi_def_cfa_offset 16
 1379              		.cfi_offset 4, -16
 1380              		.cfi_offset 5, -12
 1381              		.cfi_offset 6, -8
 1382              		.cfi_offset 14, -4
 1383              	.LVL173:
1042:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1384              		.loc 1 1042 0
 1385 0002 028C     		ldrh	r2, [r0, #32]
 1386 0004 124B     		ldr	r3, .L74
 1387 0006 1340     		and	r3, r2
 1388 0008 0384     		strh	r3, [r0, #32]
1045:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 1389              		.loc 1 1045 0
 1390 000a 048C     		ldrh	r4, [r0, #32]
 1391              	.LVL174:
1047:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1392              		.loc 1 1047 0
 1393 000c 8688     		ldrh	r6, [r0, #4]
 1394 000e B6B2     		uxth	r6, r6
 1395              	.LVL175:
1050:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1396              		.loc 1 1050 0
 1397 0010 838B     		ldrh	r3, [r0, #28]
 1398              	.LVL176:
1054:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1399              		.loc 1 1054 0
 1400 0012 104A     		ldr	r2, .L74+4
 1401 0014 1A40     		and	r2, r3
 1402              	.LVL177:
1057:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1403              		.loc 1 1057 0
 1404 0016 0D88     		ldrh	r5, [r1]
 1405 0018 2D02     		lsl	r5, r5, #8
 1406 001a 2A43     		orr	r2, r5
 1407              	.LVL178:
 1408 001c 92B2     		uxth	r2, r2
 1409              	.LVL179:
1060:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 1410              		.loc 1 1060 0
 1411 001e 0E4B     		ldr	r3, .L74+8
 1412 0020 2340     		and	r3, r4
 1413              	.LVL180:
1062:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1414              		.loc 1 1062 0
 1415 0022 8D89     		ldrh	r5, [r1, #12]
 1416 0024 2D03     		lsl	r5, r5, #12
 1417 0026 2B43     		orr	r3, r5
 1418              	.LVL181:
 1419 0028 9CB2     		uxth	r4, r3
 1420              	.LVL182:
1065:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1421              		.loc 1 1065 0
 1422 002a 4B88     		ldrh	r3, [r1, #2]
 1423 002c 1B03     		lsl	r3, r3, #12
 1424 002e 2343     		orr	r3, r4
 1425 0030 9BB2     		uxth	r3, r3
 1426              	.LVL183:
1067:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1427              		.loc 1 1067 0
 1428 0032 0A4C     		ldr	r4, .L74+12
 1429 0034 A042     		cmp	r0, r4
 1430 0036 05D1     		bne	.L73
1071:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
 1431              		.loc 1 1071 0
 1432 0038 094C     		ldr	r4, .L74+16
 1433 003a 2640     		and	r6, r4
 1434              	.LVL184:
1073:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 1435              		.loc 1 1073 0
 1436 003c 0C8A     		ldrh	r4, [r1, #16]
 1437 003e A401     		lsl	r4, r4, #6
 1438 0040 2643     		orr	r6, r4
 1439              	.LVL185:
 1440 0042 B6B2     		uxth	r6, r6
 1441              	.LVL186:
 1442              	.L73:
1076:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1443              		.loc 1 1076 0
 1444 0044 8680     		strh	r6, [r0, #4]
1079:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1445              		.loc 1 1079 0
 1446 0046 8283     		strh	r2, [r0, #28]
1082:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 1447              		.loc 1 1082 0
 1448 0048 8A68     		ldr	r2, [r1, #8]
 1449              	.LVL187:
 1450 004a 0264     		str	r2, [r0, #64]
 1451              	.LVL188:
1085:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1452              		.loc 1 1085 0
 1453 004c 0384     		strh	r3, [r0, #32]
1086:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1454              		.loc 1 1086 0
 1455              		@ sp needed
 1456              	.LVL189:
 1457 004e 70BD     		pop	{r4, r5, r6, pc}
 1458              	.L75:
 1459              		.align	2
 1460              	.L74:
 1461 0050 FFEFFFFF 		.word	-4097
 1462 0054 FF8CFFFF 		.word	-29441
 1463 0058 FFDFFFFF 		.word	-8193
 1464 005c 002C0140 		.word	1073818624
 1465 0060 FFBFFFFF 		.word	-16385
 1466              		.cfi_endproc
 1467              	.LFE54:
 1469              		.section	.text.TIM_OCStructInit,"ax",%progbits
 1470              		.align	2
 1471              		.global	TIM_OCStructInit
 1472              		.code	16
 1473              		.thumb_func
 1475              	TIM_OCStructInit:
 1476              	.LFB55:
1095:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the default configuration */
 1477              		.loc 1 1095 0
 1478              		.cfi_startproc
 1479              	.LVL190:
1097:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 1480              		.loc 1 1097 0
 1481 0000 0023     		mov	r3, #0
 1482 0002 0380     		strh	r3, [r0]
1098:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 1483              		.loc 1 1098 0
 1484 0004 4380     		strh	r3, [r0, #2]
1099:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 1485              		.loc 1 1099 0
 1486 0006 8380     		strh	r3, [r0, #4]
1100:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 1487              		.loc 1 1100 0
 1488 0008 8360     		str	r3, [r0, #8]
1101:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 1489              		.loc 1 1101 0
 1490 000a 8381     		strh	r3, [r0, #12]
1102:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 1491              		.loc 1 1102 0
 1492 000c C381     		strh	r3, [r0, #14]
1103:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 1493              		.loc 1 1103 0
 1494 000e 0382     		strh	r3, [r0, #16]
1104:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1495              		.loc 1 1104 0
 1496 0010 4382     		strh	r3, [r0, #18]
1105:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1497              		.loc 1 1105 0
 1498              		@ sp needed
 1499 0012 7047     		bx	lr
 1500              		.cfi_endproc
 1501              	.LFE55:
 1503              		.section	.text.TIM_SelectOCxM,"ax",%progbits
 1504              		.align	2
 1505              		.global	TIM_SelectOCxM
 1506              		.code	16
 1507              		.thumb_func
 1509              	TIM_SelectOCxM:
 1510              	.LFB56:
1132:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint32_t tmp = 0;
 1511              		.loc 1 1132 0
 1512              		.cfi_startproc
 1513              	.LVL191:
 1514 0000 30B5     		push	{r4, r5, lr}
 1515              	.LCFI8:
 1516              		.cfi_def_cfa_offset 12
 1517              		.cfi_offset 4, -12
 1518              		.cfi_offset 5, -8
 1519              		.cfi_offset 14, -4
 1520              	.LVL192:
1141:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1521              		.loc 1 1141 0
 1522 0002 041C     		mov	r4, r0
 1523 0004 1834     		add	r4, r4, #24
 1524              	.LVL193:
1146:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1525              		.loc 1 1146 0
 1526 0006 038C     		ldrh	r3, [r0, #32]
1143:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1527              		.loc 1 1143 0
 1528 0008 0125     		mov	r5, #1
 1529 000a 8D40     		lsl	r5, r5, r1
1146:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1530              		.loc 1 1146 0
 1531 000c AB43     		bic	r3, r5
 1532 000e 0384     		strh	r3, [r0, #32]
1148:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1533              		.loc 1 1148 0
 1534 0010 0823     		mov	r3, #8
 1535 0012 081C     		mov	r0, r1
 1536              	.LVL194:
 1537 0014 9843     		bic	r0, r3
 1538 0016 09D1     		bne	.L78
 1539              	.LVL195:
1150:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1540              		.loc 1 1150 0
 1541 0018 4908     		lsr	r1, r1, #1
 1542              	.LVL196:
 1543 001a 6118     		add	r1, r4, r1
1153:.\StdPeriphLib\src/stm32f0xx_tim.c ****    
 1544              		.loc 1 1153 0
 1545 001c 0B68     		ldr	r3, [r1]
 1546 001e 7020     		mov	r0, #112
 1547 0020 8343     		bic	r3, r0
 1548 0022 0B60     		str	r3, [r1]
1156:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 1549              		.loc 1 1156 0
 1550 0024 0B68     		ldr	r3, [r1]
 1551 0026 1A43     		orr	r2, r3
 1552              	.LVL197:
 1553 0028 0A60     		str	r2, [r1]
 1554 002a 0CE0     		b	.L77
 1555              	.LVL198:
 1556              	.L78:
1160:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1557              		.loc 1 1160 0
 1558 002c 0B1F     		sub	r3, r1, #4
 1559 002e 9BB2     		uxth	r3, r3
 1560 0030 5B08     		lsr	r3, r3, #1
 1561 0032 1B19     		add	r3, r3, r4
1163:.\StdPeriphLib\src/stm32f0xx_tim.c ****     
 1562              		.loc 1 1163 0
 1563 0034 1868     		ldr	r0, [r3]
 1564 0036 0449     		ldr	r1, .L80
 1565              	.LVL199:
 1566 0038 0140     		and	r1, r0
 1567 003a 1960     		str	r1, [r3]
1166:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 1568              		.loc 1 1166 0
 1569 003c 1968     		ldr	r1, [r3]
 1570 003e 1202     		lsl	r2, r2, #8
 1571              	.LVL200:
 1572 0040 92B2     		uxth	r2, r2
 1573 0042 0A43     		orr	r2, r1
 1574 0044 1A60     		str	r2, [r3]
 1575              	.LVL201:
 1576              	.L77:
1168:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1577              		.loc 1 1168 0
 1578              		@ sp needed
 1579              	.LVL202:
 1580 0046 30BD     		pop	{r4, r5, pc}
 1581              	.L81:
 1582              		.align	2
 1583              	.L80:
 1584 0048 FF8FFFFF 		.word	-28673
 1585              		.cfi_endproc
 1586              	.LFE56:
 1588              		.section	.text.TIM_SetCompare1,"ax",%progbits
 1589              		.align	2
 1590              		.global	TIM_SetCompare1
 1591              		.code	16
 1592              		.thumb_func
 1594              	TIM_SetCompare1:
 1595              	.LFB57:
1178:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 1596              		.loc 1 1178 0
 1597              		.cfi_startproc
 1598              	.LVL203:
1183:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1599              		.loc 1 1183 0
 1600 0000 4163     		str	r1, [r0, #52]
1184:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1601              		.loc 1 1184 0
 1602              		@ sp needed
 1603 0002 7047     		bx	lr
 1604              		.cfi_endproc
 1605              	.LFE57:
 1607              		.section	.text.TIM_SetCompare2,"ax",%progbits
 1608              		.align	2
 1609              		.global	TIM_SetCompare2
 1610              		.code	16
 1611              		.thumb_func
 1613              	TIM_SetCompare2:
 1614              	.LFB58:
1194:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 1615              		.loc 1 1194 0
 1616              		.cfi_startproc
 1617              	.LVL204:
1199:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1618              		.loc 1 1199 0
 1619 0000 8163     		str	r1, [r0, #56]
1200:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1620              		.loc 1 1200 0
 1621              		@ sp needed
 1622 0002 7047     		bx	lr
 1623              		.cfi_endproc
 1624              	.LFE58:
 1626              		.section	.text.TIM_SetCompare3,"ax",%progbits
 1627              		.align	2
 1628              		.global	TIM_SetCompare3
 1629              		.code	16
 1630              		.thumb_func
 1632              	TIM_SetCompare3:
 1633              	.LFB59:
1209:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 1634              		.loc 1 1209 0
 1635              		.cfi_startproc
 1636              	.LVL205:
1214:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1637              		.loc 1 1214 0
 1638 0000 C163     		str	r1, [r0, #60]
1215:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1639              		.loc 1 1215 0
 1640              		@ sp needed
 1641 0002 7047     		bx	lr
 1642              		.cfi_endproc
 1643              	.LFE59:
 1645              		.section	.text.TIM_SetCompare4,"ax",%progbits
 1646              		.align	2
 1647              		.global	TIM_SetCompare4
 1648              		.code	16
 1649              		.thumb_func
 1651              	TIM_SetCompare4:
 1652              	.LFB60:
1225:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 1653              		.loc 1 1225 0
 1654              		.cfi_startproc
 1655              	.LVL206:
1230:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1656              		.loc 1 1230 0
 1657 0000 0164     		str	r1, [r0, #64]
1231:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1658              		.loc 1 1231 0
 1659              		@ sp needed
 1660 0002 7047     		bx	lr
 1661              		.cfi_endproc
 1662              	.LFE60:
 1664              		.section	.text.TIM_ForcedOC1Config,"ax",%progbits
 1665              		.align	2
 1666              		.global	TIM_ForcedOC1Config
 1667              		.code	16
 1668              		.thumb_func
 1670              	TIM_ForcedOC1Config:
 1671              	.LFB61:
1244:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1672              		.loc 1 1244 0
 1673              		.cfi_startproc
 1674              	.LVL207:
1249:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1M Bits */
 1675              		.loc 1 1249 0
 1676 0000 038B     		ldrh	r3, [r0, #24]
 1677              	.LVL208:
1251:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
 1678              		.loc 1 1251 0
 1679 0002 7022     		mov	r2, #112
 1680 0004 9343     		bic	r3, r2
 1681              	.LVL209:
1253:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
 1682              		.loc 1 1253 0
 1683 0006 1943     		orr	r1, r3
 1684              	.LVL210:
1255:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1685              		.loc 1 1255 0
 1686 0008 0183     		strh	r1, [r0, #24]
1256:.\StdPeriphLib\src/stm32f0xx_tim.c ****  
 1687              		.loc 1 1256 0
 1688              		@ sp needed
 1689 000a 7047     		bx	lr
 1690              		.cfi_endproc
 1691              	.LFE61:
 1693              		.section	.text.TIM_ForcedOC2Config,"ax",%progbits
 1694              		.align	2
 1695              		.global	TIM_ForcedOC2Config
 1696              		.code	16
 1697              		.thumb_func
 1699              	TIM_ForcedOC2Config:
 1700              	.LFB62:
1269:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1701              		.loc 1 1269 0
 1702              		.cfi_startproc
 1703              	.LVL211:
1276:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2M Bits */
 1704              		.loc 1 1276 0
 1705 0000 028B     		ldrh	r2, [r0, #24]
 1706              	.LVL212:
1278:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
 1707              		.loc 1 1278 0
 1708 0002 034B     		ldr	r3, .L88
 1709 0004 1340     		and	r3, r2
 1710              	.LVL213:
1280:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
 1711              		.loc 1 1280 0
 1712 0006 0902     		lsl	r1, r1, #8
 1713              	.LVL214:
 1714 0008 1943     		orr	r1, r3
 1715 000a 89B2     		uxth	r1, r1
 1716              	.LVL215:
1282:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1717              		.loc 1 1282 0
 1718 000c 0183     		strh	r1, [r0, #24]
1283:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1719              		.loc 1 1283 0
 1720              		@ sp needed
 1721 000e 7047     		bx	lr
 1722              	.L89:
 1723              		.align	2
 1724              	.L88:
 1725 0010 FF8FFFFF 		.word	-28673
 1726              		.cfi_endproc
 1727              	.LFE62:
 1729              		.section	.text.TIM_ForcedOC3Config,"ax",%progbits
 1730              		.align	2
 1731              		.global	TIM_ForcedOC3Config
 1732              		.code	16
 1733              		.thumb_func
 1735              	TIM_ForcedOC3Config:
 1736              	.LFB63:
1296:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
 1737              		.loc 1 1296 0
 1738              		.cfi_startproc
 1739              	.LVL216:
1303:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1M Bits */
 1740              		.loc 1 1303 0
 1741 0000 838B     		ldrh	r3, [r0, #28]
 1742              	.LVL217:
1305:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
 1743              		.loc 1 1305 0
 1744 0002 7022     		mov	r2, #112
 1745 0004 9343     		bic	r3, r2
 1746              	.LVL218:
1307:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
 1747              		.loc 1 1307 0
 1748 0006 1943     		orr	r1, r3
 1749              	.LVL219:
1309:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1750              		.loc 1 1309 0
 1751 0008 8183     		strh	r1, [r0, #28]
1310:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1752              		.loc 1 1310 0
 1753              		@ sp needed
 1754 000a 7047     		bx	lr
 1755              		.cfi_endproc
 1756              	.LFE63:
 1758              		.section	.text.TIM_ForcedOC4Config,"ax",%progbits
 1759              		.align	2
 1760              		.global	TIM_ForcedOC4Config
 1761              		.code	16
 1762              		.thumb_func
 1764              	TIM_ForcedOC4Config:
 1765              	.LFB64:
1323:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
 1766              		.loc 1 1323 0
 1767              		.cfi_startproc
 1768              	.LVL220:
1329:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2M Bits */
 1769              		.loc 1 1329 0
 1770 0000 828B     		ldrh	r2, [r0, #28]
 1771              	.LVL221:
1331:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
 1772              		.loc 1 1331 0
 1773 0002 034B     		ldr	r3, .L92
 1774 0004 1340     		and	r3, r2
 1775              	.LVL222:
1333:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
 1776              		.loc 1 1333 0
 1777 0006 0902     		lsl	r1, r1, #8
 1778              	.LVL223:
 1779 0008 1943     		orr	r1, r3
 1780 000a 89B2     		uxth	r1, r1
 1781              	.LVL224:
1335:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1782              		.loc 1 1335 0
 1783 000c 8183     		strh	r1, [r0, #28]
1336:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1784              		.loc 1 1336 0
 1785              		@ sp needed
 1786 000e 7047     		bx	lr
 1787              	.L93:
 1788              		.align	2
 1789              	.L92:
 1790 0010 FF8FFFFF 		.word	-28673
 1791              		.cfi_endproc
 1792              	.LFE64:
 1794              		.section	.text.TIM_CCPreloadControl,"ax",%progbits
 1795              		.align	2
 1796              		.global	TIM_CCPreloadControl
 1797              		.code	16
 1798              		.thumb_func
 1800              	TIM_CCPreloadControl:
 1801              	.LFB65:
1347:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 1802              		.loc 1 1347 0
 1803              		.cfi_startproc
 1804              	.LVL225:
1351:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 1805              		.loc 1 1351 0
 1806 0000 0029     		cmp	r1, #0
 1807 0002 04D0     		beq	.L95
1354:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 1808              		.loc 1 1354 0
 1809 0004 8288     		ldrh	r2, [r0, #4]
 1810 0006 0123     		mov	r3, #1
 1811 0008 1343     		orr	r3, r2
 1812 000a 8380     		strh	r3, [r0, #4]
 1813 000c 03E0     		b	.L94
 1814              	.L95:
1359:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 1815              		.loc 1 1359 0
 1816 000e 8388     		ldrh	r3, [r0, #4]
 1817 0010 0122     		mov	r2, #1
 1818 0012 9343     		bic	r3, r2
 1819 0014 8380     		strh	r3, [r0, #4]
 1820              	.L94:
1361:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1821              		.loc 1 1361 0
 1822              		@ sp needed
 1823 0016 7047     		bx	lr
 1824              		.cfi_endproc
 1825              	.LFE65:
 1827              		.section	.text.TIM_OC1PreloadConfig,"ax",%progbits
 1828              		.align	2
 1829              		.global	TIM_OC1PreloadConfig
 1830              		.code	16
 1831              		.thumb_func
 1833              	TIM_OC1PreloadConfig:
 1834              	.LFB66:
1375:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1835              		.loc 1 1375 0
 1836              		.cfi_startproc
 1837              	.LVL226:
1381:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1PE Bit */
 1838              		.loc 1 1381 0
 1839 0000 038B     		ldrh	r3, [r0, #24]
 1840              	.LVL227:
1383:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
 1841              		.loc 1 1383 0
 1842 0002 0822     		mov	r2, #8
 1843 0004 9343     		bic	r3, r2
 1844              	.LVL228:
1385:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
 1845              		.loc 1 1385 0
 1846 0006 1943     		orr	r1, r3
 1847              	.LVL229:
1387:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1848              		.loc 1 1387 0
 1849 0008 0183     		strh	r1, [r0, #24]
1388:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1850              		.loc 1 1388 0
 1851              		@ sp needed
 1852 000a 7047     		bx	lr
 1853              		.cfi_endproc
 1854              	.LFE66:
 1856              		.section	.text.TIM_OC2PreloadConfig,"ax",%progbits
 1857              		.align	2
 1858              		.global	TIM_OC2PreloadConfig
 1859              		.code	16
 1860              		.thumb_func
 1862              	TIM_OC2PreloadConfig:
 1863              	.LFB67:
1401:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1864              		.loc 1 1401 0
 1865              		.cfi_startproc
 1866              	.LVL230:
1407:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2PE Bit */
 1867              		.loc 1 1407 0
 1868 0000 028B     		ldrh	r2, [r0, #24]
 1869              	.LVL231:
1409:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
 1870              		.loc 1 1409 0
 1871 0002 034B     		ldr	r3, .L99
 1872 0004 1340     		and	r3, r2
 1873              	.LVL232:
1411:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
 1874              		.loc 1 1411 0
 1875 0006 0902     		lsl	r1, r1, #8
 1876              	.LVL233:
 1877 0008 1943     		orr	r1, r3
 1878 000a 89B2     		uxth	r1, r1
 1879              	.LVL234:
1413:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1880              		.loc 1 1413 0
 1881 000c 0183     		strh	r1, [r0, #24]
1414:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1882              		.loc 1 1414 0
 1883              		@ sp needed
 1884 000e 7047     		bx	lr
 1885              	.L100:
 1886              		.align	2
 1887              	.L99:
 1888 0010 FFF7FFFF 		.word	-2049
 1889              		.cfi_endproc
 1890              	.LFE67:
 1892              		.section	.text.TIM_OC3PreloadConfig,"ax",%progbits
 1893              		.align	2
 1894              		.global	TIM_OC3PreloadConfig
 1895              		.code	16
 1896              		.thumb_func
 1898              	TIM_OC3PreloadConfig:
 1899              	.LFB68:
1427:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
 1900              		.loc 1 1427 0
 1901              		.cfi_startproc
 1902              	.LVL235:
1434:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC3PE Bit */
 1903              		.loc 1 1434 0
 1904 0000 838B     		ldrh	r3, [r0, #28]
 1905              	.LVL236:
1436:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
 1906              		.loc 1 1436 0
 1907 0002 0822     		mov	r2, #8
 1908 0004 9343     		bic	r3, r2
 1909              	.LVL237:
1438:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
 1910              		.loc 1 1438 0
 1911 0006 1943     		orr	r1, r3
 1912              	.LVL238:
1440:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1913              		.loc 1 1440 0
 1914 0008 8183     		strh	r1, [r0, #28]
1441:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1915              		.loc 1 1441 0
 1916              		@ sp needed
 1917 000a 7047     		bx	lr
 1918              		.cfi_endproc
 1919              	.LFE68:
 1921              		.section	.text.TIM_OC4PreloadConfig,"ax",%progbits
 1922              		.align	2
 1923              		.global	TIM_OC4PreloadConfig
 1924              		.code	16
 1925              		.thumb_func
 1927              	TIM_OC4PreloadConfig:
 1928              	.LFB69:
1454:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
 1929              		.loc 1 1454 0
 1930              		.cfi_startproc
 1931              	.LVL239:
1461:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC4PE Bit */
 1932              		.loc 1 1461 0
 1933 0000 828B     		ldrh	r2, [r0, #28]
 1934              	.LVL240:
1463:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
 1935              		.loc 1 1463 0
 1936 0002 034B     		ldr	r3, .L103
 1937 0004 1340     		and	r3, r2
 1938              	.LVL241:
1465:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
 1939              		.loc 1 1465 0
 1940 0006 0902     		lsl	r1, r1, #8
 1941              	.LVL242:
 1942 0008 1943     		orr	r1, r3
 1943 000a 89B2     		uxth	r1, r1
 1944              	.LVL243:
1467:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1945              		.loc 1 1467 0
 1946 000c 8183     		strh	r1, [r0, #28]
1468:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1947              		.loc 1 1468 0
 1948              		@ sp needed
 1949 000e 7047     		bx	lr
 1950              	.L104:
 1951              		.align	2
 1952              	.L103:
 1953 0010 FFF7FFFF 		.word	-2049
 1954              		.cfi_endproc
 1955              	.LFE69:
 1957              		.section	.text.TIM_OC1FastConfig,"ax",%progbits
 1958              		.align	2
 1959              		.global	TIM_OC1FastConfig
 1960              		.code	16
 1961              		.thumb_func
 1963              	TIM_OC1FastConfig:
 1964              	.LFB70:
1481:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1965              		.loc 1 1481 0
 1966              		.cfi_startproc
 1967              	.LVL244:
1489:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1FE Bit */
 1968              		.loc 1 1489 0
 1969 0000 038B     		ldrh	r3, [r0, #24]
 1970              	.LVL245:
1491:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
 1971              		.loc 1 1491 0
 1972 0002 0422     		mov	r2, #4
 1973 0004 9343     		bic	r3, r2
 1974              	.LVL246:
1493:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 1975              		.loc 1 1493 0
 1976 0006 1943     		orr	r1, r3
 1977              	.LVL247:
1495:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 1978              		.loc 1 1495 0
 1979 0008 0183     		strh	r1, [r0, #24]
1496:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 1980              		.loc 1 1496 0
 1981              		@ sp needed
 1982 000a 7047     		bx	lr
 1983              		.cfi_endproc
 1984              	.LFE70:
 1986              		.section	.text.TIM_OC2FastConfig,"ax",%progbits
 1987              		.align	2
 1988              		.global	TIM_OC2FastConfig
 1989              		.code	16
 1990              		.thumb_func
 1992              	TIM_OC2FastConfig:
 1993              	.LFB71:
1509:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
 1994              		.loc 1 1509 0
 1995              		.cfi_startproc
 1996              	.LVL248:
1517:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2FE Bit */
 1997              		.loc 1 1517 0
 1998 0000 028B     		ldrh	r2, [r0, #24]
 1999              	.LVL249:
1519:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
 2000              		.loc 1 1519 0
 2001 0002 034B     		ldr	r3, .L107
 2002 0004 1340     		and	r3, r2
 2003              	.LVL250:
1521:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 2004              		.loc 1 1521 0
 2005 0006 0902     		lsl	r1, r1, #8
 2006              	.LVL251:
 2007 0008 1943     		orr	r1, r3
 2008 000a 89B2     		uxth	r1, r1
 2009              	.LVL252:
1523:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2010              		.loc 1 1523 0
 2011 000c 0183     		strh	r1, [r0, #24]
1524:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2012              		.loc 1 1524 0
 2013              		@ sp needed
 2014 000e 7047     		bx	lr
 2015              	.L108:
 2016              		.align	2
 2017              	.L107:
 2018 0010 FFFBFFFF 		.word	-1025
 2019              		.cfi_endproc
 2020              	.LFE71:
 2022              		.section	.text.TIM_OC3FastConfig,"ax",%progbits
 2023              		.align	2
 2024              		.global	TIM_OC3FastConfig
 2025              		.code	16
 2026              		.thumb_func
 2028              	TIM_OC3FastConfig:
 2029              	.LFB72:
1537:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2030              		.loc 1 1537 0
 2031              		.cfi_startproc
 2032              	.LVL253:
1545:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC3FE Bit */
 2033              		.loc 1 1545 0
 2034 0000 838B     		ldrh	r3, [r0, #28]
 2035              	.LVL254:
1547:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
 2036              		.loc 1 1547 0
 2037 0002 0422     		mov	r2, #4
 2038 0004 9343     		bic	r3, r2
 2039              	.LVL255:
1549:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
 2040              		.loc 1 1549 0
 2041 0006 1943     		orr	r1, r3
 2042              	.LVL256:
1551:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2043              		.loc 1 1551 0
 2044 0008 8183     		strh	r1, [r0, #28]
1552:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2045              		.loc 1 1552 0
 2046              		@ sp needed
 2047 000a 7047     		bx	lr
 2048              		.cfi_endproc
 2049              	.LFE72:
 2051              		.section	.text.TIM_OC4FastConfig,"ax",%progbits
 2052              		.align	2
 2053              		.global	TIM_OC4FastConfig
 2054              		.code	16
 2055              		.thumb_func
 2057              	TIM_OC4FastConfig:
 2058              	.LFB73:
1565:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2059              		.loc 1 1565 0
 2060              		.cfi_startproc
 2061              	.LVL257:
1573:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC4FE Bit */
 2062              		.loc 1 1573 0
 2063 0000 828B     		ldrh	r2, [r0, #28]
 2064              	.LVL258:
1575:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
 2065              		.loc 1 1575 0
 2066 0002 034B     		ldr	r3, .L111
 2067 0004 1340     		and	r3, r2
 2068              	.LVL259:
1577:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
 2069              		.loc 1 1577 0
 2070 0006 0902     		lsl	r1, r1, #8
 2071              	.LVL260:
 2072 0008 1943     		orr	r1, r3
 2073 000a 89B2     		uxth	r1, r1
 2074              	.LVL261:
1579:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2075              		.loc 1 1579 0
 2076 000c 8183     		strh	r1, [r0, #28]
1580:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2077              		.loc 1 1580 0
 2078              		@ sp needed
 2079 000e 7047     		bx	lr
 2080              	.L112:
 2081              		.align	2
 2082              	.L111:
 2083 0010 FFFBFFFF 		.word	-1025
 2084              		.cfi_endproc
 2085              	.LFE73:
 2087              		.section	.text.TIM_ClearOC1Ref,"ax",%progbits
 2088              		.align	2
 2089              		.global	TIM_ClearOC1Ref
 2090              		.code	16
 2091              		.thumb_func
 2093              	TIM_ClearOC1Ref:
 2094              	.LFB74:
1593:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2095              		.loc 1 1593 0
 2096              		.cfi_startproc
 2097              	.LVL262:
1600:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC1CE Bit */
 2098              		.loc 1 1600 0
 2099 0000 038B     		ldrh	r3, [r0, #24]
 2100              	.LVL263:
1602:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
 2101              		.loc 1 1602 0
 2102 0002 8022     		mov	r2, #128
 2103 0004 9343     		bic	r3, r2
 2104              	.LVL264:
1604:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
 2105              		.loc 1 1604 0
 2106 0006 1943     		orr	r1, r3
 2107              	.LVL265:
1606:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2108              		.loc 1 1606 0
 2109 0008 0183     		strh	r1, [r0, #24]
1607:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2110              		.loc 1 1607 0
 2111              		@ sp needed
 2112 000a 7047     		bx	lr
 2113              		.cfi_endproc
 2114              	.LFE74:
 2116              		.section	.text.TIM_ClearOC2Ref,"ax",%progbits
 2117              		.align	2
 2118              		.global	TIM_ClearOC2Ref
 2119              		.code	16
 2120              		.thumb_func
 2122              	TIM_ClearOC2Ref:
 2123              	.LFB75:
1620:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2124              		.loc 1 1620 0
 2125              		.cfi_startproc
 2126              	.LVL266:
1627:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC2CE Bit */
 2127              		.loc 1 1627 0
 2128 0000 038B     		ldrh	r3, [r0, #24]
 2129              	.LVL267:
1629:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
 2130              		.loc 1 1629 0
 2131 0002 5B04     		lsl	r3, r3, #17
 2132              	.LVL268:
 2133 0004 5B0C     		lsr	r3, r3, #17
 2134              	.LVL269:
1631:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
 2135              		.loc 1 1631 0
 2136 0006 0902     		lsl	r1, r1, #8
 2137              	.LVL270:
 2138 0008 1943     		orr	r1, r3
 2139 000a 89B2     		uxth	r1, r1
 2140              	.LVL271:
1633:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2141              		.loc 1 1633 0
 2142 000c 0183     		strh	r1, [r0, #24]
1634:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2143              		.loc 1 1634 0
 2144              		@ sp needed
 2145 000e 7047     		bx	lr
 2146              		.cfi_endproc
 2147              	.LFE75:
 2149              		.section	.text.TIM_ClearOC3Ref,"ax",%progbits
 2150              		.align	2
 2151              		.global	TIM_ClearOC3Ref
 2152              		.code	16
 2153              		.thumb_func
 2155              	TIM_ClearOC3Ref:
 2156              	.LFB76:
1647:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2157              		.loc 1 1647 0
 2158              		.cfi_startproc
 2159              	.LVL272:
1654:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC3CE Bit */
 2160              		.loc 1 1654 0
 2161 0000 838B     		ldrh	r3, [r0, #28]
 2162              	.LVL273:
1656:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
 2163              		.loc 1 1656 0
 2164 0002 8022     		mov	r2, #128
 2165 0004 9343     		bic	r3, r2
 2166              	.LVL274:
1658:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
 2167              		.loc 1 1658 0
 2168 0006 1943     		orr	r1, r3
 2169              	.LVL275:
1660:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2170              		.loc 1 1660 0
 2171 0008 8183     		strh	r1, [r0, #28]
1661:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2172              		.loc 1 1661 0
 2173              		@ sp needed
 2174 000a 7047     		bx	lr
 2175              		.cfi_endproc
 2176              	.LFE76:
 2178              		.section	.text.TIM_ClearOC4Ref,"ax",%progbits
 2179              		.align	2
 2180              		.global	TIM_ClearOC4Ref
 2181              		.code	16
 2182              		.thumb_func
 2184              	TIM_ClearOC4Ref:
 2185              	.LFB77:
1674:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2186              		.loc 1 1674 0
 2187              		.cfi_startproc
 2188              	.LVL276:
1681:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the OC4CE Bit */
 2189              		.loc 1 1681 0
 2190 0000 838B     		ldrh	r3, [r0, #28]
 2191              	.LVL277:
1683:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
 2192              		.loc 1 1683 0
 2193 0002 5B04     		lsl	r3, r3, #17
 2194              	.LVL278:
 2195 0004 5B0C     		lsr	r3, r3, #17
 2196              	.LVL279:
1685:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
 2197              		.loc 1 1685 0
 2198 0006 0902     		lsl	r1, r1, #8
 2199              	.LVL280:
 2200 0008 1943     		orr	r1, r3
 2201 000a 89B2     		uxth	r1, r1
 2202              	.LVL281:
1687:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2203              		.loc 1 1687 0
 2204 000c 8183     		strh	r1, [r0, #28]
1688:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2205              		.loc 1 1688 0
 2206              		@ sp needed
 2207 000e 7047     		bx	lr
 2208              		.cfi_endproc
 2209              	.LFE77:
 2211              		.section	.text.TIM_OC1PolarityConfig,"ax",%progbits
 2212              		.align	2
 2213              		.global	TIM_OC1PolarityConfig
 2214              		.code	16
 2215              		.thumb_func
 2217              	TIM_OC1PolarityConfig:
 2218              	.LFB78:
1701:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
 2219              		.loc 1 1701 0
 2220              		.cfi_startproc
 2221              	.LVL282:
1708:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC1P Bit */
 2222              		.loc 1 1708 0
 2223 0000 038C     		ldrh	r3, [r0, #32]
 2224              	.LVL283:
1710:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCPolarity;
 2225              		.loc 1 1710 0
 2226 0002 0222     		mov	r2, #2
 2227 0004 9343     		bic	r3, r2
 2228              	.LVL284:
1711:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
 2229              		.loc 1 1711 0
 2230 0006 1943     		orr	r1, r3
 2231              	.LVL285:
1713:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2232              		.loc 1 1713 0
 2233 0008 0184     		strh	r1, [r0, #32]
1714:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2234              		.loc 1 1714 0
 2235              		@ sp needed
 2236 000a 7047     		bx	lr
 2237              		.cfi_endproc
 2238              	.LFE78:
 2240              		.section	.text.TIM_OC1NPolarityConfig,"ax",%progbits
 2241              		.align	2
 2242              		.global	TIM_OC1NPolarityConfig
 2243              		.code	16
 2244              		.thumb_func
 2246              	TIM_OC1NPolarityConfig:
 2247              	.LFB79:
1726:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
 2248              		.loc 1 1726 0
 2249              		.cfi_startproc
 2250              	.LVL286:
1732:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC1NP Bit */
 2251              		.loc 1 1732 0
 2252 0000 038C     		ldrh	r3, [r0, #32]
 2253              	.LVL287:
1734:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
 2254              		.loc 1 1734 0
 2255 0002 0822     		mov	r2, #8
 2256 0004 9343     		bic	r3, r2
 2257              	.LVL288:
1735:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
 2258              		.loc 1 1735 0
 2259 0006 1943     		orr	r1, r3
 2260              	.LVL289:
1737:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2261              		.loc 1 1737 0
 2262 0008 0184     		strh	r1, [r0, #32]
1738:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2263              		.loc 1 1738 0
 2264              		@ sp needed
 2265 000a 7047     		bx	lr
 2266              		.cfi_endproc
 2267              	.LFE79:
 2269              		.section	.text.TIM_OC2PolarityConfig,"ax",%progbits
 2270              		.align	2
 2271              		.global	TIM_OC2PolarityConfig
 2272              		.code	16
 2273              		.thumb_func
 2275              	TIM_OC2PolarityConfig:
 2276              	.LFB80:
1751:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
 2277              		.loc 1 1751 0
 2278              		.cfi_startproc
 2279              	.LVL290:
1758:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC2P Bit */
 2280              		.loc 1 1758 0
 2281 0000 038C     		ldrh	r3, [r0, #32]
 2282              	.LVL291:
1760:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 2283              		.loc 1 1760 0
 2284 0002 2022     		mov	r2, #32
 2285 0004 9343     		bic	r3, r2
 2286              	.LVL292:
1761:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
 2287              		.loc 1 1761 0
 2288 0006 0901     		lsl	r1, r1, #4
 2289              	.LVL293:
 2290 0008 1943     		orr	r1, r3
 2291 000a 89B2     		uxth	r1, r1
 2292              	.LVL294:
1763:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2293              		.loc 1 1763 0
 2294 000c 0184     		strh	r1, [r0, #32]
1764:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2295              		.loc 1 1764 0
 2296              		@ sp needed
 2297 000e 7047     		bx	lr
 2298              		.cfi_endproc
 2299              	.LFE80:
 2301              		.section	.text.TIM_OC2NPolarityConfig,"ax",%progbits
 2302              		.align	2
 2303              		.global	TIM_OC2NPolarityConfig
 2304              		.code	16
 2305              		.thumb_func
 2307              	TIM_OC2NPolarityConfig:
 2308              	.LFB81:
1776:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
 2309              		.loc 1 1776 0
 2310              		.cfi_startproc
 2311              	.LVL295:
1782:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC2NP Bit */
 2312              		.loc 1 1782 0
 2313 0000 038C     		ldrh	r3, [r0, #32]
 2314              	.LVL296:
1784:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 2315              		.loc 1 1784 0
 2316 0002 8022     		mov	r2, #128
 2317 0004 9343     		bic	r3, r2
 2318              	.LVL297:
1785:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
 2319              		.loc 1 1785 0
 2320 0006 0901     		lsl	r1, r1, #4
 2321              	.LVL298:
 2322 0008 1943     		orr	r1, r3
 2323 000a 89B2     		uxth	r1, r1
 2324              	.LVL299:
1787:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2325              		.loc 1 1787 0
 2326 000c 0184     		strh	r1, [r0, #32]
1788:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2327              		.loc 1 1788 0
 2328              		@ sp needed
 2329 000e 7047     		bx	lr
 2330              		.cfi_endproc
 2331              	.LFE81:
 2333              		.section	.text.TIM_OC3PolarityConfig,"ax",%progbits
 2334              		.align	2
 2335              		.global	TIM_OC3PolarityConfig
 2336              		.code	16
 2337              		.thumb_func
 2339              	TIM_OC3PolarityConfig:
 2340              	.LFB82:
1801:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
 2341              		.loc 1 1801 0
 2342              		.cfi_startproc
 2343              	.LVL300:
1808:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC3P Bit */
 2344              		.loc 1 1808 0
 2345 0000 028C     		ldrh	r2, [r0, #32]
 2346              	.LVL301:
1810:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 2347              		.loc 1 1810 0
 2348 0002 034B     		ldr	r3, .L122
 2349 0004 1340     		and	r3, r2
 2350              	.LVL302:
1811:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
 2351              		.loc 1 1811 0
 2352 0006 0902     		lsl	r1, r1, #8
 2353              	.LVL303:
 2354 0008 1943     		orr	r1, r3
 2355 000a 89B2     		uxth	r1, r1
 2356              	.LVL304:
1813:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2357              		.loc 1 1813 0
 2358 000c 0184     		strh	r1, [r0, #32]
1814:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2359              		.loc 1 1814 0
 2360              		@ sp needed
 2361 000e 7047     		bx	lr
 2362              	.L123:
 2363              		.align	2
 2364              	.L122:
 2365 0010 FFFDFFFF 		.word	-513
 2366              		.cfi_endproc
 2367              	.LFE82:
 2369              		.section	.text.TIM_OC3NPolarityConfig,"ax",%progbits
 2370              		.align	2
 2371              		.global	TIM_OC3NPolarityConfig
 2372              		.code	16
 2373              		.thumb_func
 2375              	TIM_OC3NPolarityConfig:
 2376              	.LFB83:
1826:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
 2377              		.loc 1 1826 0
 2378              		.cfi_startproc
 2379              	.LVL305:
1833:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC3NP Bit */
 2380              		.loc 1 1833 0
 2381 0000 028C     		ldrh	r2, [r0, #32]
 2382              	.LVL306:
1835:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 2383              		.loc 1 1835 0
 2384 0002 034B     		ldr	r3, .L125
 2385 0004 1340     		and	r3, r2
 2386              	.LVL307:
1836:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
 2387              		.loc 1 1836 0
 2388 0006 0902     		lsl	r1, r1, #8
 2389              	.LVL308:
 2390 0008 1943     		orr	r1, r3
 2391 000a 89B2     		uxth	r1, r1
 2392              	.LVL309:
1838:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2393              		.loc 1 1838 0
 2394 000c 0184     		strh	r1, [r0, #32]
1839:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2395              		.loc 1 1839 0
 2396              		@ sp needed
 2397 000e 7047     		bx	lr
 2398              	.L126:
 2399              		.align	2
 2400              	.L125:
 2401 0010 FFF7FFFF 		.word	-2049
 2402              		.cfi_endproc
 2403              	.LFE83:
 2405              		.section	.text.TIM_OC4PolarityConfig,"ax",%progbits
 2406              		.align	2
 2407              		.global	TIM_OC4PolarityConfig
 2408              		.code	16
 2409              		.thumb_func
 2411              	TIM_OC4PolarityConfig:
 2412              	.LFB84:
1852:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
 2413              		.loc 1 1852 0
 2414              		.cfi_startproc
 2415              	.LVL310:
1859:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set or Reset the CC4P Bit */
 2416              		.loc 1 1859 0
 2417 0000 028C     		ldrh	r2, [r0, #32]
 2418              	.LVL311:
1861:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 2419              		.loc 1 1861 0
 2420 0002 034B     		ldr	r3, .L128
 2421 0004 1340     		and	r3, r2
 2422              	.LVL312:
1862:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
 2423              		.loc 1 1862 0
 2424 0006 0903     		lsl	r1, r1, #12
 2425              	.LVL313:
 2426 0008 1943     		orr	r1, r3
 2427 000a 89B2     		uxth	r1, r1
 2428              	.LVL314:
1864:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2429              		.loc 1 1864 0
 2430 000c 0184     		strh	r1, [r0, #32]
1865:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2431              		.loc 1 1865 0
 2432              		@ sp needed
 2433 000e 7047     		bx	lr
 2434              	.L129:
 2435              		.align	2
 2436              	.L128:
 2437 0010 FFDFFFFF 		.word	-8193
 2438              		.cfi_endproc
 2439              	.LFE84:
 2441              		.section	.text.TIM_SelectOCREFClear,"ax",%progbits
 2442              		.align	2
 2443              		.global	TIM_SelectOCREFClear
 2444              		.code	16
 2445              		.thumb_func
 2447              	TIM_SelectOCREFClear:
 2448              	.LFB85:
1878:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2449              		.loc 1 1878 0
 2450              		.cfi_startproc
 2451              	.LVL315:
1884:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->SMCR |=  TIM_OCReferenceClear;
 2452              		.loc 1 1884 0
 2453 0000 0389     		ldrh	r3, [r0, #8]
 2454 0002 0822     		mov	r2, #8
 2455 0004 9343     		bic	r3, r2
 2456 0006 0381     		strh	r3, [r0, #8]
1885:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2457              		.loc 1 1885 0
 2458 0008 0389     		ldrh	r3, [r0, #8]
 2459 000a 1943     		orr	r1, r3
 2460              	.LVL316:
 2461 000c 0181     		strh	r1, [r0, #8]
1886:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2462              		.loc 1 1886 0
 2463              		@ sp needed
 2464 000e 7047     		bx	lr
 2465              		.cfi_endproc
 2466              	.LFE85:
 2468              		.section	.text.TIM_CCxCmd,"ax",%progbits
 2469              		.align	2
 2470              		.global	TIM_CCxCmd
 2471              		.code	16
 2472              		.thumb_func
 2474              	TIM_CCxCmd:
 2475              	.LFB86:
1903:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmp = 0;
 2476              		.loc 1 1903 0
 2477              		.cfi_startproc
 2478              	.LVL317:
 2479 0000 10B5     		push	{r4, lr}
 2480              	.LCFI9:
 2481              		.cfi_def_cfa_offset 8
 2482              		.cfi_offset 4, -8
 2483              		.cfi_offset 14, -4
 2484              	.LVL318:
1913:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2485              		.loc 1 1913 0
 2486 0002 038C     		ldrh	r3, [r0, #32]
1910:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2487              		.loc 1 1910 0
 2488 0004 0124     		mov	r4, #1
 2489 0006 8C40     		lsl	r4, r4, r1
1913:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2490              		.loc 1 1913 0
 2491 0008 A343     		bic	r3, r4
 2492 000a 0384     		strh	r3, [r0, #32]
1916:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2493              		.loc 1 1916 0
 2494 000c 038C     		ldrh	r3, [r0, #32]
 2495 000e 8A40     		lsl	r2, r2, r1
 2496              	.LVL319:
 2497 0010 1A43     		orr	r2, r3
 2498 0012 92B2     		uxth	r2, r2
 2499 0014 0284     		strh	r2, [r0, #32]
1917:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2500              		.loc 1 1917 0
 2501              		@ sp needed
 2502 0016 10BD     		pop	{r4, pc}
 2503              		.cfi_endproc
 2504              	.LFE86:
 2506              		.section	.text.TIM_CCxNCmd,"ax",%progbits
 2507              		.align	2
 2508              		.global	TIM_CCxNCmd
 2509              		.code	16
 2510              		.thumb_func
 2512              	TIM_CCxNCmd:
 2513              	.LFB87:
1932:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmp = 0;
 2514              		.loc 1 1932 0
 2515              		.cfi_startproc
 2516              	.LVL320:
 2517 0000 10B5     		push	{r4, lr}
 2518              	.LCFI10:
 2519              		.cfi_def_cfa_offset 8
 2520              		.cfi_offset 4, -8
 2521              		.cfi_offset 14, -4
 2522              	.LVL321:
1943:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2523              		.loc 1 1943 0
 2524 0002 038C     		ldrh	r3, [r0, #32]
1940:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2525              		.loc 1 1940 0
 2526 0004 0424     		mov	r4, #4
 2527 0006 8C40     		lsl	r4, r4, r1
1943:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2528              		.loc 1 1943 0
 2529 0008 A343     		bic	r3, r4
 2530 000a 0384     		strh	r3, [r0, #32]
1946:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2531              		.loc 1 1946 0
 2532 000c 038C     		ldrh	r3, [r0, #32]
 2533 000e 8A40     		lsl	r2, r2, r1
 2534              	.LVL322:
 2535 0010 1A43     		orr	r2, r3
 2536 0012 92B2     		uxth	r2, r2
 2537 0014 0284     		strh	r2, [r0, #32]
1947:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2538              		.loc 1 1947 0
 2539              		@ sp needed
 2540 0016 10BD     		pop	{r4, pc}
 2541              		.cfi_endproc
 2542              	.LFE87:
 2544              		.section	.text.TIM_SelectCOM,"ax",%progbits
 2545              		.align	2
 2546              		.global	TIM_SelectCOM
 2547              		.code	16
 2548              		.thumb_func
 2550              	TIM_SelectCOM:
 2551              	.LFB88:
1957:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2552              		.loc 1 1957 0
 2553              		.cfi_startproc
 2554              	.LVL323:
1961:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 2555              		.loc 1 1961 0
 2556 0000 0029     		cmp	r1, #0
 2557 0002 04D0     		beq	.L134
1964:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 2558              		.loc 1 1964 0
 2559 0004 8288     		ldrh	r2, [r0, #4]
 2560 0006 0423     		mov	r3, #4
 2561 0008 1343     		orr	r3, r2
 2562 000a 8380     		strh	r3, [r0, #4]
 2563 000c 03E0     		b	.L133
 2564              	.L134:
1969:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 2565              		.loc 1 1969 0
 2566 000e 8388     		ldrh	r3, [r0, #4]
 2567 0010 0422     		mov	r2, #4
 2568 0012 9343     		bic	r3, r2
 2569 0014 8380     		strh	r3, [r0, #4]
 2570              	.L133:
1971:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2571              		.loc 1 1971 0
 2572              		@ sp needed
 2573 0016 7047     		bx	lr
 2574              		.cfi_endproc
 2575              	.LFE88:
 2577              		.section	.text.TIM_ICStructInit,"ax",%progbits
 2578              		.align	2
 2579              		.global	TIM_ICStructInit
 2580              		.code	16
 2581              		.thumb_func
 2583              	TIM_ICStructInit:
 2584              	.LFB90:
2092:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the default configuration */
 2585              		.loc 1 2092 0
 2586              		.cfi_startproc
 2587              	.LVL324:
2094:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 2588              		.loc 1 2094 0
 2589 0000 0023     		mov	r3, #0
 2590 0002 0380     		strh	r3, [r0]
2095:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 2591              		.loc 1 2095 0
 2592 0004 4380     		strh	r3, [r0, #2]
2096:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 2593              		.loc 1 2096 0
 2594 0006 0122     		mov	r2, #1
 2595 0008 8280     		strh	r2, [r0, #4]
2097:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
 2596              		.loc 1 2097 0
 2597 000a C380     		strh	r3, [r0, #6]
2098:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2598              		.loc 1 2098 0
 2599 000c 0381     		strh	r3, [r0, #8]
2099:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2600              		.loc 1 2099 0
 2601              		@ sp needed
 2602 000e 7047     		bx	lr
 2603              		.cfi_endproc
 2604              	.LFE90:
 2606              		.section	.text.TIM_GetCapture1,"ax",%progbits
 2607              		.align	2
 2608              		.global	TIM_GetCapture1
 2609              		.code	16
 2610              		.thumb_func
 2612              	TIM_GetCapture1:
 2613              	.LFB92:
2168:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2614              		.loc 1 2168 0
 2615              		.cfi_startproc
 2616              	.LVL325:
2173:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2617              		.loc 1 2173 0
 2618 0000 406B     		ldr	r0, [r0, #52]
 2619              	.LVL326:
2174:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2620              		.loc 1 2174 0
 2621              		@ sp needed
 2622 0002 7047     		bx	lr
 2623              		.cfi_endproc
 2624              	.LFE92:
 2626              		.section	.text.TIM_GetCapture2,"ax",%progbits
 2627              		.align	2
 2628              		.global	TIM_GetCapture2
 2629              		.code	16
 2630              		.thumb_func
 2632              	TIM_GetCapture2:
 2633              	.LFB93:
2182:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2634              		.loc 1 2182 0
 2635              		.cfi_startproc
 2636              	.LVL327:
2187:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2637              		.loc 1 2187 0
 2638 0000 806B     		ldr	r0, [r0, #56]
 2639              	.LVL328:
2188:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2640              		.loc 1 2188 0
 2641              		@ sp needed
 2642 0002 7047     		bx	lr
 2643              		.cfi_endproc
 2644              	.LFE93:
 2646              		.section	.text.TIM_GetCapture3,"ax",%progbits
 2647              		.align	2
 2648              		.global	TIM_GetCapture3
 2649              		.code	16
 2650              		.thumb_func
 2652              	TIM_GetCapture3:
 2653              	.LFB94:
2197:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2654              		.loc 1 2197 0
 2655              		.cfi_startproc
 2656              	.LVL329:
2202:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2657              		.loc 1 2202 0
 2658 0000 C06B     		ldr	r0, [r0, #60]
 2659              	.LVL330:
2203:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2660              		.loc 1 2203 0
 2661              		@ sp needed
 2662 0002 7047     		bx	lr
 2663              		.cfi_endproc
 2664              	.LFE94:
 2666              		.section	.text.TIM_GetCapture4,"ax",%progbits
 2667              		.align	2
 2668              		.global	TIM_GetCapture4
 2669              		.code	16
 2670              		.thumb_func
 2672              	TIM_GetCapture4:
 2673              	.LFB95:
2212:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2674              		.loc 1 2212 0
 2675              		.cfi_startproc
 2676              	.LVL331:
2217:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2677              		.loc 1 2217 0
 2678 0000 006C     		ldr	r0, [r0, #64]
 2679              	.LVL332:
2218:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2680              		.loc 1 2218 0
 2681              		@ sp needed
 2682 0002 7047     		bx	lr
 2683              		.cfi_endproc
 2684              	.LFE95:
 2686              		.section	.text.TIM_SetIC1Prescaler,"ax",%progbits
 2687              		.align	2
 2688              		.global	TIM_SetIC1Prescaler
 2689              		.code	16
 2690              		.thumb_func
 2692              	TIM_SetIC1Prescaler:
 2693              	.LFB96:
2233:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2694              		.loc 1 2233 0
 2695              		.cfi_startproc
 2696              	.LVL333:
2239:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the IC1PSC value */
 2697              		.loc 1 2239 0
 2698 0000 038B     		ldrh	r3, [r0, #24]
 2699 0002 0C22     		mov	r2, #12
 2700 0004 9343     		bic	r3, r2
 2701 0006 0383     		strh	r3, [r0, #24]
2241:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2702              		.loc 1 2241 0
 2703 0008 038B     		ldrh	r3, [r0, #24]
 2704 000a 1943     		orr	r1, r3
 2705              	.LVL334:
 2706 000c 0183     		strh	r1, [r0, #24]
2242:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2707              		.loc 1 2242 0
 2708              		@ sp needed
 2709 000e 7047     		bx	lr
 2710              		.cfi_endproc
 2711              	.LFE96:
 2713              		.section	.text.TIM_SetIC2Prescaler,"ax",%progbits
 2714              		.align	2
 2715              		.global	TIM_SetIC2Prescaler
 2716              		.code	16
 2717              		.thumb_func
 2719              	TIM_SetIC2Prescaler:
 2720              	.LFB97:
2257:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2721              		.loc 1 2257 0
 2722              		.cfi_startproc
 2723              	.LVL335:
2263:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the IC2PSC value */
 2724              		.loc 1 2263 0
 2725 0000 028B     		ldrh	r2, [r0, #24]
 2726 0002 044B     		ldr	r3, .L143
 2727 0004 1340     		and	r3, r2
 2728 0006 0383     		strh	r3, [r0, #24]
2265:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2729              		.loc 1 2265 0
 2730 0008 038B     		ldrh	r3, [r0, #24]
 2731 000a 0902     		lsl	r1, r1, #8
 2732              	.LVL336:
 2733 000c 1943     		orr	r1, r3
 2734 000e 89B2     		uxth	r1, r1
 2735 0010 0183     		strh	r1, [r0, #24]
2266:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2736              		.loc 1 2266 0
 2737              		@ sp needed
 2738 0012 7047     		bx	lr
 2739              	.L144:
 2740              		.align	2
 2741              	.L143:
 2742 0014 FFF3FFFF 		.word	-3073
 2743              		.cfi_endproc
 2744              	.LFE97:
 2746              		.section	.text.TIM_PWMIConfig,"ax",%progbits
 2747              		.align	2
 2748              		.global	TIM_PWMIConfig
 2749              		.code	16
 2750              		.thumb_func
 2752              	TIM_PWMIConfig:
 2753              	.LFB91:
2112:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 2754              		.loc 1 2112 0
 2755              		.cfi_startproc
 2756              	.LVL337:
 2757 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2758              	.LCFI11:
 2759              		.cfi_def_cfa_offset 24
 2760              		.cfi_offset 3, -24
 2761              		.cfi_offset 4, -20
 2762              		.cfi_offset 5, -16
 2763              		.cfi_offset 6, -12
 2764              		.cfi_offset 7, -8
 2765              		.cfi_offset 14, -4
 2766 0002 061C     		mov	r6, r0
 2767 0004 0C1C     		mov	r4, r1
 2768              	.LVL338:
2118:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 2769              		.loc 1 2118 0
 2770 0006 4988     		ldrh	r1, [r1, #2]
 2771              	.LVL339:
2124:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 2772              		.loc 1 2124 0
 2773 0008 4F42     		neg	r7, r1
 2774 000a 4F41     		adc	r7, r7, r1
 2775 000c 7F00     		lsl	r7, r7, #1
 2776              	.LVL340:
2127:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 2777              		.loc 1 2127 0
 2778 000e A288     		ldrh	r2, [r4, #4]
2133:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 2779              		.loc 1 2133 0
 2780 0010 551E     		sub	r5, r2, #1
 2781 0012 6B42     		neg	r3, r5
 2782 0014 5D41     		adc	r5, r5, r3
 2783 0016 0135     		add	r5, r5, #1
 2784              	.LVL341:
2135:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 2785              		.loc 1 2135 0
 2786 0018 2388     		ldrh	r3, [r4]
 2787 001a 002B     		cmp	r3, #0
 2788 001c 11D1     		bne	.L148
2138:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 2789              		.loc 1 2138 0
 2790 001e 2389     		ldrh	r3, [r4, #8]
 2791 0020 FFF7FEFF 		bl	TI1_Config
 2792              	.LVL342:
2141:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI2 Configuration */
 2793              		.loc 1 2141 0
 2794 0024 E188     		ldrh	r1, [r4, #6]
 2795 0026 301C     		mov	r0, r6
 2796 0028 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2797              	.LVL343:
2143:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
 2798              		.loc 1 2143 0
 2799 002c 2389     		ldrh	r3, [r4, #8]
 2800 002e 301C     		mov	r0, r6
 2801 0030 391C     		mov	r1, r7
 2802 0032 2A1C     		mov	r2, r5
 2803 0034 FFF7FEFF 		bl	TI2_Config
 2804              	.LVL344:
2145:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 2805              		.loc 1 2145 0
 2806 0038 E188     		ldrh	r1, [r4, #6]
 2807 003a 301C     		mov	r0, r6
 2808 003c FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2809              	.LVL345:
 2810 0040 10E0     		b	.L145
 2811              	.LVL346:
 2812              	.L148:
2150:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 2813              		.loc 1 2150 0
 2814 0042 2389     		ldrh	r3, [r4, #8]
 2815 0044 FFF7FEFF 		bl	TI2_Config
 2816              	.LVL347:
2153:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* TI1 Configuration */
 2817              		.loc 1 2153 0
 2818 0048 E188     		ldrh	r1, [r4, #6]
 2819 004a 301C     		mov	r0, r6
 2820 004c FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2821              	.LVL348:
2155:.\StdPeriphLib\src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
 2822              		.loc 1 2155 0
 2823 0050 2389     		ldrh	r3, [r4, #8]
 2824 0052 301C     		mov	r0, r6
 2825 0054 391C     		mov	r1, r7
 2826 0056 2A1C     		mov	r2, r5
 2827 0058 FFF7FEFF 		bl	TI1_Config
 2828              	.LVL349:
2157:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 2829              		.loc 1 2157 0
 2830 005c E188     		ldrh	r1, [r4, #6]
 2831 005e 301C     		mov	r0, r6
 2832 0060 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2833              	.LVL350:
 2834              	.L145:
2159:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2835              		.loc 1 2159 0
 2836              		@ sp needed
 2837              	.LVL351:
 2838              	.LVL352:
 2839              	.LVL353:
 2840              	.LVL354:
 2841 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2842              		.cfi_endproc
 2843              	.LFE91:
 2845 0066 C046     		.section	.text.TIM_SetIC3Prescaler,"ax",%progbits
 2846              		.align	2
 2847              		.global	TIM_SetIC3Prescaler
 2848              		.code	16
 2849              		.thumb_func
 2851              	TIM_SetIC3Prescaler:
 2852              	.LFB98:
2281:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2853              		.loc 1 2281 0
 2854              		.cfi_startproc
 2855              	.LVL355:
2287:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the IC3PSC value */
 2856              		.loc 1 2287 0
 2857 0000 838B     		ldrh	r3, [r0, #28]
 2858 0002 0C22     		mov	r2, #12
 2859 0004 9343     		bic	r3, r2
 2860 0006 8383     		strh	r3, [r0, #28]
2289:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2861              		.loc 1 2289 0
 2862 0008 838B     		ldrh	r3, [r0, #28]
 2863 000a 1943     		orr	r1, r3
 2864              	.LVL356:
 2865 000c 8183     		strh	r1, [r0, #28]
2290:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2866              		.loc 1 2290 0
 2867              		@ sp needed
 2868 000e 7047     		bx	lr
 2869              		.cfi_endproc
 2870              	.LFE98:
 2872              		.section	.text.TIM_SetIC4Prescaler,"ax",%progbits
 2873              		.align	2
 2874              		.global	TIM_SetIC4Prescaler
 2875              		.code	16
 2876              		.thumb_func
 2878              	TIM_SetIC4Prescaler:
 2879              	.LFB99:
2305:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2880              		.loc 1 2305 0
 2881              		.cfi_startproc
 2882              	.LVL357:
2311:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the IC4PSC value */
 2883              		.loc 1 2311 0
 2884 0000 828B     		ldrh	r2, [r0, #28]
 2885 0002 044B     		ldr	r3, .L154
 2886 0004 1340     		and	r3, r2
 2887 0006 8383     		strh	r3, [r0, #28]
2313:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 2888              		.loc 1 2313 0
 2889 0008 838B     		ldrh	r3, [r0, #28]
 2890 000a 0902     		lsl	r1, r1, #8
 2891              	.LVL358:
 2892 000c 1943     		orr	r1, r3
 2893 000e 89B2     		uxth	r1, r1
 2894 0010 8183     		strh	r1, [r0, #28]
2314:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 2895              		.loc 1 2314 0
 2896              		@ sp needed
 2897 0012 7047     		bx	lr
 2898              	.L155:
 2899              		.align	2
 2900              	.L154:
 2901 0014 FFF3FFFF 		.word	-3073
 2902              		.cfi_endproc
 2903              	.LFE99:
 2905              		.section	.text.TIM_ICInit,"ax",%progbits
 2906              		.align	2
 2907              		.global	TIM_ICInit
 2908              		.code	16
 2909              		.thumb_func
 2911              	TIM_ICInit:
 2912              	.LFB89:
2034:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 2913              		.loc 1 2034 0
 2914              		.cfi_startproc
 2915              	.LVL359:
 2916 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2917              	.LCFI12:
 2918              		.cfi_def_cfa_offset 24
 2919              		.cfi_offset 3, -24
 2920              		.cfi_offset 4, -20
 2921              		.cfi_offset 5, -16
 2922              		.cfi_offset 6, -12
 2923              		.cfi_offset 7, -8
 2924              		.cfi_offset 14, -4
 2925 0002 041C     		mov	r4, r0
 2926 0004 0D1C     		mov	r5, r1
2043:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 2927              		.loc 1 2043 0
 2928 0006 0B88     		ldrh	r3, [r1]
 2929 0008 002B     		cmp	r3, #0
 2930 000a 09D1     		bne	.L157
2047:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 2931              		.loc 1 2047 0
 2932 000c 4988     		ldrh	r1, [r1, #2]
 2933              	.LVL360:
 2934 000e AA88     		ldrh	r2, [r5, #4]
 2935 0010 2B89     		ldrh	r3, [r5, #8]
 2936 0012 FFF7FEFF 		bl	TI1_Config
 2937              	.LVL361:
2051:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 2938              		.loc 1 2051 0
 2939 0016 E988     		ldrh	r1, [r5, #6]
 2940 0018 201C     		mov	r0, r4
 2941 001a FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2942              	.LVL362:
 2943 001e 4BE0     		b	.L156
 2944              	.LVL363:
 2945              	.L157:
2053:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 2946              		.loc 1 2053 0
 2947 0020 042B     		cmp	r3, #4
 2948 0022 09D1     		bne	.L159
2057:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 2949              		.loc 1 2057 0
 2950 0024 4988     		ldrh	r1, [r1, #2]
 2951              	.LVL364:
 2952 0026 AA88     		ldrh	r2, [r5, #4]
 2953 0028 2B89     		ldrh	r3, [r5, #8]
 2954 002a FFF7FEFF 		bl	TI2_Config
 2955              	.LVL365:
2061:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 2956              		.loc 1 2061 0
 2957 002e E988     		ldrh	r1, [r5, #6]
 2958 0030 201C     		mov	r0, r4
 2959 0032 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2960              	.LVL366:
 2961 0036 3FE0     		b	.L156
 2962              	.LVL367:
 2963              	.L159:
2063:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 2964              		.loc 1 2063 0
 2965 0038 082B     		cmp	r3, #8
 2966 003a 1ED1     		bne	.L160
2067:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 2967              		.loc 1 2067 0
 2968 003c 4E88     		ldrh	r6, [r1, #2]
 2969 003e 8888     		ldrh	r0, [r1, #4]
 2970              	.LVL368:
 2971 0040 0989     		ldrh	r1, [r1, #8]
 2972              	.LVL369:
 2973              	.LBB6:
 2974              	.LBB7:
3260:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3261:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3262:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configure the TI3 as Input.
3263:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3264:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3265:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3266:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3267:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3268:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3269:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3270:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3271:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
3272:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
3273:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
3274:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3275:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3276:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
3277:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3278:.\StdPeriphLib\src/stm32f0xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3279:.\StdPeriphLib\src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3280:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
3281:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3282:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
3283:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 2975              		.loc 1 3283 0
 2976 0042 228C     		ldrh	r2, [r4, #32]
 2977 0044 1D4B     		ldr	r3, .L161
 2978 0046 1340     		and	r3, r2
 2979 0048 2384     		strh	r3, [r4, #32]
3284:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2980              		.loc 1 3284 0
 2981 004a A28B     		ldrh	r2, [r4, #28]
 2982              	.LVL370:
3285:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2983              		.loc 1 3285 0
 2984 004c 238C     		ldrh	r3, [r4, #32]
 2985              	.LVL371:
3286:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
3287:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3288:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2
 2986              		.loc 1 3288 0
 2987 004e F327     		mov	r7, #243
 2988 0050 BA43     		bic	r2, r7
 2989              	.LVL372:
3289:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 2990              		.loc 1 3289 0
 2991 0052 0901     		lsl	r1, r1, #4
 2992              	.LVL373:
 2993 0054 1143     		orr	r1, r2
 2994 0056 8AB2     		uxth	r2, r1
 2995 0058 0243     		orr	r2, r0
 2996 005a 111C     		mov	r1, r2
 2997              	.LVL374:
3286:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
 2998              		.loc 1 3286 0
 2999 005c 3002     		lsl	r0, r6, #8
 3000              	.LVL375:
3290:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC3E Bit */
3291:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 3001              		.loc 1 3291 0
 3002 005e 184A     		ldr	r2, .L161+4
 3003 0060 1340     		and	r3, r2
 3004              	.LVL376:
3292:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 3005              		.loc 1 3292 0
 3006 0062 0343     		orr	r3, r0
 3007 0064 9BB2     		uxth	r3, r3
 3008 0066 8022     		mov	r2, #128
 3009 0068 5200     		lsl	r2, r2, #1
 3010 006a 1343     		orr	r3, r2
 3011              	.LVL377:
3293:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3294:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3012              		.loc 1 3294 0
 3013 006c A183     		strh	r1, [r4, #28]
3295:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 3014              		.loc 1 3295 0
 3015 006e 2384     		strh	r3, [r4, #32]
 3016              	.LBE7:
 3017              	.LBE6:
2071:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3018              		.loc 1 2071 0
 3019 0070 E988     		ldrh	r1, [r5, #6]
 3020              	.LVL378:
 3021 0072 201C     		mov	r0, r4
 3022 0074 FFF7FEFF 		bl	TIM_SetIC3Prescaler
 3023              	.LVL379:
 3024 0078 1EE0     		b	.L156
 3025              	.LVL380:
 3026              	.L160:
2077:.\StdPeriphLib\src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3027              		.loc 1 2077 0
 3028 007a 4F88     		ldrh	r7, [r1, #2]
 3029 007c 8E88     		ldrh	r6, [r1, #4]
 3030 007e 0A89     		ldrh	r2, [r1, #8]
 3031              	.LVL381:
 3032              	.LBB8:
 3033              	.LBB9:
3296:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
3297:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3298:.\StdPeriphLib\src/stm32f0xx_tim.c **** /**
3299:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @brief  Configure the TI4 as Input.
3300:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3301:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
3302:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3303:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3304:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3305:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3306:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3307:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3308:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
3309:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
3310:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
3311:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3312:.\StdPeriphLib\src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3313:.\StdPeriphLib\src/stm32f0xx_tim.c ****   * @retval None
3314:.\StdPeriphLib\src/stm32f0xx_tim.c ****   */
3315:.\StdPeriphLib\src/stm32f0xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3316:.\StdPeriphLib\src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3317:.\StdPeriphLib\src/stm32f0xx_tim.c **** {
3318:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3319:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
3320:.\StdPeriphLib\src/stm32f0xx_tim.c ****    /* Disable the Channel 4: Reset the CC4E Bit */
3321:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 3034              		.loc 1 3321 0
 3035 0080 018C     		ldrh	r1, [r0, #32]
 3036              	.LVL382:
 3037 0082 104B     		ldr	r3, .L161+8
 3038 0084 0B40     		and	r3, r1
 3039 0086 0384     		strh	r3, [r0, #32]
3322:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3040              		.loc 1 3322 0
 3041 0088 808B     		ldrh	r0, [r0, #28]
 3042              	.LVL383:
3323:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 3043              		.loc 1 3323 0
 3044 008a 238C     		ldrh	r3, [r4, #32]
 3045              	.LVL384:
3324:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
3325:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3326:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_I
 3046              		.loc 1 3326 0
 3047 008c 0E49     		ldr	r1, .L161+12
 3048 008e 0140     		and	r1, r0
 3049              	.LVL385:
3327:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 3050              		.loc 1 3327 0
 3051 0090 3602     		lsl	r6, r6, #8
 3052              	.LVL386:
 3053 0092 3143     		orr	r1, r6
 3054              	.LVL387:
 3055 0094 88B2     		uxth	r0, r1
 3056              	.LVL388:
3328:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 3057              		.loc 1 3328 0
 3058 0096 1103     		lsl	r1, r2, #12
 3059 0098 0143     		orr	r1, r0
 3060 009a 89B2     		uxth	r1, r1
 3061              	.LVL389:
3324:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
 3062              		.loc 1 3324 0
 3063 009c 3803     		lsl	r0, r7, #12
3329:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC4E Bit */
3330:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 3064              		.loc 1 3330 0
 3065 009e 0B4A     		ldr	r2, .L161+16
 3066              	.LVL390:
 3067 00a0 1340     		and	r3, r2
 3068              	.LVL391:
3331:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 3069              		.loc 1 3331 0
 3070 00a2 0343     		orr	r3, r0
 3071 00a4 9BB2     		uxth	r3, r3
 3072 00a6 8022     		mov	r2, #128
 3073 00a8 5201     		lsl	r2, r2, #5
 3074 00aa 1343     		orr	r3, r2
 3075              	.LVL392:
3332:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3333:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3076              		.loc 1 3333 0
 3077 00ac A183     		strh	r1, [r4, #28]
3334:.\StdPeriphLib\src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 3078              		.loc 1 3334 0
 3079 00ae 2384     		strh	r3, [r4, #32]
 3080              	.LBE9:
 3081              	.LBE8:
2081:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3082              		.loc 1 2081 0
 3083 00b0 E988     		ldrh	r1, [r5, #6]
 3084              	.LVL393:
 3085 00b2 201C     		mov	r0, r4
 3086 00b4 FFF7FEFF 		bl	TIM_SetIC4Prescaler
 3087              	.LVL394:
 3088              	.L156:
2083:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3089              		.loc 1 2083 0
 3090              		@ sp needed
 3091              	.LVL395:
 3092              	.LVL396:
 3093 00b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3094              	.L162:
 3095 00ba C046     		.align	2
 3096              	.L161:
 3097 00bc FFFEFFFF 		.word	-257
 3098 00c0 FFF5FFFF 		.word	-2561
 3099 00c4 FFEFFFFF 		.word	-4097
 3100 00c8 FF0C0000 		.word	3327
 3101 00cc FF5F0000 		.word	24575
 3102              		.cfi_endproc
 3103              	.LFE89:
 3105              		.section	.text.TIM_ITConfig,"ax",%progbits
 3106              		.align	2
 3107              		.global	TIM_ITConfig
 3108              		.code	16
 3109              		.thumb_func
 3111              	TIM_ITConfig:
 3112              	.LFB100:
2360:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3113              		.loc 1 2360 0
 3114              		.cfi_startproc
 3115              	.LVL397:
2366:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 3116              		.loc 1 2366 0
 3117 0000 002A     		cmp	r2, #0
 3118 0002 03D0     		beq	.L164
2369:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3119              		.loc 1 2369 0
 3120 0004 8389     		ldrh	r3, [r0, #12]
 3121 0006 1943     		orr	r1, r3
 3122              	.LVL398:
 3123 0008 8181     		strh	r1, [r0, #12]
 3124 000a 02E0     		b	.L163
 3125              	.LVL399:
 3126              	.L164:
2374:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3127              		.loc 1 2374 0
 3128 000c 8389     		ldrh	r3, [r0, #12]
 3129 000e 8B43     		bic	r3, r1
 3130 0010 8381     		strh	r3, [r0, #12]
 3131              	.LVL400:
 3132              	.L163:
2376:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3133              		.loc 1 2376 0
 3134              		@ sp needed
 3135 0012 7047     		bx	lr
 3136              		.cfi_endproc
 3137              	.LFE100:
 3139              		.section	.text.TIM_GenerateEvent,"ax",%progbits
 3140              		.align	2
 3141              		.global	TIM_GenerateEvent
 3142              		.code	16
 3143              		.thumb_func
 3145              	TIM_GenerateEvent:
 3146              	.LFB101:
2402:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3147              		.loc 1 2402 0
 3148              		.cfi_startproc
 3149              	.LVL401:
2407:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3150              		.loc 1 2407 0
 3151 0000 8182     		strh	r1, [r0, #20]
2408:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3152              		.loc 1 2408 0
 3153              		@ sp needed
 3154 0002 7047     		bx	lr
 3155              		.cfi_endproc
 3156              	.LFE101:
 3158              		.section	.text.TIM_GetFlagStatus,"ax",%progbits
 3159              		.align	2
 3160              		.global	TIM_GetFlagStatus
 3161              		.code	16
 3162              		.thumb_func
 3164              	TIM_GetFlagStatus:
 3165              	.LFB102:
2440:.\StdPeriphLib\src/stm32f0xx_tim.c ****   ITStatus bitstatus = RESET; 
 3166              		.loc 1 2440 0
 3167              		.cfi_startproc
 3168              	.LVL402:
2447:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 3169              		.loc 1 2447 0
 3170 0000 008A     		ldrh	r0, [r0, #16]
 3171              	.LVL403:
 3172 0002 0840     		and	r0, r1
 3173              	.LVL404:
 3174 0004 411E     		sub	r1, r0, #1
 3175 0006 8841     		sbc	r0, r0, r1
 3176              	.LVL405:
2455:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3177              		.loc 1 2455 0
 3178 0008 C0B2     		uxtb	r0, r0
2456:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3179              		.loc 1 2456 0
 3180              		@ sp needed
 3181 000a 7047     		bx	lr
 3182              		.cfi_endproc
 3183              	.LFE102:
 3185              		.section	.text.TIM_ClearFlag,"ax",%progbits
 3186              		.align	2
 3187              		.global	TIM_ClearFlag
 3188              		.code	16
 3189              		.thumb_func
 3191              	TIM_ClearFlag:
 3192              	.LFB103:
2489:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3193              		.loc 1 2489 0
 3194              		.cfi_startproc
 3195              	.LVL406:
2495:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3196              		.loc 1 2495 0
 3197 0000 C943     		mvn	r1, r1
 3198              	.LVL407:
 3199 0002 89B2     		uxth	r1, r1
 3200 0004 0182     		strh	r1, [r0, #16]
2496:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3201              		.loc 1 2496 0
 3202              		@ sp needed
 3203 0006 7047     		bx	lr
 3204              		.cfi_endproc
 3205              	.LFE103:
 3207              		.section	.text.TIM_GetITStatus,"ax",%progbits
 3208              		.align	2
 3209              		.global	TIM_GetITStatus
 3210              		.code	16
 3211              		.thumb_func
 3213              	TIM_GetITStatus:
 3214              	.LFB104:
2524:.\StdPeriphLib\src/stm32f0xx_tim.c ****   ITStatus bitstatus = RESET;  
 3215              		.loc 1 2524 0
 3216              		.cfi_startproc
 3217              	.LVL408:
2532:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 3218              		.loc 1 2532 0
 3219 0000 028A     		ldrh	r2, [r0, #16]
 3220              	.LVL409:
2534:.\StdPeriphLib\src/stm32f0xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 3221              		.loc 1 2534 0
 3222 0002 8089     		ldrh	r0, [r0, #12]
 3223              	.LVL410:
 3224 0004 83B2     		uxth	r3, r0
 3225              	.LVL411:
2541:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3226              		.loc 1 2541 0
 3227 0006 0020     		mov	r0, #0
2535:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 3228              		.loc 1 2535 0
 3229 0008 0A42     		tst	r2, r1
 3230 000a 03D0     		beq	.L170
2535:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 3231              		.loc 1 2535 0 is_stmt 0 discriminator 1
 3232 000c 1940     		and	r1, r3
 3233              	.LVL412:
 3234 000e 481E     		sub	r0, r1, #1
 3235 0010 8141     		sbc	r1, r1, r0
2537:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3236              		.loc 1 2537 0 is_stmt 1 discriminator 1
 3237 0012 C8B2     		uxtb	r0, r1
 3238              	.L170:
 3239              	.LVL413:
2544:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3240              		.loc 1 2544 0
 3241              		@ sp needed
 3242 0014 7047     		bx	lr
 3243              		.cfi_endproc
 3244              	.LFE104:
 3246 0016 C046     		.section	.text.TIM_ClearITPendingBit,"ax",%progbits
 3247              		.align	2
 3248              		.global	TIM_ClearITPendingBit
 3249              		.code	16
 3250              		.thumb_func
 3252              	TIM_ClearITPendingBit:
 3253              	.LFB105:
2572:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3254              		.loc 1 2572 0
 3255              		.cfi_startproc
 3256              	.LVL414:
2578:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3257              		.loc 1 2578 0
 3258 0000 C943     		mvn	r1, r1
 3259              	.LVL415:
 3260 0002 89B2     		uxth	r1, r1
 3261 0004 0182     		strh	r1, [r0, #16]
2579:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3262              		.loc 1 2579 0
 3263              		@ sp needed
 3264 0006 7047     		bx	lr
 3265              		.cfi_endproc
 3266              	.LFE105:
 3268              		.section	.text.TIM_DMAConfig,"ax",%progbits
 3269              		.align	2
 3270              		.global	TIM_DMAConfig
 3271              		.code	16
 3272              		.thumb_func
 3274              	TIM_DMAConfig:
 3275              	.LFB106:
2610:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3276              		.loc 1 2610 0
 3277              		.cfi_startproc
 3278              	.LVL416:
2616:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3279              		.loc 1 2616 0
 3280 0000 0A43     		orr	r2, r1
 3281              	.LVL417:
 3282 0002 4823     		mov	r3, #72
 3283 0004 C252     		strh	r2, [r0, r3]
2617:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3284              		.loc 1 2617 0
 3285              		@ sp needed
 3286 0006 7047     		bx	lr
 3287              		.cfi_endproc
 3288              	.LFE106:
 3290              		.section	.text.TIM_DMACmd,"ax",%progbits
 3291              		.align	2
 3292              		.global	TIM_DMACmd
 3293              		.code	16
 3294              		.thumb_func
 3296              	TIM_DMACmd:
 3297              	.LFB107:
2639:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3298              		.loc 1 2639 0
 3299              		.cfi_startproc
 3300              	.LVL418:
2645:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 3301              		.loc 1 2645 0
 3302 0000 002A     		cmp	r2, #0
 3303 0002 03D0     		beq	.L175
2648:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3304              		.loc 1 2648 0
 3305 0004 8389     		ldrh	r3, [r0, #12]
 3306 0006 1943     		orr	r1, r3
 3307              	.LVL419:
 3308 0008 8181     		strh	r1, [r0, #12]
 3309 000a 02E0     		b	.L174
 3310              	.LVL420:
 3311              	.L175:
2653:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3312              		.loc 1 2653 0
 3313 000c 8389     		ldrh	r3, [r0, #12]
 3314 000e 8B43     		bic	r3, r1
 3315 0010 8381     		strh	r3, [r0, #12]
 3316              	.LVL421:
 3317              	.L174:
2655:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3318              		.loc 1 2655 0
 3319              		@ sp needed
 3320 0012 7047     		bx	lr
 3321              		.cfi_endproc
 3322              	.LFE107:
 3324              		.section	.text.TIM_SelectCCDMA,"ax",%progbits
 3325              		.align	2
 3326              		.global	TIM_SelectCCDMA
 3327              		.code	16
 3328              		.thumb_func
 3330              	TIM_SelectCCDMA:
 3331              	.LFB108:
2666:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3332              		.loc 1 2666 0
 3333              		.cfi_startproc
 3334              	.LVL422:
2671:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 3335              		.loc 1 2671 0
 3336 0000 0029     		cmp	r1, #0
 3337 0002 04D0     		beq	.L178
2674:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3338              		.loc 1 2674 0
 3339 0004 8288     		ldrh	r2, [r0, #4]
 3340 0006 0823     		mov	r3, #8
 3341 0008 1343     		orr	r3, r2
 3342 000a 8380     		strh	r3, [r0, #4]
 3343 000c 03E0     		b	.L177
 3344              	.L178:
2679:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3345              		.loc 1 2679 0
 3346 000e 8388     		ldrh	r3, [r0, #4]
 3347 0010 0822     		mov	r2, #8
 3348 0012 9343     		bic	r3, r2
 3349 0014 8380     		strh	r3, [r0, #4]
 3350              	.L177:
2681:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3351              		.loc 1 2681 0
 3352              		@ sp needed
 3353 0016 7047     		bx	lr
 3354              		.cfi_endproc
 3355              	.LFE108:
 3357              		.section	.text.TIM_InternalClockConfig,"ax",%progbits
 3358              		.align	2
 3359              		.global	TIM_InternalClockConfig
 3360              		.code	16
 3361              		.thumb_func
 3363              	TIM_InternalClockConfig:
 3364              	.LFB109:
2706:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3365              		.loc 1 2706 0
 3366              		.cfi_startproc
 3367              	.LVL423:
2710:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3368              		.loc 1 2710 0
 3369 0000 0389     		ldrh	r3, [r0, #8]
 3370 0002 0722     		mov	r2, #7
 3371 0004 9343     		bic	r3, r2
 3372 0006 0381     		strh	r3, [r0, #8]
2711:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3373              		.loc 1 2711 0
 3374              		@ sp needed
 3375 0008 7047     		bx	lr
 3376              		.cfi_endproc
 3377              	.LFE109:
 3379 000a C046     		.section	.text.TIM_ITRxExternalClockConfig,"ax",%progbits
 3380              		.align	2
 3381              		.global	TIM_ITRxExternalClockConfig
 3382              		.code	16
 3383              		.thumb_func
 3385              	TIM_ITRxExternalClockConfig:
 3386              	.LFB110:
2726:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3387              		.loc 1 2726 0
 3388              		.cfi_startproc
 3389              	.LVL424:
 3390              	.LBB12:
 3391              	.LBB13:
2914:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the TS Bits */
 3392              		.loc 1 2914 0
 3393 0000 0389     		ldrh	r3, [r0, #8]
 3394              	.LVL425:
2916:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Input Trigger source */
 3395              		.loc 1 2916 0
 3396 0002 7022     		mov	r2, #112
 3397 0004 9343     		bic	r3, r2
 3398              	.LVL426:
2918:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
 3399              		.loc 1 2918 0
 3400 0006 1943     		orr	r1, r3
 3401              	.LVL427:
2920:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3402              		.loc 1 2920 0
 3403 0008 0181     		strh	r1, [r0, #8]
 3404              	.LBE13:
 3405              	.LBE12:
2733:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3406              		.loc 1 2733 0
 3407 000a 0289     		ldrh	r2, [r0, #8]
 3408 000c 0723     		mov	r3, #7
 3409 000e 1343     		orr	r3, r2
 3410 0010 0381     		strh	r3, [r0, #8]
2734:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3411              		.loc 1 2734 0
 3412              		@ sp needed
 3413 0012 7047     		bx	lr
 3414              		.cfi_endproc
 3415              	.LFE110:
 3417              		.section	.text.TIM_TIxExternalClockConfig,"ax",%progbits
 3418              		.align	2
 3419              		.global	TIM_TIxExternalClockConfig
 3420              		.code	16
 3421              		.thumb_func
 3423              	TIM_TIxExternalClockConfig:
 3424              	.LFB111:
2755:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3425              		.loc 1 2755 0
 3426              		.cfi_startproc
 3427              	.LVL428:
 3428 0000 38B5     		push	{r3, r4, r5, lr}
 3429              	.LCFI13:
 3430              		.cfi_def_cfa_offset 16
 3431              		.cfi_offset 3, -16
 3432              		.cfi_offset 4, -12
 3433              		.cfi_offset 5, -8
 3434              		.cfi_offset 14, -4
 3435 0002 041C     		mov	r4, r0
 3436 0004 0D1E     		sub	r5, r1, #0
2762:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 3437              		.loc 1 2762 0
 3438 0006 602D     		cmp	r5, #96
 3439 0008 04D1     		bne	.L183
2764:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3440              		.loc 1 2764 0
 3441 000a 111C     		mov	r1, r2
 3442              	.LVL429:
 3443 000c 0122     		mov	r2, #1
 3444              	.LVL430:
 3445 000e FFF7FEFF 		bl	TI2_Config
 3446              	.LVL431:
 3447 0012 03E0     		b	.L184
 3448              	.LVL432:
 3449              	.L183:
2768:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3450              		.loc 1 2768 0
 3451 0014 111C     		mov	r1, r2
 3452              	.LVL433:
 3453 0016 0122     		mov	r2, #1
 3454              	.LVL434:
 3455 0018 FFF7FEFF 		bl	TI1_Config
 3456              	.LVL435:
 3457              	.L184:
 3458              	.LBB16:
 3459              	.LBB17:
2914:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the TS Bits */
 3460              		.loc 1 2914 0
 3461 001c 2189     		ldrh	r1, [r4, #8]
 3462              	.LVL436:
2916:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Input Trigger source */
 3463              		.loc 1 2916 0
 3464 001e 7023     		mov	r3, #112
 3465 0020 9943     		bic	r1, r3
 3466              	.LVL437:
2918:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
 3467              		.loc 1 2918 0
 3468 0022 2943     		orr	r1, r5
 3469              	.LVL438:
2920:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3470              		.loc 1 2920 0
 3471 0024 2181     		strh	r1, [r4, #8]
 3472              	.LBE17:
 3473              	.LBE16:
2773:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3474              		.loc 1 2773 0
 3475 0026 2289     		ldrh	r2, [r4, #8]
 3476 0028 693B     		sub	r3, r3, #105
 3477 002a 1343     		orr	r3, r2
 3478 002c 2381     		strh	r3, [r4, #8]
2774:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3479              		.loc 1 2774 0
 3480              		@ sp needed
 3481              	.LVL439:
 3482              	.LVL440:
 3483 002e 38BD     		pop	{r3, r4, r5, pc}
 3484              		.cfi_endproc
 3485              	.LFE111:
 3487              		.section	.text.TIM_SelectInputTrigger,"ax",%progbits
 3488              		.align	2
 3489              		.global	TIM_SelectInputTrigger
 3490              		.code	16
 3491              		.thumb_func
 3493              	TIM_SelectInputTrigger:
 3494              	.LFB114:
2906:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
 3495              		.loc 1 2906 0
 3496              		.cfi_startproc
 3497              	.LVL441:
2914:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the TS Bits */
 3498              		.loc 1 2914 0
 3499 0000 0389     		ldrh	r3, [r0, #8]
 3500              	.LVL442:
2916:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Input Trigger source */
 3501              		.loc 1 2916 0
 3502 0002 7022     		mov	r2, #112
 3503 0004 9343     		bic	r3, r2
 3504              	.LVL443:
2918:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
 3505              		.loc 1 2918 0
 3506 0006 1943     		orr	r1, r3
 3507              	.LVL444:
2920:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3508              		.loc 1 2920 0
 3509 0008 0181     		strh	r1, [r0, #8]
2921:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3510              		.loc 1 2921 0
 3511              		@ sp needed
 3512 000a 7047     		bx	lr
 3513              		.cfi_endproc
 3514              	.LFE114:
 3516              		.section	.text.TIM_SelectOutputTrigger,"ax",%progbits
 3517              		.align	2
 3518              		.global	TIM_SelectOutputTrigger
 3519              		.code	16
 3520              		.thumb_func
 3522              	TIM_SelectOutputTrigger:
 3523              	.LFB115:
2948:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3524              		.loc 1 2948 0
 3525              		.cfi_startproc
 3526              	.LVL445:
2954:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the TRGO source */
 3527              		.loc 1 2954 0
 3528 0000 8388     		ldrh	r3, [r0, #4]
 3529 0002 7022     		mov	r2, #112
 3530 0004 9343     		bic	r3, r2
 3531 0006 8380     		strh	r3, [r0, #4]
2956:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3532              		.loc 1 2956 0
 3533 0008 8388     		ldrh	r3, [r0, #4]
 3534 000a 1943     		orr	r1, r3
 3535              	.LVL446:
 3536 000c 8180     		strh	r1, [r0, #4]
2957:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3537              		.loc 1 2957 0
 3538              		@ sp needed
 3539 000e 7047     		bx	lr
 3540              		.cfi_endproc
 3541              	.LFE115:
 3543              		.section	.text.TIM_SelectSlaveMode,"ax",%progbits
 3544              		.align	2
 3545              		.global	TIM_SelectSlaveMode
 3546              		.code	16
 3547              		.thumb_func
 3549              	TIM_SelectSlaveMode:
 3550              	.LFB116:
2973:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3551              		.loc 1 2973 0
 3552              		.cfi_startproc
 3553              	.LVL447:
2979:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Slave Mode */
 3554              		.loc 1 2979 0
 3555 0000 0389     		ldrh	r3, [r0, #8]
 3556 0002 0722     		mov	r2, #7
 3557 0004 9343     		bic	r3, r2
 3558 0006 0381     		strh	r3, [r0, #8]
2981:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3559              		.loc 1 2981 0
 3560 0008 0389     		ldrh	r3, [r0, #8]
 3561 000a 1943     		orr	r1, r3
 3562              	.LVL448:
 3563 000c 0181     		strh	r1, [r0, #8]
2982:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3564              		.loc 1 2982 0
 3565              		@ sp needed
 3566 000e 7047     		bx	lr
 3567              		.cfi_endproc
 3568              	.LFE116:
 3570              		.section	.text.TIM_SelectMasterSlaveMode,"ax",%progbits
 3571              		.align	2
 3572              		.global	TIM_SelectMasterSlaveMode
 3573              		.code	16
 3574              		.thumb_func
 3576              	TIM_SelectMasterSlaveMode:
 3577              	.LFB117:
2996:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3578              		.loc 1 2996 0
 3579              		.cfi_startproc
 3580              	.LVL449:
3002:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 3581              		.loc 1 3002 0
 3582 0000 0389     		ldrh	r3, [r0, #8]
 3583 0002 8022     		mov	r2, #128
 3584 0004 9343     		bic	r3, r2
 3585 0006 0381     		strh	r3, [r0, #8]
3005:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3586              		.loc 1 3005 0
 3587 0008 0389     		ldrh	r3, [r0, #8]
 3588 000a 1943     		orr	r1, r3
 3589              	.LVL450:
 3590 000c 0181     		strh	r1, [r0, #8]
3006:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3591              		.loc 1 3006 0
 3592              		@ sp needed
 3593 000e 7047     		bx	lr
 3594              		.cfi_endproc
 3595              	.LFE117:
 3597              		.section	.text.TIM_ETRConfig,"ax",%progbits
 3598              		.align	2
 3599              		.global	TIM_ETRConfig
 3600              		.code	16
 3601              		.thumb_func
 3603              	TIM_ETRConfig:
 3604              	.LFB118:
3028:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
 3605              		.loc 1 3028 0
 3606              		.cfi_startproc
 3607              	.LVL451:
 3608 0000 30B5     		push	{r4, r5, lr}
 3609              	.LCFI14:
 3610              		.cfi_def_cfa_offset 12
 3611              		.cfi_offset 4, -12
 3612              		.cfi_offset 5, -8
 3613              		.cfi_offset 14, -4
 3614              	.LVL452:
3037:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the ETR Bits */
 3615              		.loc 1 3037 0
 3616 0002 0589     		ldrh	r5, [r0, #8]
 3617              	.LVL453:
3039:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
 3618              		.loc 1 3039 0
 3619 0004 FF24     		mov	r4, #255
 3620 0006 2C40     		and	r4, r5
 3621 0008 2143     		orr	r1, r4
 3622              	.LVL454:
 3623 000a 0A43     		orr	r2, r1
 3624              	.LVL455:
3041:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
 3625              		.loc 1 3041 0
 3626 000c 1B02     		lsl	r3, r3, #8
 3627              	.LVL456:
 3628 000e 1A43     		orr	r2, r3
 3629 0010 92B2     		uxth	r2, r2
 3630              	.LVL457:
3043:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3631              		.loc 1 3043 0
 3632 0012 0281     		strh	r2, [r0, #8]
3044:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3633              		.loc 1 3044 0
 3634              		@ sp needed
 3635 0014 30BD     		pop	{r4, r5, pc}
 3636              		.cfi_endproc
 3637              	.LFE118:
 3639 0016 C046     		.section	.text.TIM_ETRClockMode1Config,"ax",%progbits
 3640              		.align	2
 3641              		.global	TIM_ETRClockMode1Config
 3642              		.code	16
 3643              		.thumb_func
 3645              	TIM_ETRClockMode1Config:
 3646              	.LFB112:
2796:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
 3647              		.loc 1 2796 0
 3648              		.cfi_startproc
 3649              	.LVL458:
 3650 0000 10B5     		push	{r4, lr}
 3651              	.LCFI15:
 3652              		.cfi_def_cfa_offset 8
 3653              		.cfi_offset 4, -8
 3654              		.cfi_offset 14, -4
 3655 0002 041C     		mov	r4, r0
 3656              	.LVL459:
2806:.\StdPeriphLib\src/stm32f0xx_tim.c ****   
 3657              		.loc 1 2806 0
 3658 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3659              	.LVL460:
2809:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Reset the SMS Bits */
 3660              		.loc 1 2809 0
 3661 0008 2389     		ldrh	r3, [r4, #8]
 3662              	.LVL461:
2815:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
 3663              		.loc 1 2815 0
 3664 000a 7722     		mov	r2, #119
 3665 000c 9343     		bic	r3, r2
 3666              	.LVL462:
2816:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
 3667              		.loc 1 2816 0
 3668 000e 1343     		orr	r3, r2
 3669              	.LVL463:
2818:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3670              		.loc 1 2818 0
 3671 0010 2381     		strh	r3, [r4, #8]
2819:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3672              		.loc 1 2819 0
 3673              		@ sp needed
 3674              	.LVL464:
 3675 0012 10BD     		pop	{r4, pc}
 3676              		.cfi_endproc
 3677              	.LFE112:
 3679              		.section	.text.TIM_ETRClockMode2Config,"ax",%progbits
 3680              		.align	2
 3681              		.global	TIM_ETRClockMode2Config
 3682              		.code	16
 3683              		.thumb_func
 3685              	TIM_ETRClockMode2Config:
 3686              	.LFB113:
2841:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3687              		.loc 1 2841 0
 3688              		.cfi_startproc
 3689              	.LVL465:
 3690 0000 10B5     		push	{r4, lr}
 3691              	.LCFI16:
 3692              		.cfi_def_cfa_offset 8
 3693              		.cfi_offset 4, -8
 3694              		.cfi_offset 14, -4
 3695 0002 041C     		mov	r4, r0
2849:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Enable the External clock mode2 */
 3696              		.loc 1 2849 0
 3697 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3698              	.LVL466:
2851:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3699              		.loc 1 2851 0
 3700 0008 2289     		ldrh	r2, [r4, #8]
 3701 000a 8023     		mov	r3, #128
 3702 000c DB01     		lsl	r3, r3, #7
 3703 000e 1343     		orr	r3, r2
 3704 0010 2381     		strh	r3, [r4, #8]
2852:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3705              		.loc 1 2852 0
 3706              		@ sp needed
 3707              	.LVL467:
 3708 0012 10BD     		pop	{r4, pc}
 3709              		.cfi_endproc
 3710              	.LFE113:
 3712              		.section	.text.TIM_EncoderInterfaceConfig,"ax",%progbits
 3713              		.align	2
 3714              		.global	TIM_EncoderInterfaceConfig
 3715              		.code	16
 3716              		.thumb_func
 3718              	TIM_EncoderInterfaceConfig:
 3719              	.LFB119:
3084:.\StdPeriphLib\src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
 3720              		.loc 1 3084 0
 3721              		.cfi_startproc
 3722              	.LVL468:
 3723 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3724              	.LCFI17:
 3725              		.cfi_def_cfa_offset 20
 3726              		.cfi_offset 4, -20
 3727              		.cfi_offset 5, -16
 3728              		.cfi_offset 6, -12
 3729              		.cfi_offset 7, -8
 3730              		.cfi_offset 14, -4
 3731              	.LVL469:
3096:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 3732              		.loc 1 3096 0
 3733 0002 0689     		ldrh	r6, [r0, #8]
 3734              	.LVL470:
3098:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
 3735              		.loc 1 3098 0
 3736 0004 078B     		ldrh	r7, [r0, #24]
 3737              	.LVL471:
3100:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the encoder Mode */
 3738              		.loc 1 3100 0
 3739 0006 058C     		ldrh	r5, [r0, #32]
 3740              	.LVL472:
3102:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
 3741              		.loc 1 3102 0
 3742 0008 0724     		mov	r4, #7
 3743 000a A643     		bic	r6, r4
 3744              	.LVL473:
3103:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
 3745              		.loc 1 3103 0
 3746 000c 3143     		orr	r1, r6
 3747              	.LVL474:
3105:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 3748              		.loc 1 3105 0
 3749 000e 074C     		ldr	r4, .L193
 3750 0010 3C40     		and	r4, r7
 3751              	.LVL475:
3106:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Set the TI1 and the TI2 Polarities */
 3752              		.loc 1 3106 0
 3753 0012 0226     		mov	r6, #2
 3754 0014 FF36     		add	r6, r6, #255
 3755 0016 3443     		orr	r4, r6
 3756              	.LVL476:
3108:.\StdPeriphLib\src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 3757              		.loc 1 3108 0
 3758 0018 573E     		sub	r6, r6, #87
 3759 001a B543     		bic	r5, r6
 3760              	.LVL477:
 3761 001c 2A43     		orr	r2, r5
 3762              	.LVL478:
3109:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
 3763              		.loc 1 3109 0
 3764 001e 1B01     		lsl	r3, r3, #4
 3765              	.LVL479:
 3766 0020 1A43     		orr	r2, r3
 3767 0022 92B2     		uxth	r2, r2
 3768              	.LVL480:
3111:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 3769              		.loc 1 3111 0
 3770 0024 0181     		strh	r1, [r0, #8]
3113:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
 3771              		.loc 1 3113 0
 3772 0026 0483     		strh	r4, [r0, #24]
3115:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3773              		.loc 1 3115 0
 3774 0028 0284     		strh	r2, [r0, #32]
3116:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3775              		.loc 1 3116 0
 3776              		@ sp needed
 3777              	.LVL481:
 3778              	.LVL482:
 3779              	.LVL483:
 3780 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 3781              	.L194:
 3782              		.align	2
 3783              	.L193:
 3784 002c FCFCFFFF 		.word	-772
 3785              		.cfi_endproc
 3786              	.LFE119:
 3788              		.section	.text.TIM_SelectHallSensor,"ax",%progbits
 3789              		.align	2
 3790              		.global	TIM_SelectHallSensor
 3791              		.code	16
 3792              		.thumb_func
 3794              	TIM_SelectHallSensor:
 3795              	.LFB120:
3127:.\StdPeriphLib\src/stm32f0xx_tim.c ****   /* Check the parameters */
 3796              		.loc 1 3127 0
 3797              		.cfi_startproc
 3798              	.LVL484:
3132:.\StdPeriphLib\src/stm32f0xx_tim.c ****   {
 3799              		.loc 1 3132 0
 3800 0000 0029     		cmp	r1, #0
 3801 0002 04D0     		beq	.L196
3135:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3802              		.loc 1 3135 0
 3803 0004 8288     		ldrh	r2, [r0, #4]
 3804 0006 8023     		mov	r3, #128
 3805 0008 1343     		orr	r3, r2
 3806 000a 8380     		strh	r3, [r0, #4]
 3807 000c 03E0     		b	.L195
 3808              	.L196:
3140:.\StdPeriphLib\src/stm32f0xx_tim.c ****   }
 3809              		.loc 1 3140 0
 3810 000e 8388     		ldrh	r3, [r0, #4]
 3811 0010 8022     		mov	r2, #128
 3812 0012 9343     		bic	r3, r2
 3813 0014 8380     		strh	r3, [r0, #4]
 3814              	.L195:
3142:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3815              		.loc 1 3142 0
 3816              		@ sp needed
 3817 0016 7047     		bx	lr
 3818              		.cfi_endproc
 3819              	.LFE120:
 3821              		.section	.text.TIM_RemapConfig,"ax",%progbits
 3822              		.align	2
 3823              		.global	TIM_RemapConfig
 3824              		.code	16
 3825              		.thumb_func
 3827              	TIM_RemapConfig:
 3828              	.LFB121:
3173:.\StdPeriphLib\src/stm32f0xx_tim.c ****  /* Check the parameters */
 3829              		.loc 1 3173 0
 3830              		.cfi_startproc
 3831              	.LVL485:
3179:.\StdPeriphLib\src/stm32f0xx_tim.c **** }
 3832              		.loc 1 3179 0
 3833 0000 5023     		mov	r3, #80
 3834 0002 C152     		strh	r1, [r0, r3]
3180:.\StdPeriphLib\src/stm32f0xx_tim.c **** 
 3835              		.loc 1 3180 0
 3836              		@ sp needed
 3837 0004 7047     		bx	lr
 3838              		.cfi_endproc
 3839              	.LFE121:
 3841 0006 C046     		.text
 3842              	.Letext0:
 3843              		.file 2 "c:\\myprograms\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\
 3844              		.file 3 "c:\\myprograms\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\
 3845              		.file 4 ".\\CMSIS/stm32f0xx.h"
 3846              		.file 5 ".\\StdPeriphLib\\inc/stm32f0xx_tim.h"
 3847              		.file 6 ".\\StdPeriphLib\\inc/stm32f0xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_tim.c
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:18     .text.TI1_Config:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:22     .text.TI1_Config:00000000 TI1_Config
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:80     .text.TI2_Config:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:84     .text.TI2_Config:00000000 TI2_Config
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:147    .text.TI2_Config:00000034 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:152    .text.TIM_DeInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:157    .text.TIM_DeInit:00000000 TIM_DeInit
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:344    .text.TIM_DeInit:000000f0 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:356    .text.TIM_TimeBaseInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:361    .text.TIM_TimeBaseInit:00000000 TIM_TimeBaseInit
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:495    .text.TIM_TimeBaseInit:00000088 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:506    .text.TIM_TimeBaseStructInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:511    .text.TIM_TimeBaseStructInit:00000000 TIM_TimeBaseStructInit
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:536    .text.TIM_PrescalerConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:541    .text.TIM_PrescalerConfig:00000000 TIM_PrescalerConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:557    .text.TIM_CounterModeConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:562    .text.TIM_CounterModeConfig:00000000 TIM_CounterModeConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:586    .text.TIM_SetCounter:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:591    .text.TIM_SetCounter:00000000 TIM_SetCounter
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:605    .text.TIM_SetAutoreload:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:610    .text.TIM_SetAutoreload:00000000 TIM_SetAutoreload
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:624    .text.TIM_GetCounter:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:629    .text.TIM_GetCounter:00000000 TIM_GetCounter
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:644    .text.TIM_GetPrescaler:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:649    .text.TIM_GetPrescaler:00000000 TIM_GetPrescaler
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:665    .text.TIM_UpdateDisableConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:670    .text.TIM_UpdateDisableConfig:00000000 TIM_UpdateDisableConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:698    .text.TIM_UpdateRequestConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:703    .text.TIM_UpdateRequestConfig:00000000 TIM_UpdateRequestConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:731    .text.TIM_ARRPreloadConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:736    .text.TIM_ARRPreloadConfig:00000000 TIM_ARRPreloadConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:764    .text.TIM_SelectOnePulseMode:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:769    .text.TIM_SelectOnePulseMode:00000000 TIM_SelectOnePulseMode
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:791    .text.TIM_SetClockDivision:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:796    .text.TIM_SetClockDivision:00000000 TIM_SetClockDivision
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:817    .text.TIM_SetClockDivision:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:822    .text.TIM_Cmd:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:827    .text.TIM_Cmd:00000000 TIM_Cmd
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:855    .text.TIM_BDTRConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:860    .text.TIM_BDTRConfig:00000000 TIM_BDTRConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:888    .text.TIM_BDTRStructInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:893    .text.TIM_BDTRStructInit:00000000 TIM_BDTRStructInit
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:920    .text.TIM_CtrlPWMOutputs:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:925    .text.TIM_CtrlPWMOutputs:00000000 TIM_CtrlPWMOutputs
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:959    .text.TIM_OC1Init:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:964    .text.TIM_OC1Init:00000000 TIM_OC1Init
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1073   .text.TIM_OC1Init:00000068 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1082   .text.TIM_OC2Init:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1087   .text.TIM_OC2Init:00000000 TIM_OC2Init
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1227   .text.TIM_OC2Init:00000088 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1237   .text.TIM_OC3Init:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1242   .text.TIM_OC3Init:00000000 TIM_OC3Init
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1356   .text.TIM_OC3Init:0000006c $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1366   .text.TIM_OC4Init:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1371   .text.TIM_OC4Init:00000000 TIM_OC4Init
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1461   .text.TIM_OC4Init:00000050 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1470   .text.TIM_OCStructInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1475   .text.TIM_OCStructInit:00000000 TIM_OCStructInit
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1504   .text.TIM_SelectOCxM:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1509   .text.TIM_SelectOCxM:00000000 TIM_SelectOCxM
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1584   .text.TIM_SelectOCxM:00000048 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1589   .text.TIM_SetCompare1:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1594   .text.TIM_SetCompare1:00000000 TIM_SetCompare1
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1608   .text.TIM_SetCompare2:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1613   .text.TIM_SetCompare2:00000000 TIM_SetCompare2
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1627   .text.TIM_SetCompare3:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1632   .text.TIM_SetCompare3:00000000 TIM_SetCompare3
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1646   .text.TIM_SetCompare4:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1651   .text.TIM_SetCompare4:00000000 TIM_SetCompare4
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1665   .text.TIM_ForcedOC1Config:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1670   .text.TIM_ForcedOC1Config:00000000 TIM_ForcedOC1Config
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1694   .text.TIM_ForcedOC2Config:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1699   .text.TIM_ForcedOC2Config:00000000 TIM_ForcedOC2Config
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1725   .text.TIM_ForcedOC2Config:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1730   .text.TIM_ForcedOC3Config:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1735   .text.TIM_ForcedOC3Config:00000000 TIM_ForcedOC3Config
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1759   .text.TIM_ForcedOC4Config:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1764   .text.TIM_ForcedOC4Config:00000000 TIM_ForcedOC4Config
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1790   .text.TIM_ForcedOC4Config:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1795   .text.TIM_CCPreloadControl:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1800   .text.TIM_CCPreloadControl:00000000 TIM_CCPreloadControl
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1828   .text.TIM_OC1PreloadConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1833   .text.TIM_OC1PreloadConfig:00000000 TIM_OC1PreloadConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1857   .text.TIM_OC2PreloadConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1862   .text.TIM_OC2PreloadConfig:00000000 TIM_OC2PreloadConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1888   .text.TIM_OC2PreloadConfig:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1893   .text.TIM_OC3PreloadConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1898   .text.TIM_OC3PreloadConfig:00000000 TIM_OC3PreloadConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1922   .text.TIM_OC4PreloadConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1927   .text.TIM_OC4PreloadConfig:00000000 TIM_OC4PreloadConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1953   .text.TIM_OC4PreloadConfig:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1958   .text.TIM_OC1FastConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1963   .text.TIM_OC1FastConfig:00000000 TIM_OC1FastConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1987   .text.TIM_OC2FastConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:1992   .text.TIM_OC2FastConfig:00000000 TIM_OC2FastConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2018   .text.TIM_OC2FastConfig:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2023   .text.TIM_OC3FastConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2028   .text.TIM_OC3FastConfig:00000000 TIM_OC3FastConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2052   .text.TIM_OC4FastConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2057   .text.TIM_OC4FastConfig:00000000 TIM_OC4FastConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2083   .text.TIM_OC4FastConfig:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2088   .text.TIM_ClearOC1Ref:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2093   .text.TIM_ClearOC1Ref:00000000 TIM_ClearOC1Ref
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2117   .text.TIM_ClearOC2Ref:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2122   .text.TIM_ClearOC2Ref:00000000 TIM_ClearOC2Ref
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2150   .text.TIM_ClearOC3Ref:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2155   .text.TIM_ClearOC3Ref:00000000 TIM_ClearOC3Ref
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2179   .text.TIM_ClearOC4Ref:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2184   .text.TIM_ClearOC4Ref:00000000 TIM_ClearOC4Ref
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2212   .text.TIM_OC1PolarityConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2217   .text.TIM_OC1PolarityConfig:00000000 TIM_OC1PolarityConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2241   .text.TIM_OC1NPolarityConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2246   .text.TIM_OC1NPolarityConfig:00000000 TIM_OC1NPolarityConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2270   .text.TIM_OC2PolarityConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2275   .text.TIM_OC2PolarityConfig:00000000 TIM_OC2PolarityConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2302   .text.TIM_OC2NPolarityConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2307   .text.TIM_OC2NPolarityConfig:00000000 TIM_OC2NPolarityConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2334   .text.TIM_OC3PolarityConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2339   .text.TIM_OC3PolarityConfig:00000000 TIM_OC3PolarityConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2365   .text.TIM_OC3PolarityConfig:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2370   .text.TIM_OC3NPolarityConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2375   .text.TIM_OC3NPolarityConfig:00000000 TIM_OC3NPolarityConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2401   .text.TIM_OC3NPolarityConfig:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2406   .text.TIM_OC4PolarityConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2411   .text.TIM_OC4PolarityConfig:00000000 TIM_OC4PolarityConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2437   .text.TIM_OC4PolarityConfig:00000010 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2442   .text.TIM_SelectOCREFClear:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2447   .text.TIM_SelectOCREFClear:00000000 TIM_SelectOCREFClear
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2469   .text.TIM_CCxCmd:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2474   .text.TIM_CCxCmd:00000000 TIM_CCxCmd
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2507   .text.TIM_CCxNCmd:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2512   .text.TIM_CCxNCmd:00000000 TIM_CCxNCmd
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2545   .text.TIM_SelectCOM:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2550   .text.TIM_SelectCOM:00000000 TIM_SelectCOM
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2578   .text.TIM_ICStructInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2583   .text.TIM_ICStructInit:00000000 TIM_ICStructInit
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2607   .text.TIM_GetCapture1:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2612   .text.TIM_GetCapture1:00000000 TIM_GetCapture1
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2627   .text.TIM_GetCapture2:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2632   .text.TIM_GetCapture2:00000000 TIM_GetCapture2
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2647   .text.TIM_GetCapture3:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2652   .text.TIM_GetCapture3:00000000 TIM_GetCapture3
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2667   .text.TIM_GetCapture4:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2672   .text.TIM_GetCapture4:00000000 TIM_GetCapture4
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2687   .text.TIM_SetIC1Prescaler:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2692   .text.TIM_SetIC1Prescaler:00000000 TIM_SetIC1Prescaler
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2714   .text.TIM_SetIC2Prescaler:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2719   .text.TIM_SetIC2Prescaler:00000000 TIM_SetIC2Prescaler
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2742   .text.TIM_SetIC2Prescaler:00000014 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2747   .text.TIM_PWMIConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2752   .text.TIM_PWMIConfig:00000000 TIM_PWMIConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2846   .text.TIM_SetIC3Prescaler:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2851   .text.TIM_SetIC3Prescaler:00000000 TIM_SetIC3Prescaler
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2873   .text.TIM_SetIC4Prescaler:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2878   .text.TIM_SetIC4Prescaler:00000000 TIM_SetIC4Prescaler
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2901   .text.TIM_SetIC4Prescaler:00000014 $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2906   .text.TIM_ICInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:2911   .text.TIM_ICInit:00000000 TIM_ICInit
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3097   .text.TIM_ICInit:000000bc $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3106   .text.TIM_ITConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3111   .text.TIM_ITConfig:00000000 TIM_ITConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3140   .text.TIM_GenerateEvent:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3145   .text.TIM_GenerateEvent:00000000 TIM_GenerateEvent
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3159   .text.TIM_GetFlagStatus:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3164   .text.TIM_GetFlagStatus:00000000 TIM_GetFlagStatus
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3186   .text.TIM_ClearFlag:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3191   .text.TIM_ClearFlag:00000000 TIM_ClearFlag
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3208   .text.TIM_GetITStatus:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3213   .text.TIM_GetITStatus:00000000 TIM_GetITStatus
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3247   .text.TIM_ClearITPendingBit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3252   .text.TIM_ClearITPendingBit:00000000 TIM_ClearITPendingBit
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3269   .text.TIM_DMAConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3274   .text.TIM_DMAConfig:00000000 TIM_DMAConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3291   .text.TIM_DMACmd:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3296   .text.TIM_DMACmd:00000000 TIM_DMACmd
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3325   .text.TIM_SelectCCDMA:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3330   .text.TIM_SelectCCDMA:00000000 TIM_SelectCCDMA
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3358   .text.TIM_InternalClockConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3363   .text.TIM_InternalClockConfig:00000000 TIM_InternalClockConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3380   .text.TIM_ITRxExternalClockConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3385   .text.TIM_ITRxExternalClockConfig:00000000 TIM_ITRxExternalClockConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3418   .text.TIM_TIxExternalClockConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3423   .text.TIM_TIxExternalClockConfig:00000000 TIM_TIxExternalClockConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3488   .text.TIM_SelectInputTrigger:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3493   .text.TIM_SelectInputTrigger:00000000 TIM_SelectInputTrigger
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3517   .text.TIM_SelectOutputTrigger:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3522   .text.TIM_SelectOutputTrigger:00000000 TIM_SelectOutputTrigger
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3544   .text.TIM_SelectSlaveMode:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3549   .text.TIM_SelectSlaveMode:00000000 TIM_SelectSlaveMode
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3571   .text.TIM_SelectMasterSlaveMode:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3576   .text.TIM_SelectMasterSlaveMode:00000000 TIM_SelectMasterSlaveMode
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3598   .text.TIM_ETRConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3603   .text.TIM_ETRConfig:00000000 TIM_ETRConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3640   .text.TIM_ETRClockMode1Config:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3645   .text.TIM_ETRClockMode1Config:00000000 TIM_ETRClockMode1Config
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3680   .text.TIM_ETRClockMode2Config:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3685   .text.TIM_ETRClockMode2Config:00000000 TIM_ETRClockMode2Config
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3713   .text.TIM_EncoderInterfaceConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3718   .text.TIM_EncoderInterfaceConfig:00000000 TIM_EncoderInterfaceConfig
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3784   .text.TIM_EncoderInterfaceConfig:0000002c $d
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3789   .text.TIM_SelectHallSensor:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3794   .text.TIM_SelectHallSensor:00000000 TIM_SelectHallSensor
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3822   .text.TIM_RemapConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccfEw3Q0.s:3827   .text.TIM_RemapConfig:00000000 TIM_RemapConfig
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
