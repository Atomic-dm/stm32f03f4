   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_gpio.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.GPIO_DeInit,"ax",%progbits
  18              		.align	2
  19              		.global	GPIO_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	GPIO_DeInit:
  24              	.LFB33:
  25              		.file 1 ".\\StdPeriphLib\\src/stm32f0xx_gpio.c"
   1:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
   2:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   ******************************************************************************
   3:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @file    stm32f0xx_gpio.c
   4:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @author  MCD Application Team
   5:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @version V1.5.0
   6:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @date    05-December-2014
   7:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief   This file provides firmware functions to manage the following 
   8:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *          functionalities of the GPIO peripheral:
   9:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *           + Initialization and Configuration functions
  10:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *           + GPIO Read and Write functions
  11:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *           + GPIO Alternate functions configuration functions
  12:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *
  13:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *  @verbatim
  14:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *
  15:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *
  16:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     ===========================================================================
  17:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                          ##### How to use this driver #####
  18:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     ===========================================================================
  19:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       [..]
  20:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       (#) Enable the GPIO AHB clock using RCC_AHBPeriphClockCmd()
  21:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       (#) Configure the GPIO pin(s) using GPIO_Init()
  22:.\StdPeriphLib\src/stm32f0xx_gpio.c ****           Four possible configuration are available for each pin:
  23:.\StdPeriphLib\src/stm32f0xx_gpio.c ****          (++) Input: Floating, Pull-up, Pull-down.
  24:.\StdPeriphLib\src/stm32f0xx_gpio.c ****          (++) Output: Push-Pull (Pull-up, Pull-down or no Pull)
  25:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                       Open Drain (Pull-up, Pull-down or no Pull).
  26:.\StdPeriphLib\src/stm32f0xx_gpio.c ****               In output mode, the speed is configurable: Low, Medium, Fast or High.
  27:.\StdPeriphLib\src/stm32f0xx_gpio.c ****          (++) Alternate Function: Push-Pull (Pull-up, Pull-down or no Pull)
  28:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                                   Open Drain (Pull-up, Pull-down or no Pull).
  29:.\StdPeriphLib\src/stm32f0xx_gpio.c ****          (++) Analog: required mode when a pin is to be used as ADC channel,
  30:.\StdPeriphLib\src/stm32f0xx_gpio.c ****               DAC output or comparator input.
  31:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       (#) Peripherals alternate function:
  32:.\StdPeriphLib\src/stm32f0xx_gpio.c ****          (++) For ADC, DAC and comparators, configure the desired pin in analog 
  33:.\StdPeriphLib\src/stm32f0xx_gpio.c ****               mode using GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AN
  34:.\StdPeriphLib\src/stm32f0xx_gpio.c ****          (++) For other peripherals (TIM, USART...):
  35:.\StdPeriphLib\src/stm32f0xx_gpio.c ****               (+++) Connect the pin to the desired peripherals' Alternate 
  36:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                     Function (AF) using GPIO_PinAFConfig() function. For PortC, 
  37:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                     PortD and PortF, no configuration is needed.
  38:.\StdPeriphLib\src/stm32f0xx_gpio.c ****               (+++) Configure the desired pin in alternate function mode using
  39:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                     GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  40:.\StdPeriphLib\src/stm32f0xx_gpio.c ****               (+++) Select the type, pull-up/pull-down and output speed via 
  41:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                     GPIO_PuPd, GPIO_OType and GPIO_Speed members
  42:.\StdPeriphLib\src/stm32f0xx_gpio.c ****               (+++) Call GPIO_Init() function
  43:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       (#) To get the level of a pin configured in input mode use GPIO_ReadInputDataBit()
  44:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       (#) To set/reset the level of a pin configured in output mode use
  45:.\StdPeriphLib\src/stm32f0xx_gpio.c ****           GPIO_SetBits()/GPIO_ResetBits()
  46:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       (#) During and just after reset, the alternate functions are not active and 
  47:.\StdPeriphLib\src/stm32f0xx_gpio.c ****           the GPIO pins are configured in input floating mode (except JTAG pins).
  48:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       (#) The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as 
  49:.\StdPeriphLib\src/stm32f0xx_gpio.c ****           general-purpose (PC14 and PC15, respectively) when the LSE oscillator 
  50:.\StdPeriphLib\src/stm32f0xx_gpio.c ****           is off. The LSE has priority over the GPIO function.
  51:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       (#) The HSE oscillator pins OSC_IN/OSC_OUT can be used as general-purpose 
  52:.\StdPeriphLib\src/stm32f0xx_gpio.c ****           PD0 and PD1, respectively, when the HSE oscillator is off. The HSE has 
  53:.\StdPeriphLib\src/stm32f0xx_gpio.c ****           priority over the GPIO function.
  54:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     @endverbatim
  55:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   ******************************************************************************
  56:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @attention
  57:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *
  58:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  59:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *
  60:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  61:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * You may not use this file except in compliance with the License.
  62:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * You may obtain a copy of the License at:
  63:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *
  64:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  65:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *
  66:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * Unless required by applicable law or agreed to in writing, software 
  67:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  68:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  69:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * See the License for the specific language governing permissions and
  70:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * limitations under the License.
  71:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *
  72:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   ******************************************************************************
  73:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
  74:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
  75:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /* Includes ------------------------------------------------------------------*/
  76:.\StdPeriphLib\src/stm32f0xx_gpio.c **** #include "stm32f0xx_gpio.h"
  77:.\StdPeriphLib\src/stm32f0xx_gpio.c **** #include "stm32f0xx_rcc.h"
  78:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
  79:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  80:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @{
  81:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
  82:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
  83:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /** @defgroup GPIO 
  84:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief GPIO driver modules
  85:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @{
  86:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
  87:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
  88:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /* Private typedef -----------------------------------------------------------*/
  89:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /* Private define ------------------------------------------------------------*/
  90:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /* Private macro -------------------------------------------------------------*/
  91:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /* Private variables ---------------------------------------------------------*/
  92:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /* Private function prototypes -----------------------------------------------*/
  93:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /* Private functions ---------------------------------------------------------*/
  94:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
  95:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /** @defgroup GPIO_Private_Functions 
  96:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @{
  97:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
  98:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
  99:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /** @defgroup GPIO_Group1 Initialization and Configuration
 100:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  *  @brief   Initialization and Configuration
 101:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  *
 102:.\StdPeriphLib\src/stm32f0xx_gpio.c **** @verbatim
 103:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  ===============================================================================
 104:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                     ##### Initialization and Configuration #####
 105:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  ===============================================================================
 106:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 107:.\StdPeriphLib\src/stm32f0xx_gpio.c **** @endverbatim
 108:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @{
 109:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 110:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 111:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 112:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Deinitializes the GPIOx peripheral registers to their default reset 
 113:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         values.
 114:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 115:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 116:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.    
 117:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 118:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 119:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_DeInit(GPIO_TypeDef* GPIOx)
 120:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
  26              		.loc 1 120 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 10B5     		push	{r4, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
 121:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 122:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 123:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 124:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   if(GPIOx == GPIOA)
  34              		.loc 1 124 0
  35 0002 9023     		mov	r3, #144
  36 0004 DB05     		lsl	r3, r3, #23
  37 0006 9842     		cmp	r0, r3
  38 0008 0AD1     		bne	.L2
 125:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 126:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  39              		.loc 1 126 0
  40 000a 8024     		mov	r4, #128
  41 000c A402     		lsl	r4, r4, #10
  42 000e 201C     		mov	r0, r4
  43              	.LVL1:
  44 0010 0121     		mov	r1, #1
  45 0012 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
  46              	.LVL2:
 127:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  47              		.loc 1 127 0
  48 0016 201C     		mov	r0, r4
  49 0018 0021     		mov	r1, #0
  50 001a FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
  51              	.LVL3:
  52 001e 44E0     		b	.L1
  53              	.LVL4:
  54              	.L2:
 128:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 129:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   else if(GPIOx == GPIOB)
  55              		.loc 1 129 0
  56 0020 224B     		ldr	r3, .L8
  57 0022 9842     		cmp	r0, r3
  58 0024 0AD1     		bne	.L4
 130:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 131:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
  59              		.loc 1 131 0
  60 0026 8024     		mov	r4, #128
  61 0028 E402     		lsl	r4, r4, #11
  62 002a 201C     		mov	r0, r4
  63              	.LVL5:
  64 002c 0121     		mov	r1, #1
  65 002e FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
  66              	.LVL6:
 132:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  67              		.loc 1 132 0
  68 0032 201C     		mov	r0, r4
  69 0034 0021     		mov	r1, #0
  70 0036 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
  71              	.LVL7:
  72 003a 36E0     		b	.L1
  73              	.LVL8:
  74              	.L4:
 133:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 134:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   else if(GPIOx == GPIOC)
  75              		.loc 1 134 0
  76 003c 1C4B     		ldr	r3, .L8+4
  77 003e 9842     		cmp	r0, r3
  78 0040 0AD1     		bne	.L5
 135:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 136:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  79              		.loc 1 136 0
  80 0042 8024     		mov	r4, #128
  81 0044 2403     		lsl	r4, r4, #12
  82 0046 201C     		mov	r0, r4
  83              	.LVL9:
  84 0048 0121     		mov	r1, #1
  85 004a FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
  86              	.LVL10:
 137:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  87              		.loc 1 137 0
  88 004e 201C     		mov	r0, r4
  89 0050 0021     		mov	r1, #0
  90 0052 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
  91              	.LVL11:
  92 0056 28E0     		b	.L1
  93              	.LVL12:
  94              	.L5:
 138:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 139:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   else if(GPIOx == GPIOD)
  95              		.loc 1 139 0
  96 0058 164B     		ldr	r3, .L8+8
  97 005a 9842     		cmp	r0, r3
  98 005c 0AD1     		bne	.L6
 140:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 141:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  99              		.loc 1 141 0
 100 005e 8024     		mov	r4, #128
 101 0060 6403     		lsl	r4, r4, #13
 102 0062 201C     		mov	r0, r4
 103              	.LVL13:
 104 0064 0121     		mov	r1, #1
 105 0066 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
 106              	.LVL14:
 142:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 107              		.loc 1 142 0
 108 006a 201C     		mov	r0, r4
 109 006c 0021     		mov	r1, #0
 110 006e FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
 111              	.LVL15:
 112 0072 1AE0     		b	.L1
 113              	.LVL16:
 114              	.L6:
 143:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 144:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   else if(GPIOx == GPIOE)
 115              		.loc 1 144 0
 116 0074 104B     		ldr	r3, .L8+12
 117 0076 9842     		cmp	r0, r3
 118 0078 0AD1     		bne	.L7
 145:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 146:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 119              		.loc 1 146 0
 120 007a 8024     		mov	r4, #128
 121 007c A403     		lsl	r4, r4, #14
 122 007e 201C     		mov	r0, r4
 123              	.LVL17:
 124 0080 0121     		mov	r1, #1
 125 0082 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
 126              	.LVL18:
 147:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 127              		.loc 1 147 0
 128 0086 201C     		mov	r0, r4
 129 0088 0021     		mov	r1, #0
 130 008a FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
 131              	.LVL19:
 132 008e 0CE0     		b	.L1
 133              	.LVL20:
 134              	.L7:
 148:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 149:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   else
 150:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 151:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     if(GPIOx == GPIOF)
 135              		.loc 1 151 0
 136 0090 0A4B     		ldr	r3, .L8+16
 137 0092 9842     		cmp	r0, r3
 138 0094 09D1     		bne	.L1
 152:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     {
 153:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 139              		.loc 1 153 0
 140 0096 8024     		mov	r4, #128
 141 0098 E403     		lsl	r4, r4, #15
 142 009a 201C     		mov	r0, r4
 143              	.LVL21:
 144 009c 0121     		mov	r1, #1
 145 009e FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
 146              	.LVL22:
 154:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 147              		.loc 1 154 0
 148 00a2 201C     		mov	r0, r4
 149 00a4 0021     		mov	r1, #0
 150 00a6 FFF7FEFF 		bl	RCC_AHBPeriphResetCmd
 151              	.LVL23:
 152              	.L1:
 155:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     }
 156:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 157:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 153              		.loc 1 157 0
 154              		@ sp needed
 155 00aa 10BD     		pop	{r4, pc}
 156              	.L9:
 157              		.align	2
 158              	.L8:
 159 00ac 00040048 		.word	1207960576
 160 00b0 00080048 		.word	1207961600
 161 00b4 000C0048 		.word	1207962624
 162 00b8 00100048 		.word	1207963648
 163 00bc 00140048 		.word	1207964672
 164              		.cfi_endproc
 165              	.LFE33:
 167              		.section	.text.GPIO_Init,"ax",%progbits
 168              		.align	2
 169              		.global	GPIO_Init
 170              		.code	16
 171              		.thumb_func
 173              	GPIO_Init:
 174              	.LFB34:
 158:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 159:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 160:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Initializes the GPIOx peripheral according to the specified 
 161:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         parameters in the GPIO_InitStruct.
 162:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 163:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 164:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.   
 165:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
 166:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         the configuration information for the specified GPIO peripheral.
 167:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 168:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 169:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 170:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 175              		.loc 1 170 0
 176              		.cfi_startproc
 177              	.LVL24:
 178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 179              	.LCFI1:
 180              		.cfi_def_cfa_offset 20
 181              		.cfi_offset 4, -20
 182              		.cfi_offset 5, -16
 183              		.cfi_offset 6, -12
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 4F46     		mov	r7, r9
 187 0004 4646     		mov	r6, r8
 188 0006 C0B4     		push	{r6, r7}
 189              	.LCFI2:
 190              		.cfi_def_cfa_offset 28
 191              		.cfi_offset 8, -28
 192              		.cfi_offset 9, -24
 193              	.LVL25:
 194              		.loc 1 170 0
 195 0008 0025     		mov	r5, #0
 171:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 172:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 173:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 174:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 175:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 176:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 177:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 178:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 179:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /*-------------------------- Configure the port pins -----------------------*/
 180:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /*-- GPIO Mode Configuration --*/
 181:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 196              		.loc 1 181 0
 197 000a 0022     		mov	r2, #0
 182:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 183:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     pos = ((uint32_t)0x01) << pinpos;
 198              		.loc 1 183 0
 199 000c 0126     		mov	r6, #1
 184:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 185:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     /* Get the port pins position */
 186:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 187:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 188:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     if (currentpin == pos)
 189:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     {
 190:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode
 191:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       {
 192:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         /* Check Speed mode parameters */
 193:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 194:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 195:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         /* Speed mode configuration */
 196:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 197:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 198:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 199:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         /* Check Output mode parameters */
 200:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 201:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 202:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         /* Output mode configuration */
 203:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 204:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 205:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       }
 206:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 207:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 200              		.loc 1 207 0
 201 000e 0327     		mov	r7, #3
 202              	.LVL26:
 203              	.L13:
 186:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 204              		.loc 1 186 0
 205 0010 331C     		mov	r3, r6
 206 0012 9340     		lsl	r3, r3, r2
 207 0014 0C68     		ldr	r4, [r1]
 208 0016 1C40     		and	r4, r3
 188:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     {
 209              		.loc 1 188 0
 210 0018 9C42     		cmp	r4, r3
 211 001a 3AD1     		bne	.L11
 190:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       {
 212              		.loc 1 190 0
 213 001c 0B79     		ldrb	r3, [r1, #4]
 214 001e 013B     		sub	r3, r3, #1
 215 0020 012B     		cmp	r3, #1
 216 0022 1DD8     		bhi	.L12
 196:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 217              		.loc 1 196 0
 218 0024 8368     		ldr	r3, [r0, #8]
 219 0026 3C1C     		mov	r4, r7
 220 0028 AC40     		lsl	r4, r4, r5
 221 002a A343     		bic	r3, r4
 222 002c 8360     		str	r3, [r0, #8]
 197:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 223              		.loc 1 197 0
 224 002e 8468     		ldr	r4, [r0, #8]
 225 0030 4B79     		ldrb	r3, [r1, #5]
 226 0032 AB40     		lsl	r3, r3, r5
 227 0034 2343     		orr	r3, r4
 228 0036 8360     		str	r3, [r0, #8]
 203:.\StdPeriphLib\src/stm32f0xx_gpio.c ****         GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 229              		.loc 1 203 0
 230 0038 8388     		ldrh	r3, [r0, #4]
 231 003a 9846     		mov	r8, r3
 232 003c 1304     		lsl	r3, r2, #16
 233 003e 1B0C     		lsr	r3, r3, #16
 234 0040 9946     		mov	r9, r3
 235 0042 341C     		mov	r4, r6
 236 0044 9C40     		lsl	r4, r4, r3
 237 0046 4346     		mov	r3, r8
 238 0048 A343     		bic	r3, r4
 239 004a 8380     		strh	r3, [r0, #4]
 204:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       }
 240              		.loc 1 204 0
 241 004c 8488     		ldrh	r4, [r0, #4]
 242 004e A446     		mov	ip, r4
 243 0050 8C79     		ldrb	r4, [r1, #6]
 244 0052 4B46     		mov	r3, r9
 245 0054 9C40     		lsl	r4, r4, r3
 246 0056 231C     		mov	r3, r4
 247 0058 6446     		mov	r4, ip
 248 005a 2343     		orr	r3, r4
 249 005c 9BB2     		uxth	r3, r3
 250 005e 8380     		strh	r3, [r0, #4]
 251              	.L12:
 252              		.loc 1 207 0
 253 0060 0368     		ldr	r3, [r0]
 254 0062 3C1C     		mov	r4, r7
 255 0064 AC40     		lsl	r4, r4, r5
 256 0066 A343     		bic	r3, r4
 257 0068 0360     		str	r3, [r0]
 208:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 209:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 258              		.loc 1 209 0
 259 006a 0468     		ldr	r4, [r0]
 260 006c 0B79     		ldrb	r3, [r1, #4]
 261 006e AB40     		lsl	r3, r3, r5
 262 0070 2343     		orr	r3, r4
 263 0072 0360     		str	r3, [r0]
 210:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 211:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       /* Pull-up Pull down resistor configuration */
 212:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 264              		.loc 1 212 0
 265 0074 C368     		ldr	r3, [r0, #12]
 266 0076 9C46     		mov	ip, r3
 267 0078 1304     		lsl	r3, r2, #16
 268 007a DB0B     		lsr	r3, r3, #15
 269 007c 3C1C     		mov	r4, r7
 270 007e 9C40     		lsl	r4, r4, r3
 271 0080 231C     		mov	r3, r4
 272 0082 6446     		mov	r4, ip
 273 0084 9C43     		bic	r4, r3
 274 0086 C460     		str	r4, [r0, #12]
 213:.\StdPeriphLib\src/stm32f0xx_gpio.c ****       GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 275              		.loc 1 213 0
 276 0088 C468     		ldr	r4, [r0, #12]
 277 008a CB79     		ldrb	r3, [r1, #7]
 278 008c AB40     		lsl	r3, r3, r5
 279 008e 2343     		orr	r3, r4
 280 0090 C360     		str	r3, [r0, #12]
 281              	.L11:
 181:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 282              		.loc 1 181 0 discriminator 2
 283 0092 0132     		add	r2, r2, #1
 284              	.LVL27:
 285 0094 0235     		add	r5, r5, #2
 286 0096 102A     		cmp	r2, #16
 287 0098 BAD1     		bne	.L13
 214:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     }
 215:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 216:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 288              		.loc 1 216 0
 289              		@ sp needed
 290 009a 0CBC     		pop	{r2, r3}
 291 009c 9046     		mov	r8, r2
 292 009e 9946     		mov	r9, r3
 293 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 294              		.cfi_endproc
 295              	.LFE34:
 297 00a2 C046     		.section	.text.GPIO_StructInit,"ax",%progbits
 298              		.align	2
 299              		.global	GPIO_StructInit
 300              		.code	16
 301              		.thumb_func
 303              	GPIO_StructInit:
 304              	.LFB35:
 217:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 218:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 219:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Fills each GPIO_InitStruct member with its default value.
 220:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
 221:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         be initialized.
 222:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 223:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 224:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
 225:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 305              		.loc 1 225 0
 306              		.cfi_startproc
 307              	.LVL28:
 226:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Reset GPIO init structure parameters values */
 227:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 308              		.loc 1 227 0
 309 0000 044B     		ldr	r3, .L16
 310 0002 0360     		str	r3, [r0]
 228:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 311              		.loc 1 228 0
 312 0004 0023     		mov	r3, #0
 313 0006 0371     		strb	r3, [r0, #4]
 229:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 314              		.loc 1 229 0
 315 0008 0122     		mov	r2, #1
 316 000a 4271     		strb	r2, [r0, #5]
 230:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 317              		.loc 1 230 0
 318 000c 8371     		strb	r3, [r0, #6]
 231:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 319              		.loc 1 231 0
 320 000e C371     		strb	r3, [r0, #7]
 232:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 321              		.loc 1 232 0
 322              		@ sp needed
 323 0010 7047     		bx	lr
 324              	.L17:
 325 0012 C046     		.align	2
 326              	.L16:
 327 0014 FFFF0000 		.word	65535
 328              		.cfi_endproc
 329              	.LFE35:
 331              		.section	.text.GPIO_PinLockConfig,"ax",%progbits
 332              		.align	2
 333              		.global	GPIO_PinLockConfig
 334              		.code	16
 335              		.thumb_func
 337              	GPIO_PinLockConfig:
 338              	.LFB36:
 233:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 234:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 235:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Locks GPIO Pins configuration registers.
 236:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   The locked registers are GPIOx_MODER, GPIOx_OTYPER, GPIOx_OSPEEDR,
 237:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         GPIOx_PUPDR, GPIOx_AFRL and GPIOx_AFRH.
 238:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   The configuration of the locked GPIO pins can no longer be modified
 239:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         until the next device reset.
 240:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A or B) to select the GPIO peripheral.
 241:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 242:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
 243:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 244:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 245:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 246:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 339              		.loc 1 246 0
 340              		.cfi_startproc
 341              	.LVL29:
 342 0000 82B0     		sub	sp, sp, #8
 343              	.LCFI3:
 344              		.cfi_def_cfa_offset 8
 247:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   __IO uint32_t tmp = 0x00010000;
 345              		.loc 1 247 0
 346 0002 8023     		mov	r3, #128
 347 0004 5B02     		lsl	r3, r3, #9
 348 0006 0193     		str	r3, [sp, #4]
 248:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 249:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 250:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
 251:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 252:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 253:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   tmp |= GPIO_Pin;
 349              		.loc 1 253 0
 350 0008 019B     		ldr	r3, [sp, #4]
 351 000a 0B43     		orr	r3, r1
 352 000c 0193     		str	r3, [sp, #4]
 254:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Set LCKK bit */
 255:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->LCKR = tmp;
 353              		.loc 1 255 0
 354 000e 019B     		ldr	r3, [sp, #4]
 355 0010 C361     		str	r3, [r0, #28]
 256:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Reset LCKK bit */
 257:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->LCKR =  GPIO_Pin;
 356              		.loc 1 257 0
 357 0012 C161     		str	r1, [r0, #28]
 258:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Set LCKK bit */
 259:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->LCKR = tmp;
 358              		.loc 1 259 0
 359 0014 019B     		ldr	r3, [sp, #4]
 360 0016 C361     		str	r3, [r0, #28]
 260:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Read LCKK bit */
 261:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   tmp = GPIOx->LCKR;
 361              		.loc 1 261 0
 362 0018 C369     		ldr	r3, [r0, #28]
 363 001a 0193     		str	r3, [sp, #4]
 262:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Read LCKK bit */
 263:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   tmp = GPIOx->LCKR;
 364              		.loc 1 263 0
 365 001c C369     		ldr	r3, [r0, #28]
 366 001e 0193     		str	r3, [sp, #4]
 264:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 367              		.loc 1 264 0
 368 0020 02B0     		add	sp, sp, #8
 369              		@ sp needed
 370 0022 7047     		bx	lr
 371              		.cfi_endproc
 372              	.LFE36:
 374              		.section	.text.GPIO_ReadInputDataBit,"ax",%progbits
 375              		.align	2
 376              		.global	GPIO_ReadInputDataBit
 377              		.code	16
 378              		.thumb_func
 380              	GPIO_ReadInputDataBit:
 381              	.LFB37:
 265:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 266:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 267:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @}
 268:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 269:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 270:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /** @defgroup GPIO_Group2 GPIO Read and Write
 271:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  *  @brief   GPIO Read and Write
 272:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  *
 273:.\StdPeriphLib\src/stm32f0xx_gpio.c **** @verbatim   
 274:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  ===============================================================================
 275:.\StdPeriphLib\src/stm32f0xx_gpio.c ****                       ##### GPIO Read and Write #####
 276:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  ===============================================================================  
 277:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 278:.\StdPeriphLib\src/stm32f0xx_gpio.c **** @endverbatim
 279:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @{
 280:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 281:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 282:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 283:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Reads the specified input port pin.
 284:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 285:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 286:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.   
 287:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_Pin: specifies the port bit to read.
 288:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   This parameter can be GPIO_Pin_x where x can be:
 289:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 
 290:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 291:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 292:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval The input port pin value.
 293:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 294:.\StdPeriphLib\src/stm32f0xx_gpio.c **** uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 295:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 382              		.loc 1 295 0
 383              		.cfi_startproc
 384              	.LVL30:
 296:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   uint8_t bitstatus = 0x00;
 297:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 298:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 299:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 300:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 301:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 302:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 385              		.loc 1 302 0
 386 0000 008A     		ldrh	r0, [r0, #16]
 387              	.LVL31:
 388 0002 0840     		and	r0, r1
 389              	.LVL32:
 390 0004 411E     		sub	r1, r0, #1
 391 0006 8841     		sbc	r0, r0, r1
 392              	.LVL33:
 303:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 304:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     bitstatus = (uint8_t)Bit_SET;
 305:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 306:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   else
 307:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 308:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     bitstatus = (uint8_t)Bit_RESET;
 309:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 310:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   return bitstatus;
 393              		.loc 1 310 0
 394 0008 C0B2     		uxtb	r0, r0
 311:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 395              		.loc 1 311 0
 396              		@ sp needed
 397 000a 7047     		bx	lr
 398              		.cfi_endproc
 399              	.LFE37:
 401              		.section	.text.GPIO_ReadInputData,"ax",%progbits
 402              		.align	2
 403              		.global	GPIO_ReadInputData
 404              		.code	16
 405              		.thumb_func
 407              	GPIO_ReadInputData:
 408              	.LFB38:
 312:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 313:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 314:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Reads the specified input port pin.
 315:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 316:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 317:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.   
 318:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval The input port pin value.
 319:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 320:.\StdPeriphLib\src/stm32f0xx_gpio.c **** uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
 321:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 409              		.loc 1 321 0
 410              		.cfi_startproc
 411              	.LVL34:
 322:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 323:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 324:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 325:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   return ((uint16_t)GPIOx->IDR);
 412              		.loc 1 325 0
 413 0000 008A     		ldrh	r0, [r0, #16]
 414              	.LVL35:
 415 0002 80B2     		uxth	r0, r0
 326:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 416              		.loc 1 326 0
 417              		@ sp needed
 418 0004 7047     		bx	lr
 419              		.cfi_endproc
 420              	.LFE38:
 422 0006 C046     		.section	.text.GPIO_ReadOutputDataBit,"ax",%progbits
 423              		.align	2
 424              		.global	GPIO_ReadOutputDataBit
 425              		.code	16
 426              		.thumb_func
 428              	GPIO_ReadOutputDataBit:
 429              	.LFB39:
 327:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 328:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 329:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Reads the specified output data port bit.
 330:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 331:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 332:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.   
 333:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_Pin: Specifies the port bit to read.
 334:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   This parameter can be GPIO_Pin_x where x can be:
 335:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 
 336:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 337:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 338:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval The output port pin value.
 339:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 340:.\StdPeriphLib\src/stm32f0xx_gpio.c **** uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 341:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 430              		.loc 1 341 0
 431              		.cfi_startproc
 432              	.LVL36:
 342:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   uint8_t bitstatus = 0x00;
 343:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 344:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 345:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 346:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 347:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 348:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 433              		.loc 1 348 0
 434 0000 808A     		ldrh	r0, [r0, #20]
 435              	.LVL37:
 436 0002 0840     		and	r0, r1
 437              	.LVL38:
 438 0004 411E     		sub	r1, r0, #1
 439 0006 8841     		sbc	r0, r0, r1
 440              	.LVL39:
 349:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 350:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     bitstatus = (uint8_t)Bit_SET;
 351:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 352:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   else
 353:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 354:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     bitstatus = (uint8_t)Bit_RESET;
 355:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 356:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   return bitstatus;
 441              		.loc 1 356 0
 442 0008 C0B2     		uxtb	r0, r0
 357:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 443              		.loc 1 357 0
 444              		@ sp needed
 445 000a 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE39:
 449              		.section	.text.GPIO_ReadOutputData,"ax",%progbits
 450              		.align	2
 451              		.global	GPIO_ReadOutputData
 452              		.code	16
 453              		.thumb_func
 455              	GPIO_ReadOutputData:
 456              	.LFB40:
 358:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 359:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 360:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Reads the specified GPIO output data port.
 361:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 362:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 363:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.    
 364:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval GPIO output data port value.
 365:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 366:.\StdPeriphLib\src/stm32f0xx_gpio.c **** uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
 367:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 457              		.loc 1 367 0
 458              		.cfi_startproc
 459              	.LVL40:
 368:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 369:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 370:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 371:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   return ((uint16_t)GPIOx->ODR);
 460              		.loc 1 371 0
 461 0000 808A     		ldrh	r0, [r0, #20]
 462              	.LVL41:
 463 0002 80B2     		uxth	r0, r0
 372:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 464              		.loc 1 372 0
 465              		@ sp needed
 466 0004 7047     		bx	lr
 467              		.cfi_endproc
 468              	.LFE40:
 470 0006 C046     		.section	.text.GPIO_SetBits,"ax",%progbits
 471              		.align	2
 472              		.global	GPIO_SetBits
 473              		.code	16
 474              		.thumb_func
 476              	GPIO_SetBits:
 477              	.LFB41:
 373:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 374:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 375:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Sets the selected data port bits.
 376:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 377:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 378:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.    
 379:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_Pin: specifies the port bits to be written.
 380:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   This parameter can be GPIO_Pin_x where x can be:
 381:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 
 382:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 383:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 384:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 385:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 386:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 387:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 478              		.loc 1 387 0
 479              		.cfi_startproc
 480              	.LVL42:
 388:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 389:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 390:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 391:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 392:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->BSRR = GPIO_Pin;
 481              		.loc 1 392 0
 482 0000 8161     		str	r1, [r0, #24]
 393:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 483              		.loc 1 393 0
 484              		@ sp needed
 485 0002 7047     		bx	lr
 486              		.cfi_endproc
 487              	.LFE41:
 489              		.section	.text.GPIO_ResetBits,"ax",%progbits
 490              		.align	2
 491              		.global	GPIO_ResetBits
 492              		.code	16
 493              		.thumb_func
 495              	GPIO_ResetBits:
 496              	.LFB42:
 394:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 395:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 396:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Clears the selected data port bits.
 397:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 398:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 399:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.
 400:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_Pin: specifies the port bits to be written.
 401:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   This parameter can be GPIO_Pin_x where x can be:
 402:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 
 403:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 404:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 405:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 406:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 407:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 408:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 497              		.loc 1 408 0
 498              		.cfi_startproc
 499              	.LVL43:
 409:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 410:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 411:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 412:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 413:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->BRR = GPIO_Pin;
 500              		.loc 1 413 0
 501 0000 0185     		strh	r1, [r0, #40]
 414:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 502              		.loc 1 414 0
 503              		@ sp needed
 504 0002 7047     		bx	lr
 505              		.cfi_endproc
 506              	.LFE42:
 508              		.section	.text.GPIO_WriteBit,"ax",%progbits
 509              		.align	2
 510              		.global	GPIO_WriteBit
 511              		.code	16
 512              		.thumb_func
 514              	GPIO_WriteBit:
 515              	.LFB43:
 415:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 416:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 417:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Sets or clears the selected data port bit.
 418:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 419:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 420:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.  
 421:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 422:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  BitVal: specifies the value to be written to the selected bit.
 423:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *          This parameter can be one of the BitAction enumeration values:
 424:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg Bit_RESET: to clear the port pin
 425:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg Bit_SET: to set the port pin
 426:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   This parameter can be GPIO_Pin_x where x can be:
 427:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 
 428:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 429:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 430:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 431:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 432:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
 433:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 516              		.loc 1 433 0
 517              		.cfi_startproc
 518              	.LVL44:
 434:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 435:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 436:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 437:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_BIT_ACTION(BitVal));
 438:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 439:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   if (BitVal != Bit_RESET)
 519              		.loc 1 439 0
 520 0000 002A     		cmp	r2, #0
 521 0002 01D0     		beq	.L26
 440:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 441:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     GPIOx->BSRR = GPIO_Pin;
 522              		.loc 1 441 0
 523 0004 8161     		str	r1, [r0, #24]
 524 0006 00E0     		b	.L25
 525              	.L26:
 442:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 443:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   else
 444:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   {
 445:.\StdPeriphLib\src/stm32f0xx_gpio.c ****     GPIOx->BRR = GPIO_Pin ;
 526              		.loc 1 445 0
 527 0008 0185     		strh	r1, [r0, #40]
 528              	.L25:
 446:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   }
 447:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 529              		.loc 1 447 0
 530              		@ sp needed
 531 000a 7047     		bx	lr
 532              		.cfi_endproc
 533              	.LFE43:
 535              		.section	.text.GPIO_Write,"ax",%progbits
 536              		.align	2
 537              		.global	GPIO_Write
 538              		.code	16
 539              		.thumb_func
 541              	GPIO_Write:
 542              	.LFB44:
 448:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 449:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 450:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Writes data to the specified GPIO data port.
 451:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 452:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOE is available only for STM32F072.
 453:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOD is not available for STM32F031.  
 454:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  PortVal: specifies the value to be written to the port output data register.
 455:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 456:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 457:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
 458:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 543              		.loc 1 458 0
 544              		.cfi_startproc
 545              	.LVL45:
 459:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 460:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 461:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 462:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->ODR = PortVal;
 546              		.loc 1 462 0
 547 0000 8182     		strh	r1, [r0, #20]
 463:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 548              		.loc 1 463 0
 549              		@ sp needed
 550 0002 7047     		bx	lr
 551              		.cfi_endproc
 552              	.LFE44:
 554              		.section	.text.GPIO_PinAFConfig,"ax",%progbits
 555              		.align	2
 556              		.global	GPIO_PinAFConfig
 557              		.code	16
 558              		.thumb_func
 560              	GPIO_PinAFConfig:
 561              	.LFB45:
 464:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 465:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 466:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @}
 467:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 468:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 469:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /** @defgroup GPIO_Group3 GPIO Alternate functions configuration functions
 470:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  *  @brief   GPIO Alternate functions configuration functions
 471:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  *
 472:.\StdPeriphLib\src/stm32f0xx_gpio.c **** @verbatim   
 473:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  ===============================================================================
 474:.\StdPeriphLib\src/stm32f0xx_gpio.c ****           ##### GPIO Alternate functions configuration functions #####
 475:.\StdPeriphLib\src/stm32f0xx_gpio.c ****  ===============================================================================  
 476:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 477:.\StdPeriphLib\src/stm32f0xx_gpio.c **** @endverbatim
 478:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @{
 479:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 480:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 481:.\StdPeriphLib\src/stm32f0xx_gpio.c **** /**
 482:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @brief  Writes data to the specified GPIO data port.
 483:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
 484:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   GPIOC, GPIOD, GPIOE and GPIOF  are available only for STM32F072 and STM32F091. 
 485:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_PinSource: specifies the pin for the Alternate function.
 486:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *          This parameter can be GPIO_PinSourcex where x can be (0..15) for GPIOA, GPIOB, GPIOD, 
 487:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *          and (0..12) for GPIOC and (0, 2..5, 9..10) for GPIOF.    
 488:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @param  GPIO_AF: selects the pin to used as Alternate function.
 489:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *          This parameter can be one of the following value:
 490:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg GPIO_AF_0:  WKUP, EVENTOUT, TIM15, SPI1, TIM17, MCO, SWDAT, SWCLK,
 491:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *                             TIM14, BOOT, USART1, CEC, IR_OUT, SPI2, TIM3, USART4,
 492:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *                             CAN, USART2, CRS, TIM16, TIM1, TS, USART8 
 493:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg GPIO_AF_1: USART2, CEC, TIM3, USART1, USART2, EVENTOUT, I2C1,
 494:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *                            I2C2, TIM15, SPI2, USART3, TS, SPI1, USART7, USART8
 495:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *                            USART5, USART4, USART6, I2C1   
 496:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg GPIO_AF_2: TIM2, TIM1, EVENTOUT, TIM16, TIM17, USB, USART6, USART5,
 497:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *                            USART8, USART7, USART6  
 498:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg GPIO_AF_3: TS, I2C1, TIM15, EVENTOUT 
 499:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg GPIO_AF_4: TIM14, USART4, USART3, CRS, CAN, I2C1, USART5
 500:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg GPIO_AF_5: TIM16, TIM17, TIM15, SPI2, I2C2, USART6, MCO
 501:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg GPIO_AF_6: EVENTOUT
 502:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *            @arg GPIO_AF_7: COMP1 OUT, COMP2 OUT 
 503:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   The pin should already been configured in Alternate Function mode(AF)
 504:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         using GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
 505:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @note   Refer to the Alternate function mapping table in the device datasheet 
 506:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         for the detailed mapping of the system and peripherals'alternate 
 507:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   *         function I/O pins.
 508:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   * @retval None
 509:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   */
 510:.\StdPeriphLib\src/stm32f0xx_gpio.c **** void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
 511:.\StdPeriphLib\src/stm32f0xx_gpio.c **** {
 562              		.loc 1 511 0
 563              		.cfi_startproc
 564              	.LVL46:
 565 0000 10B5     		push	{r4, lr}
 566              	.LCFI4:
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 4, -8
 569              		.cfi_offset 14, -4
 570              	.LVL47:
 512:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   uint32_t temp = 0x00;
 513:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   uint32_t temp_2 = 0x00;
 514:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 515:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   /* Check the parameters */
 516:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 517:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 518:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   assert_param(IS_GPIO_AF(GPIO_AF));
 519:.\StdPeriphLib\src/stm32f0xx_gpio.c **** 
 520:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 571              		.loc 1 520 0
 572 0002 0723     		mov	r3, #7
 573 0004 0B40     		and	r3, r1
 574 0006 9B00     		lsl	r3, r3, #2
 575              	.LVL48:
 576 0008 C908     		lsr	r1, r1, #3
 577              	.LVL49:
 578 000a 8900     		lsl	r1, r1, #2
 579 000c 4018     		add	r0, r0, r1
 580              	.LVL50:
 521:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (
 581              		.loc 1 521 0
 582 000e 016A     		ldr	r1, [r0, #32]
 583 0010 0F24     		mov	r4, #15
 584 0012 9C40     		lsl	r4, r4, r3
 585 0014 A143     		bic	r1, r4
 586 0016 0162     		str	r1, [r0, #32]
 522:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 587              		.loc 1 522 0
 588 0018 016A     		ldr	r1, [r0, #32]
 520:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (
 589              		.loc 1 520 0
 590 001a 9A40     		lsl	r2, r2, r3
 591              	.LVL51:
 592 001c 131C     		mov	r3, r2
 593              	.LVL52:
 594              		.loc 1 522 0
 595 001e 0B43     		orr	r3, r1
 596              	.LVL53:
 523:.\StdPeriphLib\src/stm32f0xx_gpio.c ****   GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 597              		.loc 1 523 0
 598 0020 0362     		str	r3, [r0, #32]
 524:.\StdPeriphLib\src/stm32f0xx_gpio.c **** }
 599              		.loc 1 524 0
 600              		@ sp needed
 601 0022 10BD     		pop	{r4, pc}
 602              		.cfi_endproc
 603              	.LFE45:
 605              		.text
 606              	.Letext0:
 607              		.file 2 "c:\\myprograms\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\
 608              		.file 3 "c:\\myprograms\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\
 609              		.file 4 ".\\CMSIS/stm32f0xx.h"
 610              		.file 5 ".\\StdPeriphLib\\inc/stm32f0xx_gpio.h"
 611              		.file 6 ".\\StdPeriphLib\\inc/stm32f0xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_gpio.c
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:18     .text.GPIO_DeInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:23     .text.GPIO_DeInit:00000000 GPIO_DeInit
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:159    .text.GPIO_DeInit:000000ac $d
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:168    .text.GPIO_Init:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:173    .text.GPIO_Init:00000000 GPIO_Init
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:298    .text.GPIO_StructInit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:303    .text.GPIO_StructInit:00000000 GPIO_StructInit
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:327    .text.GPIO_StructInit:00000014 $d
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:332    .text.GPIO_PinLockConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:337    .text.GPIO_PinLockConfig:00000000 GPIO_PinLockConfig
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:375    .text.GPIO_ReadInputDataBit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:380    .text.GPIO_ReadInputDataBit:00000000 GPIO_ReadInputDataBit
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:402    .text.GPIO_ReadInputData:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:407    .text.GPIO_ReadInputData:00000000 GPIO_ReadInputData
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:423    .text.GPIO_ReadOutputDataBit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:428    .text.GPIO_ReadOutputDataBit:00000000 GPIO_ReadOutputDataBit
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:450    .text.GPIO_ReadOutputData:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:455    .text.GPIO_ReadOutputData:00000000 GPIO_ReadOutputData
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:471    .text.GPIO_SetBits:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:476    .text.GPIO_SetBits:00000000 GPIO_SetBits
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:490    .text.GPIO_ResetBits:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:495    .text.GPIO_ResetBits:00000000 GPIO_ResetBits
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:509    .text.GPIO_WriteBit:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:514    .text.GPIO_WriteBit:00000000 GPIO_WriteBit
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:536    .text.GPIO_Write:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:541    .text.GPIO_Write:00000000 GPIO_Write
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:555    .text.GPIO_PinAFConfig:00000000 $t
C:\Users\Dima\AppData\Local\Temp\ccL26piE.s:560    .text.GPIO_PinAFConfig:00000000 GPIO_PinAFConfig
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHBPeriphResetCmd
